//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108


namespace com.robotraconteur.action
{
public static class com__robotraconteur__actionConstants  {
}
    public enum ActionStatusCode
    {
    error = -3,
    failed = -2,
    cancelled = -1,
    unknown = 0,
    queued = 1,
    running = 2,
    complete = 3
    };
}

namespace com.robotraconteur.action
{
public class com__robotraconteur__actionFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.action\n\nstdver 0.9\n\nenum ActionStatusCode\nerror = -3,\nfailed = -2,\ncancelled = -1,\nunknown = 0,\nqueued,\nrunning,\ncomplete\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.action";}
    public com__robotraconteur__actionFactory() : this(null,null) {}
    public com__robotraconteur__actionFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.actuator
{
[RobotRaconteurServiceStruct("com.robotraconteur.actuator.ActuatorInfo")]
public class ActuatorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public ActuatorTypeCode actuator_type;
    public List<com.robotraconteur.units.SIUnit> command_units;
    public com.robotraconteur.datatype.DataType command_data_type;
    public double[] command_resolution;
    public bool analog_output;
    public Dictionary<string,com.robotraconteur.param.ParameterInfo> parameter_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.actuator.Actuator")]
public interface Actuator
{
    Task<ActuatorInfo> get_actuator_info(CancellationToken cancel=default(CancellationToken));
    Task set_actuator_info(ActuatorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<ActuatorMode> get_actuator_mode(CancellationToken cancel=default(CancellationToken));
    Task set_actuator_mode(ActuatorMode value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Wire<double[]> actuator_command { get; set; }
}

public static class com__robotraconteur__actuatorConstants  {
}
    public enum ActuatorTypeCode
    {
    unknown = 0,
    generic = 1,
    motor_torque = 2,
    motor_force = 3,
    motor_velocity = 4,
    solenoid = 5,
    voice_coil = 6,
    piezoelectric = 7,
    pneumatic_pressure = 8,
    vacuum_pressure = 9,
    heater_power = 10,
    chiller_power = 11,
    valve = 12
    };
    public enum ActuatorMode
    {
    error = -2,
    disabled = -1,
    halt = 0,
    reduced_performance = 1,
    normal = 2
    };
}

namespace com.robotraconteur.actuator
{
public class com__robotraconteur__actuatorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.actuator\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.units\nimport com.robotraconteur.datatype\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.datatype.DataType\n\nenum ActuatorTypeCode\nunknown = 0,\ngeneric,\nmotor_torque,\nmotor_force,\nmotor_velocity,\nsolenoid,\nvoice_coil,\npiezoelectric,\npneumatic_pressure,\nvacuum_pressure,\nheater_power,\nchiller_power,\nvalve\nend\n\nenum ActuatorMode\nerror = -2,\ndisabled = -1,\nhalt = 0,\nreduced_performance = 1,\nnormal = 2\nend\n\nstruct ActuatorInfo\nfield DeviceInfo device_info\nfield ActuatorTypeCode actuator_type\nfield SIUnit{list} command_units\nfield DataType command_data_type\nfield double[] command_resolution\nfield bool analog_output\nfield ParameterInfo{string} parameter_info\nfield varvalue{string} extended\nend\n\nobject Actuator\nproperty ActuatorInfo actuator_info [readonly,nolock]\nproperty ActuatorMode actuator_mode [nolockread]\nwire double[] actuator_command [writeonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.actuator";}
    public ActuatorInfo_stub ActuatorInfo_stubentry;
    public com__robotraconteur__actuatorFactory() : this(null,null) {}
    public com__robotraconteur__actuatorFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ActuatorInfo_stubentry=new ActuatorInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ActuatorInfo")
    return ActuatorInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Actuator":
    return new Actuator_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Actuator":
    return new Actuator_skel(path,(Actuator)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ActuatorInfo_stub : IStructureStub {
    public ActuatorInfo_stub(com__robotraconteur__actuatorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__actuatorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ActuatorInfo s = (ActuatorInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ActuatorTypeCode>("actuator_type",s.actuator_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>(rr_node, rr_context, "command_units",s.command_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "command_data_type",s.command_data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("command_resolution",s.command_resolution));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("analog_output",s.analog_output));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.actuator.ActuatorInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ActuatorInfo s=new ActuatorInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.actuator_type =MessageElementUtil.UnpackEnum<ActuatorTypeCode>(MessageElement.FindElement(m.Elements,"actuator_type"));
    s.command_units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"command_units"));
    s.command_data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"command_data_type"));
    s.command_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"command_resolution"));
    s.analog_output =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"analog_output")));
    s.parameter_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Actuator_stub : ServiceStub , Actuator {
    private Wire<double[]> rr_actuator_command;
    public Actuator_stub(string path, ClientContext c) : base(path, c) {
    rr_actuator_command=new WireClient<double[]>("actuator_command", this);
    }
    public async Task<ActuatorInfo> get_actuator_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "actuator_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<ActuatorInfo>(rr_node, rr_context, me);
        }
    public async Task set_actuator_info(ActuatorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"actuator_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ActuatorMode> get_actuator_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "actuator_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<ActuatorMode>(me);
        }
    public async Task set_actuator_mode(ActuatorMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"actuator_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ActuatorMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<double[]> actuator_command {
    get { return rr_actuator_command;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "actuator_command":
    this.rr_actuator_command.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Actuator_skel : ServiceSkel {
    protected Actuator obj;
    public Actuator_skel(string p,Actuator o,ServerContext c) : base(p,o,c) { obj=(Actuator)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "actuator_info":
    {
    ActuatorInfo ret=await obj.get_actuator_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "actuator_mode":
    {
    ActuatorMode ret=await obj.get_actuator_mode();
    mr.AddElement(MessageElementUtil.PackEnum<ActuatorMode>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "actuator_info":
    {
    await obj.set_actuator_info(MessageElementUtil.UnpackStructure<ActuatorInfo>(rr_node, rr_context, me));
    break;
    }
    case "actuator_mode":
    {
    await obj.set_actuator_mode(MessageElementUtil.UnpackEnum<ActuatorMode>(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<double[]> rr_actuator_command;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Actuator castobj=(Actuator)o;
    this.rr_actuator_command=new WireServer<double[]>("actuator_command",this);
    castobj.actuator_command=this.rr_actuator_command;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "actuator_command":
    return await this.rr_actuator_command.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "actuator_command":
    this.rr_actuator_command.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "actuator_info") return true;
    if (m.MemberName == "actuator_mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    return false;
    }
}
public class Actuator_default_impl : Actuator{
    protected WireUnicastReceiver<double[]> rrvar_actuator_command;
    public virtual Task<ActuatorInfo> get_actuator_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_actuator_info(ActuatorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ActuatorMode> get_actuator_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_actuator_mode(ActuatorMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<double[]> actuator_command {
    get { return rrvar_actuator_command.Wire;  }
    set {
    if (rrvar_actuator_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_actuator_command= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.bignum
{
[RobotRaconteurServiceStruct("com.robotraconteur.bignum.BigNum")]
public class BigNum
{
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.bignum.UnsignedBigNum")]
public class UnsignedBigNum
{
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.bignum.BigFloat")]
public class BigFloat
{
    public BigNum num;
    public BigNum den;
    public BigNum radix;
}

}

namespace com.robotraconteur.bignum
{
public class com__robotraconteur__bignumFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.bignum\n\nstdver 0.9\n\n# Signed arbritary precisison number, little endian\nstruct BigNum\nfield uint8[] data\nend\n\n# Unsigned arbritary precisison number, little endian\nstruct UnsignedBigNum\nfield uint8[] data\nend\n\n# Arbitrary precision floating point number\nstruct BigFloat\nfield BigNum num\nfield BigNum den\nfield BigNum radix\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.bignum";}
    public BigNum_stub BigNum_stubentry;
    public UnsignedBigNum_stub UnsignedBigNum_stubentry;
    public BigFloat_stub BigFloat_stubentry;
    public com__robotraconteur__bignumFactory() : this(null,null) {}
    public com__robotraconteur__bignumFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    BigNum_stubentry=new BigNum_stub(this,this.node,this.context);
    UnsignedBigNum_stubentry=new UnsignedBigNum_stub(this,this.node,this.context);
    BigFloat_stubentry=new BigFloat_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="BigNum")
    return BigNum_stubentry;
    if (objecttype=="UnsignedBigNum")
    return UnsignedBigNum_stubentry;
    if (objecttype=="BigFloat")
    return BigFloat_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class BigNum_stub : IStructureStub {
    public BigNum_stub(com__robotraconteur__bignumFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__bignumFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    BigNum s = (BigNum)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.bignum.BigNum",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    BigNum s=new BigNum();
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class UnsignedBigNum_stub : IStructureStub {
    public UnsignedBigNum_stub(com__robotraconteur__bignumFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__bignumFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    UnsignedBigNum s = (UnsignedBigNum)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.bignum.UnsignedBigNum",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    UnsignedBigNum s=new UnsignedBigNum();
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class BigFloat_stub : IStructureStub {
    public BigFloat_stub(com__robotraconteur__bignumFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__bignumFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    BigFloat s = (BigFloat)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "num",s.num));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "den",s.den));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "radix",s.radix));
    return new MessageElementStructure("com.robotraconteur.bignum.BigFloat",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    BigFloat s=new BigFloat();
    s.num =MessageElementUtil.UnpackStructure<BigNum>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"num"));
    s.den =MessageElementUtil.UnpackStructure<BigNum>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"den"));
    s.radix =MessageElementUtil.UnpackStructure<BigNum>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"radix"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.color
{
[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.color.ColorRGBA",typeof(double), 4)]
public struct ColorRGBA
{
    public double r;
    public double g;
    public double b;
    public double a;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.color.ColorRGBAf",typeof(float), 4)]
public struct ColorRGBAf
{
    public float r;
    public float g;
    public float b;
    public float a;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.color.ColorRGBAu",typeof(byte), 4)]
public struct ColorRGBAu
{
    public byte r;
    public byte g;
    public byte b;
    public byte a;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.color.ColorRGBAh",typeof(ushort), 4)]
public struct ColorRGBAh
{
    public ushort r;
    public ushort g;
    public ushort b;
    public ushort a;
    public ushort[] GetNumericArray()
    {
    var a=new ArraySegment<ushort>(new ushort[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<ushort> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<ushort> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    this.a = a.Array[a.Offset + 3];
    }
}

}

namespace com.robotraconteur.color
{
public class com__robotraconteur__colorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.color\n\nstdver 0.9\n\nnamedarray ColorRGBA\nfield double r\nfield double g\nfield double b\nfield double a\nend\n\nnamedarray ColorRGBAf\nfield single r\nfield single g\nfield single b\nfield single a\nend\n\nnamedarray ColorRGBAu\nfield uint8 r\nfield uint8 g\nfield uint8 b\nfield uint8 a\nend\n\nnamedarray ColorRGBAh\nfield uint16 r\nfield uint16 g\nfield uint16 b\nfield uint16 a\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.color";}
    public ColorRGBA_stub ColorRGBA_stubentry;
    public ColorRGBAf_stub ColorRGBAf_stubentry;
    public ColorRGBAu_stub ColorRGBAu_stubentry;
    public ColorRGBAh_stub ColorRGBAh_stubentry;
    public com__robotraconteur__colorFactory() : this(null,null) {}
    public com__robotraconteur__colorFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ColorRGBA_stubentry=new ColorRGBA_stub();
    ColorRGBAf_stubentry=new ColorRGBAf_stub();
    ColorRGBAu_stubentry=new ColorRGBAu_stub();
    ColorRGBAh_stubentry=new ColorRGBAh_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="ColorRGBA")
    return ColorRGBA_stubentry;
    if (objecttype=="ColorRGBAf")
    return ColorRGBAf_stubentry;
    if (objecttype=="ColorRGBAu")
    return ColorRGBAu_stubentry;
    if (objecttype=="ColorRGBAh")
    return ColorRGBAh_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ColorRGBA_stub : NamedArrayStub<ColorRGBA,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBA s) {
    return s.GetNumericArray();
    }
    public override ColorRGBA GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBA();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(ColorRGBA[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBA[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBA[] s = new ColorRGBA[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBA"; } }
}

public class ColorRGBAf_stub : NamedArrayStub<ColorRGBAf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAf s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(ColorRGBAf[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAf[] s = new ColorRGBAf[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAf"; } }
}

public class ColorRGBAu_stub : NamedArrayStub<ColorRGBAu,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAu s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAu GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAu();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(ColorRGBAu[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAu[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAu[] s = new ColorRGBAu[m.Length / 4];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAu"; } }
}

public class ColorRGBAh_stub : NamedArrayStub<ColorRGBAh,ushort> {
    public override ushort[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAh s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAh GetNamedArrayStructFromNumericArray(ushort[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAh();
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override ushort[] GetNumericArrayFromNamedArray(ColorRGBAh[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAh[] GetNamedArrayFromNumericArray(ushort[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAh[] s = new ColorRGBAh[m.Length / 4];
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAh"; } }
}

public static class RRExtensions
{
    public static double[] GetNumericArray(this ColorRGBA[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBA[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBA[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this ColorRGBAf[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this ColorRGBAu[] s)
    {
    var a=new ArraySegment<byte>(new byte[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static ushort[] GetNumericArray(this ColorRGBAh[] s)
    {
    var a=new ArraySegment<ushort>(new ushort[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.datatype
{
[RobotRaconteurServiceStruct("com.robotraconteur.datatype.DataType")]
public class DataType
{
    public string name;
    public DataTypeCode type_code;
    public string type_string;
    public ArrayTypeCode array_type_code;
    public bool array_var_len;
    public uint[] array_len;
    public ContainerTypeCode container_type_code;
}

public static class com__robotraconteur__datatypeConstants  {
}
    public enum DataTypeCode
    {
    void_c = 0,
    double_c = 1,
    single_c = 2,
    int8_c = 3,
    uint8_c = 4,
    int16_c = 5,
    uint16_c = 6,
    int32_c = 7,
    uint32_c = 8,
    int64_c = 9,
    uint64_c = 10,
    string_c = 11,
    cdouble_c = 12,
    csingle_c = 13,
    bool_c = 14,
    structure_c = 101,
    vector_c = 102,
    dictionary_c = 103,
    object_c = 104,
    varvalue_c = 105,
    varobject_c = 106,
    list_c = 108,
    pod_c = 109,
    pod_array_c = 110,
    pod_multidimarray_c = 111,
    enum_c = 112,
    namedtype_c = 113,
    namedarray_c = 114,
    namedarray_array_c = 115,
    namedarray_multidimarray_c = 116,
    multidimarray_c = 117
    };
    public enum ArrayTypeCode
    {
    none_c = 0,
    array_c = 1,
    multidimarray_c = 2
    };
    public enum ContainerTypeCode
    {
    none_c = 0,
    list_c = 1,
    map_int32_c = 2,
    map_string_c = 3,
    generator_c = 4
    };
}

namespace com.robotraconteur.datatype
{
public class com__robotraconteur__datatypeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datatype\n\nstdver 0.9\n\nenum DataTypeCode\nvoid_c = 0,\ndouble_c,\nsingle_c,\nint8_c,\nuint8_c,\nint16_c,\nuint16_c,\nint32_c,\nuint32_c,\nint64_c,\nuint64_c,\nstring_c,\ncdouble_c,\ncsingle_c,\nbool_c,\nstructure_c = 101,\nvector_c,\ndictionary_c,\nobject_c,\nvarvalue_c,\nvarobject_c,\nlist_c = 108,\npod_c,\npod_array_c,\npod_multidimarray_c,\nenum_c,\nnamedtype_c,\nnamedarray_c,\nnamedarray_array_c,\nnamedarray_multidimarray_c,\nmultidimarray_c\nend\n\nenum ArrayTypeCode\nnone_c = 0,\narray_c,\nmultidimarray_c\nend\n\nenum ContainerTypeCode\nnone_c = 0,\nlist_c,\nmap_int32_c,\nmap_string_c,\ngenerator_c\nend\n\nstruct DataType\nfield string name\nfield DataTypeCode type_code\nfield string type_string\nfield ArrayTypeCode array_type_code\nfield bool array_var_len\nfield uint32[] array_len\nfield ContainerTypeCode container_type_code\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datatype";}
    public DataType_stub DataType_stubentry;
    public com__robotraconteur__datatypeFactory() : this(null,null) {}
    public com__robotraconteur__datatypeFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DataType_stubentry=new DataType_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DataType")
    return DataType_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DataType_stub : IStructureStub {
    public DataType_stub(com__robotraconteur__datatypeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datatypeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DataType s = (DataType)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<DataTypeCode>("type_code",s.type_code));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("type_string",s.type_string));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ArrayTypeCode>("array_type_code",s.array_type_code));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("array_var_len",s.array_var_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("array_len",s.array_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ContainerTypeCode>("container_type_code",s.container_type_code));
    return new MessageElementStructure("com.robotraconteur.datatype.DataType",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DataType s=new DataType();
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"name"));
    s.type_code =MessageElementUtil.UnpackEnum<DataTypeCode>(MessageElement.FindElement(m.Elements,"type_code"));
    s.type_string =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"type_string"));
    s.array_type_code =MessageElementUtil.UnpackEnum<ArrayTypeCode>(MessageElement.FindElement(m.Elements,"array_type_code"));
    s.array_var_len =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"array_var_len")));
    s.array_len =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"array_len"));
    s.container_type_code =MessageElementUtil.UnpackEnum<ContainerTypeCode>(MessageElement.FindElement(m.Elements,"container_type_code"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.datetime
{
[RobotRaconteurServiceStruct("com.robotraconteur.datetime.DateTimeLocal")]
public class DateTimeLocal
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
    public int utc_offset_seconds;
    public string timezone_name;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.ClockInfo")]
public struct ClockInfo
{
    public int clock_type;
    public com.robotraconteur.uuid.UUID clock_uuid;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.DateTimeUTC")]
public struct DateTimeUTC
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.Duration")]
public struct Duration
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

public static class com__robotraconteur__datetimeConstants  {
    public const string EPOCH_ISO8601="1970-01-01T00:00:00Z";
}
    public enum ClockTypeCode
    {
    unknown = 0,
    default_ = 1,
    system_rtc_clock = 2,
    system_ntp_clock = 3,
    system_ptp_clock = 4,
    system_other_clock = 5,
    sim_clock_realtime = 6,
    sim_clock_scaled = 7,
    aux_0 = 0x1000,
    aux_1 = 0x1001,
    aux_2 = 0x1002,
    aux_3 = 0x1003,
    aux_4 = 0x1004,
    aux_5 = 0x1005,
    aux_6 = 0x1006,
    aux_7 = 0x1007
    };
}

namespace com.robotraconteur.datetime
{
public class com__robotraconteur__datetimeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datetime\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\nusing com.robotraconteur.uuid.UUID\n\nconstant string EPOCH_ISO8601 \"1970-01-01T00:00:00Z\"\n\nenum ClockTypeCode\nunknown = 0,\ndefault,\nsystem_rtc_clock,\nsystem_ntp_clock,\nsystem_ptp_clock,\nsystem_other_clock,\nsim_clock_realtime,\nsim_clock_scaled,\naux_0 = 0x1000,\naux_1,\naux_2,\naux_3,\naux_4,\naux_5,\naux_6,\naux_7\nend\n\npod ClockInfo\nfield int32 clock_type\nfield UUID clock_uuid\nend\n\npod DateTimeUTC\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\nstruct DateTimeLocal\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nfield int32 utc_offset_seconds\nfield string timezone_name\nend\n\npod Duration\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datetime";}
    public DateTimeLocal_stub DateTimeLocal_stubentry;
    public ClockInfo_stub ClockInfo_stubentry;
    public DateTimeUTC_stub DateTimeUTC_stubentry;
    public Duration_stub Duration_stubentry;
    public com__robotraconteur__datetimeFactory() : this(null,null) {}
    public com__robotraconteur__datetimeFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DateTimeLocal_stubentry=new DateTimeLocal_stub(this,this.node,this.context);
    ClockInfo_stubentry=new ClockInfo_stub(this,this.node,this.context);
    DateTimeUTC_stubentry=new DateTimeUTC_stub(this,this.node,this.context);
    Duration_stubentry=new Duration_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DateTimeLocal")
    return DateTimeLocal_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="ClockInfo")
    return ClockInfo_stubentry;
    if (objecttype=="DateTimeUTC")
    return DateTimeUTC_stubentry;
    if (objecttype=="Duration")
    return Duration_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DateTimeLocal_stub : IStructureStub {
    public DateTimeLocal_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DateTimeLocal s = (DateTimeLocal)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("utc_offset_seconds",s.utc_offset_seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("timezone_name",s.timezone_name));
    return new MessageElementStructure("com.robotraconteur.datetime.DateTimeLocal",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DateTimeLocal s=new DateTimeLocal();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    s.utc_offset_seconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"utc_offset_seconds")));
    s.timezone_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"timezone_name"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ClockInfo_stub : PodStub<ClockInfo> {
    public ClockInfo_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref ClockInfo s1) {
    List<MessageElement> m=new List<MessageElement>();
    ClockInfo s = (ClockInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("clock_type",s.clock_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, "clock_uuid",ref s.clock_uuid));
    return new MessageElementPod(m);
    }
    public override ClockInfo UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    ClockInfo s = new ClockInfo();
    s.clock_type =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"clock_type")));
    s.clock_uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_uuid"));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.ClockInfo"; } }
}

public class DateTimeUTC_stub : PodStub<DateTimeUTC> {
    public DateTimeUTC_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref DateTimeUTC s1) {
    List<MessageElement> m=new List<MessageElement>();
    DateTimeUTC s = (DateTimeUTC)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementPod(m);
    }
    public override DateTimeUTC UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    DateTimeUTC s = new DateTimeUTC();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.DateTimeUTC"; } }
}

public class Duration_stub : PodStub<Duration> {
    public Duration_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref Duration s1) {
    List<MessageElement> m=new List<MessageElement>();
    Duration s = (Duration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementPod(m);
    }
    public override Duration UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    Duration s = new Duration();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.Duration"; } }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.datetime.clock
{
[RobotRaconteurServiceStruct("com.robotraconteur.datetime.clock.ClockDeviceInfo")]
public class ClockDeviceInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.datetime.ClockTypeCode clock_type;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.datetime.clock.Clock")]
public interface Clock
{
    Task<ClockDeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(ClockDeviceInfo value, CancellationToken cancel=default(CancellationToken));
    Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc { get; set; }
    Wire<com.robotraconteur.datetime.DateTimeLocal> time_local { get; set; }
}

}

namespace com.robotraconteur.datetime.clock
{
public class com__robotraconteur__datetime__clockFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datetime.clock\n\nstdver 0.9\n\nimport com.robotraconteur.datetime\nimport com.robotraconteur.device\n\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.datetime.DateTimeLocal\nusing com.robotraconteur.datetime.ClockTypeCode\nusing com.robotraconteur.device.DeviceInfo\n\nstruct ClockDeviceInfo\nfield DeviceInfo device_info\nfield ClockTypeCode clock_type\nend\n\nobject Clock\nproperty ClockDeviceInfo device_info [readonly,nolock]\nwire DateTimeUTC time_utc [readonly]\nwire DateTimeLocal time_local [readonly]\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datetime.clock";}
    public ClockDeviceInfo_stub ClockDeviceInfo_stubentry;
    public com__robotraconteur__datetime__clockFactory() : this(null,null) {}
    public com__robotraconteur__datetime__clockFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ClockDeviceInfo_stubentry=new ClockDeviceInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ClockDeviceInfo")
    return ClockDeviceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Clock":
    return new Clock_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Clock":
    return new Clock_skel(path,(Clock)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ClockDeviceInfo_stub : IStructureStub {
    public ClockDeviceInfo_stub(com__robotraconteur__datetime__clockFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetime__clockFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ClockDeviceInfo s = (ClockDeviceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<com.robotraconteur.datetime.ClockTypeCode>("clock_type",s.clock_type));
    return new MessageElementStructure("com.robotraconteur.datetime.clock.ClockDeviceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ClockDeviceInfo s=new ClockDeviceInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.clock_type =MessageElementUtil.UnpackEnum<com.robotraconteur.datetime.ClockTypeCode>(MessageElement.FindElement(m.Elements,"clock_type"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Clock_stub : ServiceStub , Clock {
    private Wire<com.robotraconteur.datetime.DateTimeUTC> rr_time_utc;
    private Wire<com.robotraconteur.datetime.DateTimeLocal> rr_time_local;
    public Clock_stub(string path, ClientContext c) : base(path, c) {
    rr_time_utc=new WireClient<com.robotraconteur.datetime.DateTimeUTC>("time_utc", this);
    rr_time_local=new WireClient<com.robotraconteur.datetime.DateTimeLocal>("time_local", this);
    }
    public async Task<ClockDeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<ClockDeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(ClockDeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc {
    get { return rr_time_utc;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.datetime.DateTimeLocal> time_local {
    get { return rr_time_local;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "time_utc":
    this.rr_time_utc.WirePacketReceived(m);
    break;
    case "time_local":
    this.rr_time_local.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Clock_skel : ServiceSkel {
    protected Clock obj;
    public Clock_skel(string p,Clock o,ServerContext c) : base(p,o,c) { obj=(Clock)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    ClockDeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<ClockDeviceInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<com.robotraconteur.datetime.DateTimeUTC> rr_time_utc;
    private WireServer<com.robotraconteur.datetime.DateTimeLocal> rr_time_local;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Clock castobj=(Clock)o;
    this.rr_time_utc=new WireServer<com.robotraconteur.datetime.DateTimeUTC>("time_utc",this);
    this.rr_time_local=new WireServer<com.robotraconteur.datetime.DateTimeLocal>("time_local",this);
    castobj.time_utc=this.rr_time_utc;
    castobj.time_local=this.rr_time_local;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "time_utc":
    return await this.rr_time_utc.WireCommand(m,e);
    case "time_local":
    return await this.rr_time_local.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "time_utc":
    this.rr_time_utc.WirePacketReceived(m,e);
    break;
    case "time_local":
    this.rr_time_local.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    return false;
    }
}
public class Clock_default_impl : Clock{
    protected WireBroadcaster<com.robotraconteur.datetime.DateTimeUTC> rrvar_time_utc;
    protected WireBroadcaster<com.robotraconteur.datetime.DateTimeLocal> rrvar_time_local;
    public virtual Task<ClockDeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(ClockDeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc {
    get { return rrvar_time_utc.Wire;  }
    set {
    if (rrvar_time_utc!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time_utc= new WireBroadcaster<com.robotraconteur.datetime.DateTimeUTC>(value);
    }
    }
    public virtual Wire<com.robotraconteur.datetime.DateTimeLocal> time_local {
    get { return rrvar_time_local.Wire;  }
    set {
    if (rrvar_time_local!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time_local= new WireBroadcaster<com.robotraconteur.datetime.DateTimeLocal>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.device
{
[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceOption")]
public class DeviceOption
{
    public com.robotraconteur.identifier.Identifier option_identifier;
    public List<DeviceSubOption> suboptions;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceSubOption")]
public class DeviceSubOption
{
    public string suboption_name;
    public double suboption_level;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceCapability")]
public class DeviceCapability
{
    public com.robotraconteur.identifier.Identifier capability_identifier;
    public List<DeviceSubCapability> subcapabilities;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceSubCapability")]
public class DeviceSubCapability
{
    public string subcapability_name;
    public double subcapability_level;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceClass")]
public class DeviceClass
{
    public com.robotraconteur.identifier.Identifier class_identifier;
    public List<string> subclasses;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceInfo")]
public class DeviceInfo
{
    public com.robotraconteur.identifier.Identifier device;
    public com.robotraconteur.identifier.Identifier parent_device;
    public com.robotraconteur.identifier.Identifier manufacturer;
    public com.robotraconteur.identifier.Identifier model;
    public List<DeviceOption> options;
    public List<DeviceCapability> capabilities;
    public string serial_number;
    public List<DeviceClass> device_classes;
    public string user_description;
    public com.robotraconteur.resource.ResourceIdentifier description_resource;
    public List<string> implemented_types;
    public com.robotraconteur.geometry.NamedPose device_origin_pose;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.device.BillboardDevice")]
public interface BillboardDevice
{
    Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken));
}

}

namespace com.robotraconteur.device
{
public class com__robotraconteur__deviceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.device\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\nusing com.robotraconteur.geometry.NamedPose\n\nstruct DeviceOption\nfield Identifier option_identifier\nfield DeviceSubOption{list} suboptions\nend\n\nstruct DeviceSubOption\nfield string suboption_name\nfield double suboption_level\nfield varvalue{string} extended\nend\n\nstruct DeviceCapability\nfield Identifier capability_identifier\nfield DeviceSubCapability{list} subcapabilities\nend\n\nstruct DeviceSubCapability\nfield string subcapability_name\nfield double subcapability_level\nfield varvalue{string} extended\nend\n\nstruct DeviceClass\nfield Identifier class_identifier\nfield string{list} subclasses\nend\n\nstruct DeviceInfo\nfield Identifier device\nfield Identifier parent_device\nfield Identifier manufacturer\nfield Identifier model\nfield DeviceOption{list} options\nfield DeviceCapability{list} capabilities\nfield string serial_number\nfield DeviceClass{list} device_classes\nfield string user_description\nfield ResourceIdentifier description_resource\nfield string{list} implemented_types\nfield NamedPose device_origin_pose\nfield varvalue{string} extended\nend\n\nobject BillboardDevice\nproperty DeviceInfo device_info [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.device";}
    public DeviceOption_stub DeviceOption_stubentry;
    public DeviceSubOption_stub DeviceSubOption_stubentry;
    public DeviceCapability_stub DeviceCapability_stubentry;
    public DeviceSubCapability_stub DeviceSubCapability_stubentry;
    public DeviceClass_stub DeviceClass_stubentry;
    public DeviceInfo_stub DeviceInfo_stubentry;
    public com__robotraconteur__deviceFactory() : this(null,null) {}
    public com__robotraconteur__deviceFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DeviceOption_stubentry=new DeviceOption_stub(this,this.node,this.context);
    DeviceSubOption_stubentry=new DeviceSubOption_stub(this,this.node,this.context);
    DeviceCapability_stubentry=new DeviceCapability_stub(this,this.node,this.context);
    DeviceSubCapability_stubentry=new DeviceSubCapability_stub(this,this.node,this.context);
    DeviceClass_stubentry=new DeviceClass_stub(this,this.node,this.context);
    DeviceInfo_stubentry=new DeviceInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DeviceOption")
    return DeviceOption_stubentry;
    if (objecttype=="DeviceSubOption")
    return DeviceSubOption_stubentry;
    if (objecttype=="DeviceCapability")
    return DeviceCapability_stubentry;
    if (objecttype=="DeviceSubCapability")
    return DeviceSubCapability_stubentry;
    if (objecttype=="DeviceClass")
    return DeviceClass_stubentry;
    if (objecttype=="DeviceInfo")
    return DeviceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "BillboardDevice":
    return new BillboardDevice_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "BillboardDevice":
    return new BillboardDevice_skel(path,(BillboardDevice)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DeviceOption_stub : IStructureStub {
    public DeviceOption_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceOption s = (DeviceOption)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "option_identifier",s.option_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceSubOption>(rr_node, rr_context, "suboptions",s.suboptions));
    return new MessageElementStructure("com.robotraconteur.device.DeviceOption",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceOption s=new DeviceOption();
    s.option_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"option_identifier"));
    s.suboptions =MessageElementUtil.UnpackList<DeviceSubOption>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"suboptions"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceSubOption_stub : IStructureStub {
    public DeviceSubOption_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceSubOption s = (DeviceSubOption)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("suboption_name",s.suboption_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("suboption_level",s.suboption_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceSubOption",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceSubOption s=new DeviceSubOption();
    s.suboption_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"suboption_name"));
    s.suboption_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"suboption_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceCapability_stub : IStructureStub {
    public DeviceCapability_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceCapability s = (DeviceCapability)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "capability_identifier",s.capability_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceSubCapability>(rr_node, rr_context, "subcapabilities",s.subcapabilities));
    return new MessageElementStructure("com.robotraconteur.device.DeviceCapability",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceCapability s=new DeviceCapability();
    s.capability_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"capability_identifier"));
    s.subcapabilities =MessageElementUtil.UnpackList<DeviceSubCapability>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"subcapabilities"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceSubCapability_stub : IStructureStub {
    public DeviceSubCapability_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceSubCapability s = (DeviceSubCapability)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("subcapability_name",s.subcapability_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("subcapability_level",s.subcapability_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceSubCapability",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceSubCapability s=new DeviceSubCapability();
    s.subcapability_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"subcapability_name"));
    s.subcapability_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"subcapability_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceClass_stub : IStructureStub {
    public DeviceClass_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceClass s = (DeviceClass)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "class_identifier",s.class_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "subclasses",s.subclasses));
    return new MessageElementStructure("com.robotraconteur.device.DeviceClass",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceClass s=new DeviceClass();
    s.class_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"class_identifier"));
    s.subclasses =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"subclasses"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceInfo_stub : IStructureStub {
    public DeviceInfo_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceInfo s = (DeviceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device",s.device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_device",s.parent_device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "manufacturer",s.manufacturer));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "model",s.model));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceOption>(rr_node, rr_context, "options",s.options));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceCapability>(rr_node, rr_context, "capabilities",s.capabilities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("serial_number",s.serial_number));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceClass>(rr_node, rr_context, "device_classes",s.device_classes));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "description_resource",s.description_resource));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "implemented_types",s.implemented_types));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_origin_pose",s.device_origin_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceInfo s=new DeviceInfo();
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device"));
    s.parent_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_device"));
    s.manufacturer =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"manufacturer"));
    s.model =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"model"));
    s.options =MessageElementUtil.UnpackList<DeviceOption>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"options"));
    s.capabilities =MessageElementUtil.UnpackList<DeviceCapability>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"capabilities"));
    s.serial_number =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"serial_number"));
    s.device_classes =MessageElementUtil.UnpackList<DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_classes"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.description_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"description_resource"));
    s.implemented_types =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"implemented_types"));
    s.device_origin_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_origin_pose"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class BillboardDevice_stub : ServiceStub , BillboardDevice {
    public BillboardDevice_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<DeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class BillboardDevice_skel : ServiceSkel {
    protected BillboardDevice obj;
    public BillboardDevice_skel(string p,BillboardDevice o,ServerContext c) : base(p,o,c) { obj=(BillboardDevice)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    DeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<DeviceInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    BillboardDevice castobj=(BillboardDevice)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    return false;
    }
}
public class BillboardDevice_default_impl : BillboardDevice{
    public virtual Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.eventlog
{
[RobotRaconteurServiceStruct("com.robotraconteur.eventlog.EventLogType")]
public class EventLogType
{
    public com.robotraconteur.identifier.Identifier event_category;
    public string event_type;
}

[RobotRaconteurServiceStruct("com.robotraconteur.eventlog.EventLogMessageHeader")]
public class EventLogMessageHeader
{
    public EventLogType type;
    public EventLogLevel level;
    public com.robotraconteur.identifier.Identifier source_device;
    public string source_component;
    public ulong message_number;
    public com.robotraconteur.datetime.DateTimeUTC timestamp;
}

[RobotRaconteurServiceStruct("com.robotraconteur.eventlog.EventLogMessage")]
public class EventLogMessage
{
    public EventLogMessageHeader header;
    public string title;
    public string message;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.eventlog.EventLog")]
public interface EventLog
{
    Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken));
    Task<ulong> get_message_count(CancellationToken cancel=default(CancellationToken));
    Task set_message_count(ulong value, CancellationToken cancel=default(CancellationToken));
    Task<List<EventLogMessage>> getf_messages(ulong offset, ulong count,CancellationToken rr_cancel=default(CancellationToken));
    Task clear_messages(ulong offset, ulong count,CancellationToken rr_cancel=default(CancellationToken));
    Task clear_all_messages(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<EventLogMessage> message_stream{ get; set; }
}

public static class com__robotraconteur__eventlogConstants  {
}
    public enum EventLogLevel
    {
    undefined = 0,
    debug = 1,
    info = 2,
    warning = 3,
    recoverable_error = 4,
    safety_violation_error = 5,
    fatal_error = 6,
    emergency_error = 7,
    catastrophic_error = 8
    };
}

namespace com.robotraconteur.eventlog
{
public class com__robotraconteur__eventlogFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.eventlog\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datetime\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.device.DeviceInfo\n\nenum EventLogLevel\nundefined = 0,\ndebug = 1,\ninfo,\nwarning,\nrecoverable_error,\nsafety_violation_error,\nfatal_error,\nemergency_error,\ncatastrophic_error\nend\n\nstruct EventLogType\nfield Identifier event_category\nfield string event_type\nend\n\nstruct EventLogMessageHeader\nfield EventLogType type\nfield EventLogLevel level\nfield Identifier source_device\nfield string source_component\nfield uint64 message_number\nfield DateTimeUTC timestamp\nend\n\nstruct EventLogMessage\nfield EventLogMessageHeader header\nfield string title\nfield string message\nfield varvalue{string} extended\nend\n\nobject EventLog\nproperty DeviceInfo device_info [readonly,nolock]\nproperty uint64 message_count [readonly]\nfunction EventLogMessage{list} getf_messages(uint64 offset, uint64 count)\npipe EventLogMessage message_stream [readonly]\nfunction void clear_messages(uint64 offset, uint64 count)\nfunction void clear_all_messages()\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.eventlog";}
    public EventLogType_stub EventLogType_stubentry;
    public EventLogMessageHeader_stub EventLogMessageHeader_stubentry;
    public EventLogMessage_stub EventLogMessage_stubentry;
    public com__robotraconteur__eventlogFactory() : this(null,null) {}
    public com__robotraconteur__eventlogFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    EventLogType_stubentry=new EventLogType_stub(this,this.node,this.context);
    EventLogMessageHeader_stubentry=new EventLogMessageHeader_stub(this,this.node,this.context);
    EventLogMessage_stubentry=new EventLogMessage_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="EventLogType")
    return EventLogType_stubentry;
    if (objecttype=="EventLogMessageHeader")
    return EventLogMessageHeader_stubentry;
    if (objecttype=="EventLogMessage")
    return EventLogMessage_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "EventLog":
    return new EventLog_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "EventLog":
    return new EventLog_skel(path,(EventLog)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class EventLogType_stub : IStructureStub {
    public EventLogType_stub(com__robotraconteur__eventlogFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__eventlogFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    EventLogType s = (EventLogType)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "event_category",s.event_category));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("event_type",s.event_type));
    return new MessageElementStructure("com.robotraconteur.eventlog.EventLogType",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    EventLogType s=new EventLogType();
    s.event_category =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"event_category"));
    s.event_type =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"event_type"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class EventLogMessageHeader_stub : IStructureStub {
    public EventLogMessageHeader_stub(com__robotraconteur__eventlogFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__eventlogFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    EventLogMessageHeader s = (EventLogMessageHeader)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "type",s.type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<EventLogLevel>("level",s.level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "source_device",s.source_device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("source_component",s.source_component));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("message_number",s.message_number));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "timestamp",ref s.timestamp));
    return new MessageElementStructure("com.robotraconteur.eventlog.EventLogMessageHeader",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    EventLogMessageHeader s=new EventLogMessageHeader();
    s.type =MessageElementUtil.UnpackStructure<EventLogType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"type"));
    s.level =MessageElementUtil.UnpackEnum<EventLogLevel>(MessageElement.FindElement(m.Elements,"level"));
    s.source_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_device"));
    s.source_component =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"source_component"));
    s.message_number =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"message_number")));
    s.timestamp =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"timestamp"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class EventLogMessage_stub : IStructureStub {
    public EventLogMessage_stub(com__robotraconteur__eventlogFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__eventlogFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    EventLogMessage s = (EventLogMessage)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "header",s.header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("title",s.title));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("message",s.message));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.eventlog.EventLogMessage",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    EventLogMessage s=new EventLogMessage();
    s.header =MessageElementUtil.UnpackStructure<EventLogMessageHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"header"));
    s.title =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"title"));
    s.message =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"message"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class EventLog_stub : ServiceStub , EventLog {
    private Pipe<EventLogMessage> rr_message_stream;
    public EventLog_stub(string path, ClientContext c) : base(path, c) {
    rr_message_stream=new PipeClient<EventLogMessage>("message_stream", this);
    }
    public async Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ulong> get_message_count(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "message_count");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<ulong>(me));
        }
    public async Task set_message_count(ulong value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"message_count");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<EventLogMessage>> getf_messages(ulong offset, ulong count, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_messages");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<ulong>("offset",offset));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<ulong>("count",count));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackList<EventLogMessage>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task clear_messages(ulong offset, ulong count, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"clear_messages");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<ulong>("offset",offset));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<ulong>("count",count));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task clear_all_messages(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"clear_all_messages");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<EventLogMessage> message_stream {
    get { return rr_message_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "message_stream":
    this.rr_message_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class EventLog_skel : ServiceSkel {
    protected EventLog obj;
    public EventLog_skel(string p,EventLog o,ServerContext c) : base(p,o,c) { obj=(EventLog)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    com.robotraconteur.device.DeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "message_count":
    {
    ulong ret=await obj.get_message_count();
    mr.AddElement(MessageElementUtil.PackScalar<ulong>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me));
    break;
    }
    case "message_count":
    {
    await obj.set_message_count((MessageElementUtil.UnpackScalar<ulong>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_messages":
    {
    ulong offset=(MessageElementUtil.UnpackScalar<ulong>(MessageElementUtil.FindElement(rr_m,"offset")));
    ulong count=(MessageElementUtil.UnpackScalar<ulong>(MessageElementUtil.FindElement(rr_m,"count")));
    List<EventLogMessage> rr_ret=await this.obj.getf_messages(offset, count, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackListType<EventLogMessage>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "clear_messages":
    {
    ulong offset=(MessageElementUtil.UnpackScalar<ulong>(MessageElementUtil.FindElement(rr_m,"offset")));
    ulong count=(MessageElementUtil.UnpackScalar<ulong>(MessageElementUtil.FindElement(rr_m,"count")));
    await this.obj.clear_messages(offset, count, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "clear_all_messages":
    {
    await this.obj.clear_all_messages(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<EventLogMessage> rr_message_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    EventLog castobj=(EventLog)o;
    this.rr_message_stream=new PipeServer<EventLogMessage>("message_stream",this);
    castobj.message_stream=this.rr_message_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "message_stream":
    return await this.rr_message_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "message_stream":
    this.rr_message_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    return false;
    }
}
public class EventLog_default_impl : EventLog{
    protected PipeBroadcaster<EventLogMessage> rrvar_message_stream;
    public virtual Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ulong> get_message_count(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_message_count(ulong value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<EventLogMessage>> getf_messages(ulong offset, ulong count,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task clear_messages(ulong offset, ulong count,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task clear_all_messages(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<EventLogMessage> message_stream {
    get { return rrvar_message_stream.Pipe;  }
    set {
    if (rrvar_message_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_message_stream= new PipeBroadcaster<EventLogMessage>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.geometry
{
[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedTransform")]
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPose")]
public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.PoseWithCovariance")]
public class PoseWithCovariance
{
    public Pose pose;
    public MultiDimArray covariance;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPoseWithCovariance")]
public class NamedPoseWithCovariance
{
    public NamedPose pose;
    public MultiDimArray covariance;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPose2D")]
public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialVelocity")]
public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialAcceleration")]
public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration Acceleration;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedWrench")]
public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialInertia")]
public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector2",typeof(double), 2)]
public struct Vector2
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector3",typeof(double), 3)]
public struct Vector3
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector6",typeof(double), 6)]
public struct Vector6
{
    public double alpha;
    public double beta;
    public double gamma;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.alpha;
    a.Array[a.Offset + 1] = this.beta;
    a.Array[a.Offset + 2] = this.gamma;
    a.Array[a.Offset + 3] = this.x;
    a.Array[a.Offset + 4] = this.y;
    a.Array[a.Offset + 5] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    this.alpha = a.Array[a.Offset + 0];
    this.beta = a.Array[a.Offset + 1];
    this.gamma = a.Array[a.Offset + 2];
    this.x = a.Array[a.Offset + 3];
    this.y = a.Array[a.Offset + 4];
    this.z = a.Array[a.Offset + 5];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Point2D",typeof(double), 2)]
public struct Point2D
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Point",typeof(double), 3)]
public struct Point
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Size2D",typeof(double), 2)]
public struct Size2D
{
    public double width;
    public double height;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Size",typeof(double), 3)]
public struct Size
{
    public double width;
    public double height;
    public double depth;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    a.Array[a.Offset + 2] = this.depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    this.depth = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Rect",typeof(double), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 2);
    this.origin.GetNumericArray(ref a0);
    var a2 = new ArraySegment<double>(a.Array, a.Offset + 2, 2);
    this.size.GetNumericArray(ref a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 2);
    this.origin.AssignFromNumericArray(ref a0);
    var a2 = new ArraySegment<double>(a.Array, a.Offset + 2, 2);
    this.size.AssignFromNumericArray(ref a2);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Box",typeof(double), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.origin.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.size.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.origin.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.size.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Quaternion",typeof(double), 4)]
public struct Quaternion
{
    public double w;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.w;
    a.Array[a.Offset + 1] = this.x;
    a.Array[a.Offset + 2] = this.y;
    a.Array[a.Offset + 3] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.w = a.Array[a.Offset + 0];
    this.x = a.Array[a.Offset + 1];
    this.y = a.Array[a.Offset + 2];
    this.z = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Plane",typeof(double), 4)]
public struct Plane
{
    public Vector3 normal;
    public double a;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.normal.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.normal.AssignFromNumericArray(ref a0);
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Transform",typeof(double), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.rotation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.translation.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.rotation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.translation.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Pose",typeof(double), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.orientation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.position.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.orientation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.position.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Pose2D",typeof(double), 3)]
public struct Pose2D
{
    public double orientation;
    public Point2D position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.orientation;
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 2);
    this.position.GetNumericArray(ref a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.orientation = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 2);
    this.position.AssignFromNumericArray(ref a1);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialVelocity",typeof(double), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialAcceleration",typeof(double), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Wrench",typeof(double), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.torque.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.force.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.torque.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.force.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialInertia",typeof(double), 10)]
public struct SpatialInertia
{
    public double m;
    public Vector3 com;
    public double ixx;
    public double ixy;
    public double ixz;
    public double iyy;
    public double iyz;
    public double izz;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.m;
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 3);
    this.com.GetNumericArray(ref a1);
    a.Array[a.Offset + 4] = this.ixx;
    a.Array[a.Offset + 5] = this.ixy;
    a.Array[a.Offset + 6] = this.ixz;
    a.Array[a.Offset + 7] = this.iyy;
    a.Array[a.Offset + 8] = this.iyz;
    a.Array[a.Offset + 9] = this.izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    this.m = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 3);
    this.com.AssignFromNumericArray(ref a1);
    this.ixx = a.Array[a.Offset + 4];
    this.ixy = a.Array[a.Offset + 5];
    this.ixz = a.Array[a.Offset + 6];
    this.iyy = a.Array[a.Offset + 7];
    this.iyz = a.Array[a.Offset + 8];
    this.izz = a.Array[a.Offset + 9];
    }
}

}

namespace com.robotraconteur.geometry
{
public class com__robotraconteur__geometryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometry\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield double x\nfield double y\nend\n\nnamedarray Vector3\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Vector6\nfield double alpha\nfield double beta\nfield double gamma\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Point2D\nfield double x\nfield double y\nend\n\nnamedarray Point\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Size2D\nfield double width\nfield double height\nend\n\nnamedarray Size\nfield double width\nfield double height\nfield double depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Quaternion\nfield double w\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield double a\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nstruct PoseWithCovariance\nfield Pose pose\nfield double[6,6] covariance\nend\n\nstruct NamedPoseWithCovariance\nfield NamedPose pose\nfield double[6,6] covariance\nend\n\nnamedarray Pose2D\nfield double orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier frame\nfield SpatialAcceleration Acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield double m\nfield Vector3 com\nfield double ixx\nfield double ixy\nfield double ixz\nfield double iyy\nfield double iyz\nfield double izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometry";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public PoseWithCovariance_stub PoseWithCovariance_stubentry;
    public NamedPoseWithCovariance_stub NamedPoseWithCovariance_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Plane_stub Plane_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryFactory() : this(null,null) {}
    public com__robotraconteur__geometryFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    NamedTransform_stubentry=new NamedTransform_stub(this,this.node,this.context);
    NamedPose_stubentry=new NamedPose_stub(this,this.node,this.context);
    PoseWithCovariance_stubentry=new PoseWithCovariance_stub(this,this.node,this.context);
    NamedPoseWithCovariance_stubentry=new NamedPoseWithCovariance_stub(this,this.node,this.context);
    NamedPose2D_stubentry=new NamedPose2D_stub(this,this.node,this.context);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this,this.node,this.context);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this,this.node,this.context);
    NamedWrench_stubentry=new NamedWrench_stub(this,this.node,this.context);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this,this.node,this.context);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Plane_stubentry=new Plane_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")
    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")
    return NamedPose_stubentry;
    if (objecttype=="PoseWithCovariance")
    return PoseWithCovariance_stubentry;
    if (objecttype=="NamedPoseWithCovariance")
    return NamedPoseWithCovariance_stubentry;
    if (objecttype=="NamedPose2D")
    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")
    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")
    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")
    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")
    return NamedSpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")
    return Vector2_stubentry;
    if (objecttype=="Vector3")
    return Vector3_stubentry;
    if (objecttype=="Vector6")
    return Vector6_stubentry;
    if (objecttype=="Point2D")
    return Point2D_stubentry;
    if (objecttype=="Point")
    return Point_stubentry;
    if (objecttype=="Size2D")
    return Size2D_stubentry;
    if (objecttype=="Size")
    return Size_stubentry;
    if (objecttype=="Rect")
    return Rect_stubentry;
    if (objecttype=="Box")
    return Box_stubentry;
    if (objecttype=="Quaternion")
    return Quaternion_stubentry;
    if (objecttype=="Plane")
    return Plane_stubentry;
    if (objecttype=="Transform")
    return Transform_stubentry;
    if (objecttype=="Pose")
    return Pose_stubentry;
    if (objecttype=="Pose2D")
    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")
    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")
    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")
    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")
    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "child_frame",s.child_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Transform>(rr_node, rr_context, "transform",ref s.transform));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedTransform",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPose",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PoseWithCovariance_stub : IStructureStub {
    public PoseWithCovariance_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PoseWithCovariance s = (PoseWithCovariance)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6, 6})));
    return new MessageElementStructure("com.robotraconteur.geometry.PoseWithCovariance",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PoseWithCovariance s=new PoseWithCovariance();
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"covariance")),36,new uint[] {6, 6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPoseWithCovariance_stub : IStructureStub {
    public NamedPoseWithCovariance_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPoseWithCovariance s = (NamedPoseWithCovariance)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "pose",s.pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6, 6})));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPoseWithCovariance",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPoseWithCovariance s=new NamedPoseWithCovariance();
    s.pose =MessageElementUtil.UnpackStructure<NamedPose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"covariance")),36,new uint[] {6, 6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPose2D",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>(rr_node, rr_context, "velocity",ref s.velocity));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialVelocity",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>(rr_node, rr_context, "Acceleration",ref s.Acceleration));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialAcceleration",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.Acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"Acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Wrench>(rr_node, rr_context, "wrench",ref s.wrench));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedWrench",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialInertia",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector2"; } }
}

public class Vector3_stub : NamedArrayStub<Vector3,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector3"; } }
}

public class Vector6_stub : NamedArrayStub<Vector6,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector6"; } }
}

public class Point2D_stub : NamedArrayStub<Point2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point2D"; } }
}

public class Point_stub : NamedArrayStub<Point,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point"; } }
}

public class Size2D_stub : NamedArrayStub<Size2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size2D"; } }
}

public class Size_stub : NamedArrayStub<Size,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size"; } }
}

public class Rect_stub : NamedArrayStub<Rect,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Rect"; } }
}

public class Box_stub : NamedArrayStub<Box,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Box"; } }
}

public class Quaternion_stub : NamedArrayStub<Quaternion,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Quaternion"; } }
}

public class Plane_stub : NamedArrayStub<Plane,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Plane"; } }
}

public class Transform_stub : NamedArrayStub<Transform,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Transform"; } }
}

public class Pose_stub : NamedArrayStub<Pose,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose"; } }
}

public class Pose2D_stub : NamedArrayStub<Pose2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose2D"; } }
}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialVelocity"; } }
}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialAcceleration"; } }
}

public class Wrench_stub : NamedArrayStub<Wrench,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Wrench"; } }
}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialInertia"; } }
}

public static class RRExtensions
{
    public static double[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<double>(new double[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.geometryf
{
[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedTransform")]
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedPose")]
public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedPose2D")]
public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedSpatialVelocity")]
public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedSpatialAcceleration")]
public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration Acceleration;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedWrench")]
public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryf.NamedSpatialInertia")]
public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Vector2",typeof(float), 2)]
public struct Vector2
{
    public float x;
    public float y;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Vector3",typeof(float), 3)]
public struct Vector3
{
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Vector6",typeof(float), 6)]
public struct Vector6
{
    public float alpha;
    public float beta;
    public float gamma;
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.alpha;
    a.Array[a.Offset + 1] = this.beta;
    a.Array[a.Offset + 2] = this.gamma;
    a.Array[a.Offset + 3] = this.x;
    a.Array[a.Offset + 4] = this.y;
    a.Array[a.Offset + 5] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    this.alpha = a.Array[a.Offset + 0];
    this.beta = a.Array[a.Offset + 1];
    this.gamma = a.Array[a.Offset + 2];
    this.x = a.Array[a.Offset + 3];
    this.y = a.Array[a.Offset + 4];
    this.z = a.Array[a.Offset + 5];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Point2D",typeof(float), 2)]
public struct Point2D
{
    public float x;
    public float y;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Point",typeof(float), 3)]
public struct Point
{
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Size2D",typeof(float), 2)]
public struct Size2D
{
    public float width;
    public float height;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Size",typeof(float), 3)]
public struct Size
{
    public float width;
    public float height;
    public float depth;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    a.Array[a.Offset + 2] = this.depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    this.depth = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Rect",typeof(float), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 2);
    this.origin.GetNumericArray(ref a0);
    var a2 = new ArraySegment<float>(a.Array, a.Offset + 2, 2);
    this.size.GetNumericArray(ref a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 2);
    this.origin.AssignFromNumericArray(ref a0);
    var a2 = new ArraySegment<float>(a.Array, a.Offset + 2, 2);
    this.size.AssignFromNumericArray(ref a2);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Box",typeof(float), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.origin.GetNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.size.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.origin.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.size.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Plane",typeof(float), 4)]
public struct Plane
{
    public Vector3 normal;
    public float d;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.normal.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.d;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.normal.AssignFromNumericArray(ref a0);
    this.d = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Quaternion",typeof(float), 4)]
public struct Quaternion
{
    public float w;
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.w;
    a.Array[a.Offset + 1] = this.x;
    a.Array[a.Offset + 2] = this.y;
    a.Array[a.Offset + 3] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.w = a.Array[a.Offset + 0];
    this.x = a.Array[a.Offset + 1];
    this.y = a.Array[a.Offset + 2];
    this.z = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Transform",typeof(float), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 4);
    this.rotation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.translation.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 4);
    this.rotation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.translation.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Pose",typeof(float), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 4);
    this.orientation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.position.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 4);
    this.orientation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.position.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Pose2D",typeof(float), 3)]
public struct Pose2D
{
    public float orientation;
    public Point2D position;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.orientation;
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1, 2);
    this.position.GetNumericArray(ref a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.orientation = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1, 2);
    this.position.AssignFromNumericArray(ref a1);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.SpatialVelocity",typeof(float), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.SpatialAcceleration",typeof(float), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.Wrench",typeof(float), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.torque.GetNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.force.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.torque.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<float>(a.Array, a.Offset + 3, 3);
    this.force.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryf.SpatialInertia",typeof(float), 10)]
public struct SpatialInertia
{
    public float m;
    public Vector3 com;
    public float ixx;
    public float ixy;
    public float ixz;
    public float iyy;
    public float iyz;
    public float izz;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.m;
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1, 3);
    this.com.GetNumericArray(ref a1);
    a.Array[a.Offset + 4] = this.ixx;
    a.Array[a.Offset + 5] = this.ixy;
    a.Array[a.Offset + 6] = this.ixz;
    a.Array[a.Offset + 7] = this.iyy;
    a.Array[a.Offset + 8] = this.iyz;
    a.Array[a.Offset + 9] = this.izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    this.m = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1, 3);
    this.com.AssignFromNumericArray(ref a1);
    this.ixx = a.Array[a.Offset + 4];
    this.ixy = a.Array[a.Offset + 5];
    this.ixz = a.Array[a.Offset + 6];
    this.iyy = a.Array[a.Offset + 7];
    this.iyz = a.Array[a.Offset + 8];
    this.izz = a.Array[a.Offset + 9];
    }
}

}

namespace com.robotraconteur.geometryf
{
public class com__robotraconteur__geometryfFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometryf\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield single x\nfield single y\nend\n\nnamedarray Vector3\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Vector6\nfield single alpha\nfield single beta\nfield single gamma\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Point2D\nfield single x\nfield single y\nend\n\nnamedarray Point\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Size2D\nfield single width\nfield single height\nend\n\nnamedarray Size\nfield single width\nfield single height\nfield single depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield single d\nend\n\nnamedarray Quaternion\nfield single w\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nnamedarray Pose2D\nfield single orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier frame\nfield SpatialAcceleration Acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield single m\nfield Vector3 com\nfield single ixx\nfield single ixy\nfield single ixz\nfield single iyy\nfield single iyz\nfield single izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometryf";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Plane_stub Plane_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryfFactory() : this(null,null) {}
    public com__robotraconteur__geometryfFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    NamedTransform_stubentry=new NamedTransform_stub(this,this.node,this.context);
    NamedPose_stubentry=new NamedPose_stub(this,this.node,this.context);
    NamedPose2D_stubentry=new NamedPose2D_stub(this,this.node,this.context);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this,this.node,this.context);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this,this.node,this.context);
    NamedWrench_stubentry=new NamedWrench_stub(this,this.node,this.context);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this,this.node,this.context);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Plane_stubentry=new Plane_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")
    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")
    return NamedPose_stubentry;
    if (objecttype=="NamedPose2D")
    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")
    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")
    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")
    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")
    return NamedSpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")
    return Vector2_stubentry;
    if (objecttype=="Vector3")
    return Vector3_stubentry;
    if (objecttype=="Vector6")
    return Vector6_stubentry;
    if (objecttype=="Point2D")
    return Point2D_stubentry;
    if (objecttype=="Point")
    return Point_stubentry;
    if (objecttype=="Size2D")
    return Size2D_stubentry;
    if (objecttype=="Size")
    return Size_stubentry;
    if (objecttype=="Rect")
    return Rect_stubentry;
    if (objecttype=="Box")
    return Box_stubentry;
    if (objecttype=="Plane")
    return Plane_stubentry;
    if (objecttype=="Quaternion")
    return Quaternion_stubentry;
    if (objecttype=="Transform")
    return Transform_stubentry;
    if (objecttype=="Pose")
    return Pose_stubentry;
    if (objecttype=="Pose2D")
    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")
    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")
    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")
    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")
    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "child_frame",s.child_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Transform>(rr_node, rr_context, "transform",ref s.transform));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedTransform",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedPose",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedPose2D",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>(rr_node, rr_context, "velocity",ref s.velocity));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedSpatialVelocity",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>(rr_node, rr_context, "Acceleration",ref s.Acceleration));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedSpatialAcceleration",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.Acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"Acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Wrench>(rr_node, rr_context, "wrench",ref s.wrench));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedWrench",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryfFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryfFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    return new MessageElementStructure("com.robotraconteur.geometryf.NamedSpatialInertia",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector2"; } }
}

public class Vector3_stub : NamedArrayStub<Vector3,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector3"; } }
}

public class Vector6_stub : NamedArrayStub<Vector6,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector6"; } }
}

public class Point2D_stub : NamedArrayStub<Point2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Point2D"; } }
}

public class Point_stub : NamedArrayStub<Point,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Point"; } }
}

public class Size2D_stub : NamedArrayStub<Size2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Size2D"; } }
}

public class Size_stub : NamedArrayStub<Size,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Size"; } }
}

public class Rect_stub : NamedArrayStub<Rect,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Rect"; } }
}

public class Box_stub : NamedArrayStub<Box,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Box"; } }
}

public class Plane_stub : NamedArrayStub<Plane,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Plane"; } }
}

public class Quaternion_stub : NamedArrayStub<Quaternion,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Quaternion"; } }
}

public class Transform_stub : NamedArrayStub<Transform,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Transform"; } }
}

public class Pose_stub : NamedArrayStub<Pose,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Pose"; } }
}

public class Pose2D_stub : NamedArrayStub<Pose2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Pose2D"; } }
}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialVelocity"; } }
}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialAcceleration"; } }
}

public class Wrench_stub : NamedArrayStub<Wrench,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Wrench"; } }
}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialInertia"; } }
}

public static class RRExtensions
{
    public static float[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<float>(new float[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<float>(new float[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<float>(new float[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.geometryi
{
[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedTransform")]
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedPose")]
public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedPose2D")]
public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedSpatialVelocity")]
public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedSpatialAcceleration")]
public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration Acceleration;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedWrench")]
public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometryi.NamedSpatialInertia")]
public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Vector2",typeof(int), 2)]
public struct Vector2
{
    public int x;
    public int y;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Vector3",typeof(int), 3)]
public struct Vector3
{
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Vector6",typeof(int), 6)]
public struct Vector6
{
    public int alpha;
    public int beta;
    public int gamma;
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.alpha;
    a.Array[a.Offset + 1] = this.beta;
    a.Array[a.Offset + 2] = this.gamma;
    a.Array[a.Offset + 3] = this.x;
    a.Array[a.Offset + 4] = this.y;
    a.Array[a.Offset + 5] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    this.alpha = a.Array[a.Offset + 0];
    this.beta = a.Array[a.Offset + 1];
    this.gamma = a.Array[a.Offset + 2];
    this.x = a.Array[a.Offset + 3];
    this.y = a.Array[a.Offset + 4];
    this.z = a.Array[a.Offset + 5];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Point2D",typeof(int), 2)]
public struct Point2D
{
    public int x;
    public int y;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Point",typeof(int), 3)]
public struct Point
{
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Size2D",typeof(int), 2)]
public struct Size2D
{
    public int width;
    public int height;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Size",typeof(int), 3)]
public struct Size
{
    public int width;
    public int height;
    public int depth;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    a.Array[a.Offset + 2] = this.depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    this.depth = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Rect",typeof(int), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 2);
    this.origin.GetNumericArray(ref a0);
    var a2 = new ArraySegment<int>(a.Array, a.Offset + 2, 2);
    this.size.GetNumericArray(ref a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 2);
    this.origin.AssignFromNumericArray(ref a0);
    var a2 = new ArraySegment<int>(a.Array, a.Offset + 2, 2);
    this.size.AssignFromNumericArray(ref a2);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Box",typeof(int), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.origin.GetNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.size.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.origin.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.size.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Plane",typeof(int), 4)]
public struct Plane
{
    public Vector3 normal;
    public int d;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.normal.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.d;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.normal.AssignFromNumericArray(ref a0);
    this.d = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Quaternion",typeof(int), 4)]
public struct Quaternion
{
    public int w;
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.w;
    a.Array[a.Offset + 1] = this.x;
    a.Array[a.Offset + 2] = this.y;
    a.Array[a.Offset + 3] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.w = a.Array[a.Offset + 0];
    this.x = a.Array[a.Offset + 1];
    this.y = a.Array[a.Offset + 2];
    this.z = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Transform",typeof(int), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 4);
    this.rotation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<int>(a.Array, a.Offset + 4, 3);
    this.translation.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 4);
    this.rotation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<int>(a.Array, a.Offset + 4, 3);
    this.translation.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Pose",typeof(int), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 4);
    this.orientation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<int>(a.Array, a.Offset + 4, 3);
    this.position.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 4);
    this.orientation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<int>(a.Array, a.Offset + 4, 3);
    this.position.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Pose2D",typeof(int), 3)]
public struct Pose2D
{
    public int orientation;
    public Point2D position;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.orientation;
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 1, 2);
    this.position.GetNumericArray(ref a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.orientation = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 1, 2);
    this.position.AssignFromNumericArray(ref a1);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.SpatialVelocity",typeof(int), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.SpatialAcceleration",typeof(int), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.Wrench",typeof(int), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.torque.GetNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.force.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<int>(a.Array, a.Offset + 0, 3);
    this.torque.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<int>(a.Array, a.Offset + 3, 3);
    this.force.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometryi.SpatialInertia",typeof(int), 10)]
public struct SpatialInertia
{
    public int m;
    public Vector3 com;
    public int ixx;
    public int ixy;
    public int ixz;
    public int iyy;
    public int iyz;
    public int izz;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.m;
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 1, 3);
    this.com.GetNumericArray(ref a1);
    a.Array[a.Offset + 4] = this.ixx;
    a.Array[a.Offset + 5] = this.ixy;
    a.Array[a.Offset + 6] = this.ixz;
    a.Array[a.Offset + 7] = this.iyy;
    a.Array[a.Offset + 8] = this.iyz;
    a.Array[a.Offset + 9] = this.izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    this.m = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 1, 3);
    this.com.AssignFromNumericArray(ref a1);
    this.ixx = a.Array[a.Offset + 4];
    this.ixy = a.Array[a.Offset + 5];
    this.ixz = a.Array[a.Offset + 6];
    this.iyy = a.Array[a.Offset + 7];
    this.iyz = a.Array[a.Offset + 8];
    this.izz = a.Array[a.Offset + 9];
    }
}

}

namespace com.robotraconteur.geometryi
{
public class com__robotraconteur__geometryiFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometryi\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield int32 x\nfield int32 y\nend\n\nnamedarray Vector3\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Vector6\nfield int32 alpha\nfield int32 beta\nfield int32 gamma\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Point2D\nfield int32 x\nfield int32 y\nend\n\nnamedarray Point\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Size2D\nfield int32 width\nfield int32 height\nend\n\nnamedarray Size\nfield int32 width\nfield int32 height\nfield int32 depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield int32 d\nend\n\nnamedarray Quaternion\nfield int32 w\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nnamedarray Pose2D\nfield int32 orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier frame\nfield SpatialAcceleration Acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield int32 m\nfield Vector3 com\nfield int32 ixx\nfield int32 ixy\nfield int32 ixz\nfield int32 iyy\nfield int32 iyz\nfield int32 izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometryi";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Plane_stub Plane_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryiFactory() : this(null,null) {}
    public com__robotraconteur__geometryiFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    NamedTransform_stubentry=new NamedTransform_stub(this,this.node,this.context);
    NamedPose_stubentry=new NamedPose_stub(this,this.node,this.context);
    NamedPose2D_stubentry=new NamedPose2D_stub(this,this.node,this.context);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this,this.node,this.context);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this,this.node,this.context);
    NamedWrench_stubentry=new NamedWrench_stub(this,this.node,this.context);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this,this.node,this.context);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Plane_stubentry=new Plane_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")
    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")
    return NamedPose_stubentry;
    if (objecttype=="NamedPose2D")
    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")
    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")
    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")
    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")
    return NamedSpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")
    return Vector2_stubentry;
    if (objecttype=="Vector3")
    return Vector3_stubentry;
    if (objecttype=="Vector6")
    return Vector6_stubentry;
    if (objecttype=="Point2D")
    return Point2D_stubentry;
    if (objecttype=="Point")
    return Point_stubentry;
    if (objecttype=="Size2D")
    return Size2D_stubentry;
    if (objecttype=="Size")
    return Size_stubentry;
    if (objecttype=="Rect")
    return Rect_stubentry;
    if (objecttype=="Box")
    return Box_stubentry;
    if (objecttype=="Plane")
    return Plane_stubentry;
    if (objecttype=="Quaternion")
    return Quaternion_stubentry;
    if (objecttype=="Transform")
    return Transform_stubentry;
    if (objecttype=="Pose")
    return Pose_stubentry;
    if (objecttype=="Pose2D")
    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")
    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")
    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")
    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")
    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "child_frame",s.child_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Transform>(rr_node, rr_context, "transform",ref s.transform));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedTransform",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedPose",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedPose2D",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>(rr_node, rr_context, "velocity",ref s.velocity));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedSpatialVelocity",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>(rr_node, rr_context, "Acceleration",ref s.Acceleration));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedSpatialAcceleration",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.Acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"Acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Wrench>(rr_node, rr_context, "wrench",ref s.wrench));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedWrench",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryiFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryiFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    return new MessageElementStructure("com.robotraconteur.geometryi.NamedSpatialInertia",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector2"; } }
}

public class Vector3_stub : NamedArrayStub<Vector3,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector3"; } }
}

public class Vector6_stub : NamedArrayStub<Vector6,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector6"; } }
}

public class Point2D_stub : NamedArrayStub<Point2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Point2D"; } }
}

public class Point_stub : NamedArrayStub<Point,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Point"; } }
}

public class Size2D_stub : NamedArrayStub<Size2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Size2D"; } }
}

public class Size_stub : NamedArrayStub<Size,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Size"; } }
}

public class Rect_stub : NamedArrayStub<Rect,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Rect"; } }
}

public class Box_stub : NamedArrayStub<Box,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Box"; } }
}

public class Plane_stub : NamedArrayStub<Plane,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Plane"; } }
}

public class Quaternion_stub : NamedArrayStub<Quaternion,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Quaternion"; } }
}

public class Transform_stub : NamedArrayStub<Transform,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Transform"; } }
}

public class Pose_stub : NamedArrayStub<Pose,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Pose"; } }
}

public class Pose2D_stub : NamedArrayStub<Pose2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Pose2D"; } }
}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialVelocity"; } }
}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialAcceleration"; } }
}

public class Wrench_stub : NamedArrayStub<Wrench,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Wrench"; } }
}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialInertia"; } }
}

public static class RRExtensions
{
    public static int[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<int>(new int[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<int>(new int[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<int>(new int[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.geometry.shapes
{
[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.Box")]
public class Box
{
    public double x;
    public double y;
    public double z;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.Sphere")]
public class Sphere
{
    public double radius;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.Cylinder")]
public class Cylinder
{
    public double height;
    public double radius;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.Cone")]
public class Cone
{
    public double height;
    public double radius;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.Mesh")]
public class Mesh
{
    public MeshTriangle[] triangles;
    public com.robotraconteur.geometry.Point[] vertices;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.MeshFromResource")]
public class MeshFromResource
{
    public com.robotraconteur.resource.ResourceIdentifier mesh_resource;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.shapes.ShapeObject")]
public class ShapeObject
{
    public com.robotraconteur.identifier.Identifier name;
    public List<object> shapes;
    public List<com.robotraconteur.geometry.Pose> shape_poses;
    public List<com.robotraconteur.color.ColorRGBA> shape_colors;
    public com.robotraconteur.geometry.SpatialInertia inertia;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.shapes.MeshTriangle",typeof(uint), 3)]
public struct MeshTriangle
{
    public uint v1;
    public uint v2;
    public uint v3;
    public uint[] GetNumericArray()
    {
    var a=new ArraySegment<uint>(new uint[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<uint> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.v1;
    a.Array[a.Offset + 1] = this.v2;
    a.Array[a.Offset + 2] = this.v3;
    }
    public void AssignFromNumericArray(ref ArraySegment<uint> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.v1 = a.Array[a.Offset + 0];
    this.v2 = a.Array[a.Offset + 1];
    this.v3 = a.Array[a.Offset + 2];
    }
}

}

namespace com.robotraconteur.geometry.shapes
{
public class com__robotraconteur__geometry__shapesFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometry.shapes\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.identifier\nimport com.robotraconteur.color\nimport com.robotraconteur.resource\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.color.ColorRGBA\nusing com.robotraconteur.resource.ResourceIdentifier\n\nstruct Box\nfield double x\nfield double y\nfield double z\nend\n\nstruct Sphere\nfield double radius\nend\n\nstruct Cylinder\nfield double height\nfield double radius\nend\n\nstruct Cone\nfield double height\nfield double radius\nend\n\nnamedarray MeshTriangle\nfield uint32 v1\nfield uint32 v2\nfield uint32 v3\nend\n\nstruct Mesh\nfield MeshTriangle[] triangles\nfield Point[] vertices\nend\n\nstruct MeshFromResource\nfield ResourceIdentifier mesh_resource\nend\n\nstruct ShapeObject\nfield Identifier name\nfield varvalue{list} shapes\nfield Pose{list} shape_poses\nfield ColorRGBA{list} shape_colors\nfield SpatialInertia inertia\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometry.shapes";}
    public Box_stub Box_stubentry;
    public Sphere_stub Sphere_stubentry;
    public Cylinder_stub Cylinder_stubentry;
    public Cone_stub Cone_stubentry;
    public Mesh_stub Mesh_stubentry;
    public MeshFromResource_stub MeshFromResource_stubentry;
    public ShapeObject_stub ShapeObject_stubentry;
    public MeshTriangle_stub MeshTriangle_stubentry;
    public com__robotraconteur__geometry__shapesFactory() : this(null,null) {}
    public com__robotraconteur__geometry__shapesFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    Box_stubentry=new Box_stub(this,this.node,this.context);
    Sphere_stubentry=new Sphere_stub(this,this.node,this.context);
    Cylinder_stubentry=new Cylinder_stub(this,this.node,this.context);
    Cone_stubentry=new Cone_stub(this,this.node,this.context);
    Mesh_stubentry=new Mesh_stub(this,this.node,this.context);
    MeshFromResource_stubentry=new MeshFromResource_stub(this,this.node,this.context);
    ShapeObject_stubentry=new ShapeObject_stub(this,this.node,this.context);
    MeshTriangle_stubentry=new MeshTriangle_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Box")
    return Box_stubentry;
    if (objecttype=="Sphere")
    return Sphere_stubentry;
    if (objecttype=="Cylinder")
    return Cylinder_stubentry;
    if (objecttype=="Cone")
    return Cone_stubentry;
    if (objecttype=="Mesh")
    return Mesh_stubentry;
    if (objecttype=="MeshFromResource")
    return MeshFromResource_stubentry;
    if (objecttype=="ShapeObject")
    return ShapeObject_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="MeshTriangle")
    return MeshTriangle_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Box_stub : IStructureStub {
    public Box_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Box s = (Box)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("x",s.x));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("y",s.y));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("z",s.z));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.Box",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Box s=new Box();
    s.x =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"x")));
    s.y =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"y")));
    s.z =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"z")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Sphere_stub : IStructureStub {
    public Sphere_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Sphere s = (Sphere)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.Sphere",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Sphere s=new Sphere();
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Cylinder_stub : IStructureStub {
    public Cylinder_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Cylinder s = (Cylinder)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.Cylinder",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Cylinder s=new Cylinder();
    s.height =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"height")));
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Cone_stub : IStructureStub {
    public Cone_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Cone s = (Cone)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.Cone",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Cone s=new Cone();
    s.height =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"height")));
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Mesh_stub : IStructureStub {
    public Mesh_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Mesh s = (Mesh)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<MeshTriangle>(rr_node, rr_context, "triangles",s.triangles));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, "vertices",s.vertices));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.Mesh",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Mesh s=new Mesh();
    s.triangles =MessageElementUtil.UnpackNamedArray<MeshTriangle>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"triangles"));
    s.vertices =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"vertices"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class MeshFromResource_stub : IStructureStub {
    public MeshFromResource_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    MeshFromResource s = (MeshFromResource)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "mesh_resource",s.mesh_resource));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.MeshFromResource",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    MeshFromResource s=new MeshFromResource();
    s.mesh_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"mesh_resource"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ShapeObject_stub : IStructureStub {
    public ShapeObject_stub(com__robotraconteur__geometry__shapesFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometry__shapesFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ShapeObject s = (ShapeObject)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "name",s.name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "shapes",s.shapes));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "shape_poses",s.shape_poses));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, "shape_colors",s.shape_colors));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    return new MessageElementStructure("com.robotraconteur.geometry.shapes.ShapeObject",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ShapeObject s=new ShapeObject();
    s.name =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"name"));
    s.shapes =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shapes"));
    s.shape_poses =MessageElementUtil.UnpackList<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape_poses"));
    s.shape_colors =MessageElementUtil.UnpackList<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape_colors"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class MeshTriangle_stub : NamedArrayStub<MeshTriangle,uint> {
    public override uint[] GetNumericArrayFromNamedArrayStruct(ref MeshTriangle s) {
    return s.GetNumericArray();
    }
    public override MeshTriangle GetNamedArrayStructFromNumericArray(uint[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new MeshTriangle();
    var a = new ArraySegment<uint>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override uint[] GetNumericArrayFromNamedArray(MeshTriangle[] s) {
    return s.GetNumericArray();
    }
    public override MeshTriangle[] GetNamedArrayFromNumericArray(uint[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    MeshTriangle[] s = new MeshTriangle[m.Length / 3];
    var a = new ArraySegment<uint>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.shapes.MeshTriangle"; } }
}

public static class RRExtensions
{
    public static uint[] GetNumericArray(this MeshTriangle[] s)
    {
    var a=new ArraySegment<uint>(new uint[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this MeshTriangle[] s, ref ArraySegment<uint> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<uint>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this MeshTriangle[] s, ref ArraySegment<uint> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<uint>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.gps
{
[RobotRaconteurServiceStruct("com.robotraconteur.gps.GpsState")]
public class GpsState
{
    public double altitude;
    public double latitude_deg;
    public double longitude_deg;
    public double velocity_east;
    public double velocity_north;
    public double velocity_up;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.gps.GpsSensor")]
public interface GpsSensor : com.robotraconteur.sensor.Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.sensor.SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<GpsState> gps_state { get; set; }
}

}

namespace com.robotraconteur.gps
{
public class com__robotraconteur__gpsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.gps\n\nstdver 0.9\n\nimport com.robotraconteur.sensor\n\nusing com.robotraconteur.sensor.Sensor\nusing com.robotraconteur.sensor.SensorInfo\nusing com.robotraconteur.sensor.SensorData\n\nstruct GpsState\nfield double altitude\nfield double latitude_deg\nfield double longitude_deg\nfield double velocity_east\nfield double velocity_north\nfield double velocity_up\nend struct\n\nobject GpsSensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire GpsState gps_state [readonly,nolock]\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.gps";}
    public GpsState_stub GpsState_stubentry;
    public com__robotraconteur__gpsFactory() : this(null,null) {}
    public com__robotraconteur__gpsFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    GpsState_stubentry=new GpsState_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="GpsState")
    return GpsState_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "GpsSensor":
    return new GpsSensor_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "GpsSensor":
    return new GpsSensor_skel(path,(GpsSensor)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class GpsState_stub : IStructureStub {
    public GpsState_stub(com__robotraconteur__gpsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__gpsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    GpsState s = (GpsState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("altitude",s.altitude));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("latitude_deg",s.latitude_deg));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("longitude_deg",s.longitude_deg));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("velocity_east",s.velocity_east));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("velocity_north",s.velocity_north));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("velocity_up",s.velocity_up));
    return new MessageElementStructure("com.robotraconteur.gps.GpsState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    GpsState s=new GpsState();
    s.altitude =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"altitude")));
    s.latitude_deg =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"latitude_deg")));
    s.longitude_deg =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"longitude_deg")));
    s.velocity_east =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"velocity_east")));
    s.velocity_north =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"velocity_north")));
    s.velocity_up =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"velocity_up")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class GpsSensor_stub : ServiceStub , GpsSensor {
    private Pipe<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<GpsState> rr_gps_state;
    public GpsSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<com.robotraconteur.sensor.SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_gps_state=new WireClient<GpsState>("gps_state", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<GpsState> gps_state {
    get { return rr_gps_state;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "gps_state":
    this.rr_gps_state.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class GpsSensor_skel : ServiceSkel {
    protected GpsSensor obj;
    public GpsSensor_skel(string p,GpsSensor o,ServerContext c) : base(p,o,c) { obj=(GpsSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    com.robotraconteur.sensor.SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<GpsState> rr_gps_state;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    GpsSensor castobj=(GpsSensor)o;
    this.rr_sensor_data=new PipeServer<com.robotraconteur.sensor.SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_gps_state=new WireServer<GpsState>("gps_state",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.gps_state=this.rr_gps_state;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "gps_state":
    return await this.rr_gps_state.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "gps_state":
    this.rr_gps_state.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "gps_state") return true;
    return false;
    }
}
public class GpsSensor_default_impl : GpsSensor{
    protected PipeBroadcaster<com.robotraconteur.sensor.SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<GpsState> rrvar_gps_state;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<com.robotraconteur.sensor.SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<GpsState> gps_state {
    get { return rrvar_gps_state.Wire;  }
    set {
    if (rrvar_gps_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_gps_state= new WireBroadcaster<GpsState>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.hid.joystick
{
[RobotRaconteurServiceStruct("com.robotraconteur.hid.joystick.JoystickInfo")]
public class JoystickInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public uint axes_count;
    public uint button_count;
    public uint joystick_capabilities;
}

[RobotRaconteurServiceStruct("com.robotraconteur.hid.joystick.JoystickState")]
public class JoystickState
{
    public float[] axes;
    public int[] buttons;
}

[RobotRaconteurServiceStruct("com.robotraconteur.hid.joystick.JoystickStateSensorData")]
public class JoystickStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public JoystickState joystick_state;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.hid.joystick.Joystick")]
public interface Joystick
{
    Task<JoystickInfo> get_joystick_info(CancellationToken cancel=default(CancellationToken));
    Task set_joystick_info(JoystickInfo value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken));
    Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task rumble(double intensity,CancellationToken rr_cancel=default(CancellationToken));
    Task force_feedback(com.robotraconteur.geometry.Vector2 force,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<JoystickStateSensorData> joystick_sensor_data{ get; set; }
    Wire<JoystickState> joystick_state { get; set; }
}

public static class com__robotraconteur__hid__joystickConstants  {
}
    public enum JoystickCapabilities
    {
    none = 0,
    rumble = 0x1,
    force_feedback = 0x2,
    standard_gamepad = 0x4
    };
}

namespace com.robotraconteur.hid.joystick
{
public class com__robotraconteur__hid__joystickFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.hid.joystick\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.geometry.Vector2\n\nenum JoystickCapabilities\nnone = 0,\nrumble = 0x1,\nforce_feedback = 0x2,\nstandard_gamepad = 0x4\nend\n\nstruct JoystickInfo\nfield DeviceInfo device_info\nfield uint32 axes_count\nfield uint32 button_count\nfield uint32 joystick_capabilities\nend\n\nstruct JoystickState\nfield single[] axes\nfield int32[] buttons\nend\n\nstruct JoystickStateSensorData\nfield SensorDataHeader data_header\nfield JoystickState joystick_state\nend\n\nobject Joystick\nproperty JoystickInfo joystick_info [readonly,nolock]\nproperty uint32 update_downsample [perclient]\nproperty double update_rate [readonly,nolock]\nwire JoystickState joystick_state [readonly,nolock]\npipe JoystickStateSensorData joystick_sensor_data [readonly,nolock]\nfunction void rumble(double intensity)\nfunction void force_feedback(Vector2 force)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.hid.joystick";}
    public JoystickInfo_stub JoystickInfo_stubentry;
    public JoystickState_stub JoystickState_stubentry;
    public JoystickStateSensorData_stub JoystickStateSensorData_stubentry;
    public com__robotraconteur__hid__joystickFactory() : this(null,null) {}
    public com__robotraconteur__hid__joystickFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    JoystickInfo_stubentry=new JoystickInfo_stub(this,this.node,this.context);
    JoystickState_stubentry=new JoystickState_stub(this,this.node,this.context);
    JoystickStateSensorData_stubentry=new JoystickStateSensorData_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JoystickInfo")
    return JoystickInfo_stubentry;
    if (objecttype=="JoystickState")
    return JoystickState_stubentry;
    if (objecttype=="JoystickStateSensorData")
    return JoystickStateSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Joystick":
    return new Joystick_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Joystick":
    return new Joystick_skel(path,(Joystick)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JoystickInfo_stub : IStructureStub {
    public JoystickInfo_stub(com__robotraconteur__hid__joystickFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__hid__joystickFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JoystickInfo s = (JoystickInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("axes_count",s.axes_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("button_count",s.button_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("joystick_capabilities",s.joystick_capabilities));
    return new MessageElementStructure("com.robotraconteur.hid.joystick.JoystickInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JoystickInfo s=new JoystickInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.axes_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"axes_count")));
    s.button_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"button_count")));
    s.joystick_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"joystick_capabilities")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JoystickState_stub : IStructureStub {
    public JoystickState_stub(com__robotraconteur__hid__joystickFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__hid__joystickFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JoystickState s = (JoystickState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("axes",s.axes));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("buttons",s.buttons));
    return new MessageElementStructure("com.robotraconteur.hid.joystick.JoystickState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JoystickState s=new JoystickState();
    s.axes =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(m.Elements,"axes"));
    s.buttons =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(m.Elements,"buttons"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JoystickStateSensorData_stub : IStructureStub {
    public JoystickStateSensorData_stub(com__robotraconteur__hid__joystickFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__hid__joystickFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JoystickStateSensorData s = (JoystickStateSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joystick_state",s.joystick_state));
    return new MessageElementStructure("com.robotraconteur.hid.joystick.JoystickStateSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JoystickStateSensorData s=new JoystickStateSensorData();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.joystick_state =MessageElementUtil.UnpackStructure<JoystickState>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joystick_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Joystick_stub : ServiceStub , Joystick {
    private Pipe<JoystickStateSensorData> rr_joystick_sensor_data;
    private Wire<JoystickState> rr_joystick_state;
    public Joystick_stub(string path, ClientContext c) : base(path, c) {
    rr_joystick_sensor_data=new PipeClient<JoystickStateSensorData>("joystick_sensor_data", this);
    rr_joystick_state=new WireClient<JoystickState>("joystick_state", this);
    }
    public async Task<JoystickInfo> get_joystick_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "joystick_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<JoystickInfo>(rr_node, rr_context, me);
        }
    public async Task set_joystick_info(JoystickInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"joystick_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_downsample");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_downsample");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task rumble(double intensity, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"rumble");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("intensity",intensity));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task force_feedback(com.robotraconteur.geometry.Vector2 force, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"force_feedback");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector2>(rr_node, rr_context, "force",ref force));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<JoystickStateSensorData> joystick_sensor_data {
    get { return rr_joystick_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<JoystickState> joystick_state {
    get { return rr_joystick_state;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "joystick_sensor_data":
    this.rr_joystick_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "joystick_state":
    this.rr_joystick_state.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Joystick_skel : ServiceSkel {
    protected Joystick obj;
    public Joystick_skel(string p,Joystick o,ServerContext c) : base(p,o,c) { obj=(Joystick)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "joystick_info":
    {
    JoystickInfo ret=await obj.get_joystick_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "update_downsample":
    {
    uint ret=await obj.get_update_downsample();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "joystick_info":
    {
    await obj.set_joystick_info(MessageElementUtil.UnpackStructure<JoystickInfo>(rr_node, rr_context, me));
    break;
    }
    case "update_downsample":
    {
    await obj.set_update_downsample((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "rumble":
    {
    double intensity=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"intensity")));
    await this.obj.rumble(intensity, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "force_feedback":
    {
    com.robotraconteur.geometry.Vector2 force=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector2>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"force"));
    await this.obj.force_feedback(force, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<JoystickStateSensorData> rr_joystick_sensor_data;
    private WireServer<JoystickState> rr_joystick_state;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Joystick castobj=(Joystick)o;
    this.rr_joystick_sensor_data=new PipeServer<JoystickStateSensorData>("joystick_sensor_data",this);
    this.rr_joystick_state=new WireServer<JoystickState>("joystick_state",this);
    castobj.joystick_sensor_data=this.rr_joystick_sensor_data;
    castobj.joystick_state=this.rr_joystick_state;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "joystick_sensor_data":
    return await this.rr_joystick_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "joystick_state":
    return await this.rr_joystick_state.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "joystick_sensor_data":
    this.rr_joystick_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "joystick_state":
    this.rr_joystick_state.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "joystick_info") return true;
    if (m.MemberName == "update_rate") return true;
    if (m.MemberName == "joystick_state") return true;
    if (m.MemberName == "joystick_sensor_data") return true;
    return false;
    }
}
public class Joystick_default_impl : Joystick{
    protected PipeBroadcaster<JoystickStateSensorData> rrvar_joystick_sensor_data;
    protected WireBroadcaster<JoystickState> rrvar_joystick_state;
    public virtual Task<JoystickInfo> get_joystick_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_joystick_info(JoystickInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task rumble(double intensity,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task force_feedback(com.robotraconteur.geometry.Vector2 force,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<JoystickStateSensorData> joystick_sensor_data {
    get { return rrvar_joystick_sensor_data.Pipe;  }
    set {
    if (rrvar_joystick_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joystick_sensor_data= new PipeBroadcaster<JoystickStateSensorData>(value);
    }
    }
    public virtual Wire<JoystickState> joystick_state {
    get { return rrvar_joystick_state.Wire;  }
    set {
    if (rrvar_joystick_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joystick_state= new WireBroadcaster<JoystickState>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.identifier
{
[RobotRaconteurServiceStruct("com.robotraconteur.identifier.Identifier")]
public class Identifier
{
    public string name;
    public com.robotraconteur.uuid.UUID uuid;
}

}

namespace com.robotraconteur.identifier
{
public class com__robotraconteur__identifierFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.identifier\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\n\nusing com.robotraconteur.uuid.UUID\n\nstruct Identifier\nfield string name\nfield UUID uuid\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.identifier";}
    public Identifier_stub Identifier_stubentry;
    public com__robotraconteur__identifierFactory() : this(null,null) {}
    public com__robotraconteur__identifierFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    Identifier_stubentry=new Identifier_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Identifier")
    return Identifier_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Identifier_stub : IStructureStub {
    public Identifier_stub(com__robotraconteur__identifierFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__identifierFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Identifier s = (Identifier)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, "uuid",ref s.uuid));
    return new MessageElementStructure("com.robotraconteur.identifier.Identifier",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Identifier s=new Identifier();
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"name"));
    s.uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"uuid"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.image
{
[RobotRaconteurServiceStruct("com.robotraconteur.image.ImageInfo")]
public class ImageInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public uint height;
    public uint width;
    public uint step;
    public ImageEncoding encoding;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.FreeformImageInfo")]
public class FreeformImageInfo
{
    public ImageInfo image_info;
    public string encoding;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.Image")]
public class Image
{
    public ImageInfo image_info;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.CompressedImage")]
public class CompressedImage
{
    public ImageInfo image_info;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.FreeformImage")]
public class FreeformImage
{
    public FreeformImageInfo image_info;
    public object data;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.ImagePart")]
public class ImagePart
{
    public ImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data_part;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.CompressedImagePart")]
public class CompressedImagePart
{
    public ImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data_part;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.FreeformImagePart")]
public class FreeformImagePart
{
    public FreeformImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public object data_part;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.DepthImage")]
public class DepthImage
{
    public Image depth_image;
    public Image intensity_image;
    public double depth_ticks_per_meter;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.FreeformDepthImage")]
public class FreeformDepthImage
{
    public FreeformImage depth_image;
    public FreeformImage intensity_image;
    public double depth_ticks_per_meter;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.image.ImageResource")]
public class ImageResource
{
    public com.robotraconteur.resource.ResourceIdentifier image_resource;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.image.PixelRGB",typeof(byte), 3)]
public struct PixelRGB
{
    public byte r;
    public byte g;
    public byte b;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.image.PixelRGBA",typeof(byte), 4)]
public struct PixelRGBA
{
    public byte r;
    public byte g;
    public byte b;
    public byte a;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.r;
    a.Array[a.Offset + 1] = this.g;
    a.Array[a.Offset + 2] = this.b;
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.r = a.Array[a.Offset + 0];
    this.g = a.Array[a.Offset + 1];
    this.b = a.Array[a.Offset + 2];
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.image.PixelRGBFloatPacked",typeof(double), 1)]
public struct PixelRGBFloatPacked
{
    public double rgb;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[1]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.rgb;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    this.rgb = a.Array[a.Offset + 0];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.image.PixelRGBFloatPackedf",typeof(float), 1)]
public struct PixelRGBFloatPackedf
{
    public float rgb;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[1]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.rgb;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    this.rgb = a.Array[a.Offset + 0];
    }
}

public static class com__robotraconteur__imageConstants  {
}
    public enum ImageEncoding
    {
    unknown = 0,
    rgb8 = 0x1000,
    rgba8 = 0x1001,
    bgr8 = 0x1002,
    bgra8 = 0x1003,
    rgbe8 = 0x1004,
    bgre8 = 0x1005,
    rgbm8 = 0x1006,
    bgrm8 = 0x1007,
    rgba16 = 0x1008,
    bgra16 = 0x1009,
    mono8 = 0x2000,
    mono16 = 0x2001,
    mono32 = 0x2002,
    monof32 = 0x2003,
    monof64 = 0x2004,
    bayer_rggb8 = 0x3000,
    bayer_bggr8 = 0x3001,
    bayer_gbrg8 = 0x3002,
    bayer_grbg8 = 0x3003,
    depth_u16 = 0x4000,
    depth_u32 = 0x4001,
    depth_i64 = 0x4002,
    depth_f32 = 0x4003,
    depth_f64 = 0x4004,
    freeform = 0x5000,
    compressed = 0x6000
    };
}

namespace com.robotraconteur.image
{
public class com__robotraconteur__imageFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.image\n\nstdver 0.9\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\n\nenum ImageEncoding\nunknown = 0,\nrgb8 = 0x1000,\nrgba8,\nbgr8,\nbgra8,\nrgbe8,\nbgre8,\nrgbm8,\nbgrm8,\nrgba16,\nbgra16,\nmono8 = 0x2000,\nmono16,\nmono32,\nmonof32,\nmonof64,\nbayer_rggb8 = 0x3000,\nbayer_bggr8,\nbayer_gbrg8,\nbayer_grbg8,\ndepth_u16 = 0x4000,\ndepth_u32,\ndepth_i64,\ndepth_f32,\ndepth_f64,\nfreeform = 0x5000,\ncompressed = 0x6000\nend\n\nnamedarray PixelRGB\nfield uint8 r\nfield uint8 g\nfield uint8 b\nend\n\nnamedarray PixelRGBA\nfield uint8 r\nfield uint8 g\nfield uint8 b\nfield uint8 a\nend\n\n# Used with laser scan and point cloud\nnamedarray PixelRGBFloatPacked\nfield double rgb\nend\nnamedarray PixelRGBFloatPackedf\nfield single rgb\nend\n\nstruct ImageInfo\nfield SensorDataHeader data_header\nfield uint32 height\nfield uint32 width\nfield uint32 step\nfield ImageEncoding encoding\nend\n\nstruct FreeformImageInfo\nfield ImageInfo image_info\nfield string encoding\nfield varvalue{string} extended\nend\n\nstruct Image\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint8[] data\nend\n\nstruct CompressedImage\nfield ImageInfo image_info\n# Use magic to determine data type\nfield uint8[] data\nend\n\nstruct FreeformImage\nfield FreeformImageInfo image_info\nfield varvalue data\nfield varvalue{string} extended\nend\n\nstruct ImagePart\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data_part\nend\n\nstruct CompressedImagePart\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data_part\nend\n\nstruct FreeformImagePart\nfield FreeformImageInfo image_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield varvalue data_part\nfield varvalue{string} extended\nend\n\nstruct DepthImage\nfield Image depth_image\nfield Image intensity_image\nfield double depth_ticks_per_meter\nend\n\nstruct FreeformDepthImage\nfield FreeformImage depth_image\nfield FreeformImage intensity_image\nfield double depth_ticks_per_meter\nfield varvalue{string} extended\nend\n\nstruct ImageResource\nfield ResourceIdentifier image_resource\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.image";}
    public ImageInfo_stub ImageInfo_stubentry;
    public FreeformImageInfo_stub FreeformImageInfo_stubentry;
    public Image_stub Image_stubentry;
    public CompressedImage_stub CompressedImage_stubentry;
    public FreeformImage_stub FreeformImage_stubentry;
    public ImagePart_stub ImagePart_stubentry;
    public CompressedImagePart_stub CompressedImagePart_stubentry;
    public FreeformImagePart_stub FreeformImagePart_stubentry;
    public DepthImage_stub DepthImage_stubentry;
    public FreeformDepthImage_stub FreeformDepthImage_stubentry;
    public ImageResource_stub ImageResource_stubentry;
    public PixelRGB_stub PixelRGB_stubentry;
    public PixelRGBA_stub PixelRGBA_stubentry;
    public PixelRGBFloatPacked_stub PixelRGBFloatPacked_stubentry;
    public PixelRGBFloatPackedf_stub PixelRGBFloatPackedf_stubentry;
    public com__robotraconteur__imageFactory() : this(null,null) {}
    public com__robotraconteur__imageFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ImageInfo_stubentry=new ImageInfo_stub(this,this.node,this.context);
    FreeformImageInfo_stubentry=new FreeformImageInfo_stub(this,this.node,this.context);
    Image_stubentry=new Image_stub(this,this.node,this.context);
    CompressedImage_stubentry=new CompressedImage_stub(this,this.node,this.context);
    FreeformImage_stubentry=new FreeformImage_stub(this,this.node,this.context);
    ImagePart_stubentry=new ImagePart_stub(this,this.node,this.context);
    CompressedImagePart_stubentry=new CompressedImagePart_stub(this,this.node,this.context);
    FreeformImagePart_stubentry=new FreeformImagePart_stub(this,this.node,this.context);
    DepthImage_stubentry=new DepthImage_stub(this,this.node,this.context);
    FreeformDepthImage_stubentry=new FreeformDepthImage_stub(this,this.node,this.context);
    ImageResource_stubentry=new ImageResource_stub(this,this.node,this.context);
    PixelRGB_stubentry=new PixelRGB_stub();
    PixelRGBA_stubentry=new PixelRGBA_stub();
    PixelRGBFloatPacked_stubentry=new PixelRGBFloatPacked_stub();
    PixelRGBFloatPackedf_stubentry=new PixelRGBFloatPackedf_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ImageInfo")
    return ImageInfo_stubentry;
    if (objecttype=="FreeformImageInfo")
    return FreeformImageInfo_stubentry;
    if (objecttype=="Image")
    return Image_stubentry;
    if (objecttype=="CompressedImage")
    return CompressedImage_stubentry;
    if (objecttype=="FreeformImage")
    return FreeformImage_stubentry;
    if (objecttype=="ImagePart")
    return ImagePart_stubentry;
    if (objecttype=="CompressedImagePart")
    return CompressedImagePart_stubentry;
    if (objecttype=="FreeformImagePart")
    return FreeformImagePart_stubentry;
    if (objecttype=="DepthImage")
    return DepthImage_stubentry;
    if (objecttype=="FreeformDepthImage")
    return FreeformDepthImage_stubentry;
    if (objecttype=="ImageResource")
    return ImageResource_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="PixelRGB")
    return PixelRGB_stubentry;
    if (objecttype=="PixelRGBA")
    return PixelRGBA_stubentry;
    if (objecttype=="PixelRGBFloatPacked")
    return PixelRGBFloatPacked_stubentry;
    if (objecttype=="PixelRGBFloatPackedf")
    return PixelRGBFloatPackedf_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ImageInfo_stub : IStructureStub {
    public ImageInfo_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ImageInfo s = (ImageInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("step",s.step));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ImageEncoding>("encoding",s.encoding));
    return new MessageElementStructure("com.robotraconteur.image.ImageInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ImageInfo s=new ImageInfo();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.step =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"step")));
    s.encoding =MessageElementUtil.UnpackEnum<ImageEncoding>(MessageElement.FindElement(m.Elements,"encoding"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformImageInfo_stub : IStructureStub {
    public FreeformImageInfo_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformImageInfo s = (FreeformImageInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.image.FreeformImageInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformImageInfo s=new FreeformImageInfo();
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"encoding"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Image_stub : IStructureStub {
    public Image_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Image s = (Image)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.image.Image",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Image s=new Image();
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class CompressedImage_stub : IStructureStub {
    public CompressedImage_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    CompressedImage s = (CompressedImage)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.image.CompressedImage",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    CompressedImage s=new CompressedImage();
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformImage_stub : IStructureStub {
    public FreeformImage_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformImage s = (FreeformImage)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "data",s.data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.image.FreeformImage",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformImage s=new FreeformImage();
    s.image_info =MessageElementUtil.UnpackStructure<FreeformImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ImagePart_stub : IStructureStub {
    public ImagePart_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ImagePart s = (ImagePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data_part",s.data_part));
    return new MessageElementStructure("com.robotraconteur.image.ImagePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ImagePart s=new ImagePart();
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data_part"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class CompressedImagePart_stub : IStructureStub {
    public CompressedImagePart_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    CompressedImagePart s = (CompressedImagePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data_part",s.data_part));
    return new MessageElementStructure("com.robotraconteur.image.CompressedImagePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    CompressedImagePart s=new CompressedImagePart();
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data_part"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformImagePart_stub : IStructureStub {
    public FreeformImagePart_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformImagePart s = (FreeformImagePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_info",s.image_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "data_part",s.data_part));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.image.FreeformImagePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformImagePart s=new FreeformImagePart();
    s.image_info =MessageElementUtil.UnpackStructure<FreeformImageInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_part"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DepthImage_stub : IStructureStub {
    public DepthImage_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DepthImage s = (DepthImage)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "depth_image",s.depth_image));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "intensity_image",s.intensity_image));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("depth_ticks_per_meter",s.depth_ticks_per_meter));
    return new MessageElementStructure("com.robotraconteur.image.DepthImage",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DepthImage s=new DepthImage();
    s.depth_image =MessageElementUtil.UnpackStructure<Image>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"depth_image"));
    s.intensity_image =MessageElementUtil.UnpackStructure<Image>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"intensity_image"));
    s.depth_ticks_per_meter =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"depth_ticks_per_meter")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformDepthImage_stub : IStructureStub {
    public FreeformDepthImage_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformDepthImage s = (FreeformDepthImage)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "depth_image",s.depth_image));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "intensity_image",s.intensity_image));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("depth_ticks_per_meter",s.depth_ticks_per_meter));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.image.FreeformDepthImage",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformDepthImage s=new FreeformDepthImage();
    s.depth_image =MessageElementUtil.UnpackStructure<FreeformImage>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"depth_image"));
    s.intensity_image =MessageElementUtil.UnpackStructure<FreeformImage>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"intensity_image"));
    s.depth_ticks_per_meter =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"depth_ticks_per_meter")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ImageResource_stub : IStructureStub {
    public ImageResource_stub(com__robotraconteur__imageFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imageFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ImageResource s = (ImageResource)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "image_resource",s.image_resource));
    return new MessageElementStructure("com.robotraconteur.image.ImageResource",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ImageResource s=new ImageResource();
    s.image_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_resource"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PixelRGB_stub : NamedArrayStub<PixelRGB,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref PixelRGB s) {
    return s.GetNumericArray();
    }
    public override PixelRGB GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGB();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(PixelRGB[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGB[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGB[] s = new PixelRGB[m.Length / 3];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGB"; } }
}

public class PixelRGBA_stub : NamedArrayStub<PixelRGBA,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBA s) {
    return s.GetNumericArray();
    }
    public override PixelRGBA GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBA();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(PixelRGBA[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBA[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBA[] s = new PixelRGBA[m.Length / 4];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBA"; } }
}

public class PixelRGBFloatPacked_stub : NamedArrayStub<PixelRGBFloatPacked,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBFloatPacked s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPacked GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 1) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBFloatPacked();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(PixelRGBFloatPacked[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPacked[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 1 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBFloatPacked[] s = new PixelRGBFloatPacked[m.Length / 1];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBFloatPacked"; } }
}

public class PixelRGBFloatPackedf_stub : NamedArrayStub<PixelRGBFloatPackedf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBFloatPackedf s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPackedf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 1) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBFloatPackedf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(PixelRGBFloatPackedf[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPackedf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 1 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBFloatPackedf[] s = new PixelRGBFloatPackedf[m.Length / 1];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBFloatPackedf"; } }
}

public static class RRExtensions
{
    public static byte[] GetNumericArray(this PixelRGB[] s)
    {
    var a=new ArraySegment<byte>(new byte[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGB[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGB[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this PixelRGBA[] s)
    {
    var a=new ArraySegment<byte>(new byte[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBA[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBA[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this PixelRGBFloatPacked[] s)
    {
    var a=new ArraySegment<double>(new double[1 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBFloatPacked[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1*i,1);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBFloatPacked[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1*i,1);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this PixelRGBFloatPackedf[] s)
    {
    var a=new ArraySegment<float>(new float[1 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBFloatPackedf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1*i,1);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBFloatPackedf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1*i,1);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.imaging.camerainfo
{
[RobotRaconteurServiceStruct("com.robotraconteur.imaging.camerainfo.PlumbBobDistortionInfo")]
public class PlumbBobDistortionInfo
{
    public double k1;
    public double k2;
    public double p1;
    public double p2;
    public double k3;
}

[RobotRaconteurServiceStruct("com.robotraconteur.imaging.camerainfo.CameraCalibration")]
public class CameraCalibration
{
    public com.robotraconteur.geometryi.Size2D image_size;
    public object distortion_info;
    public MultiDimArray K;
    public com.robotraconteur.identifier.Identifier parent_device;
    public com.robotraconteur.geometry.NamedPose camera_pose;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.imaging.camerainfo.CameraInfo")]
public class CameraInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public CameraCalibration calibration;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.imaging.camerainfo.MultiCameraInfo")]
public class MultiCameraInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public List<CameraInfo> camera_info_all;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.imaging.camerainfo
{
public class com__robotraconteur__imaging__camerainfoFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imaging.camerainfo\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\nimport com.robotraconteur.geometryi\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometryi.Size2D\nusing com.robotraconteur.device.DeviceInfo\n\nstruct PlumbBobDistortionInfo\nfield double k1\nfield double k2\nfield double p1\nfield double p2\nfield double k3\nend\n\nstruct CameraCalibration\nfield Size2D image_size\nfield varvalue distortion_info\nfield double[3,3] K\nfield Identifier parent_device\nfield NamedPose camera_pose\nfield varvalue{string} extended\nend\n\nstruct CameraInfo\nfield DeviceInfo device_info\nfield CameraCalibration calibration\nfield varvalue{string} extended\nend\n\nstruct MultiCameraInfo\nfield DeviceInfo device_info\nfield CameraInfo{list} camera_info_all\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imaging.camerainfo";}
    public PlumbBobDistortionInfo_stub PlumbBobDistortionInfo_stubentry;
    public CameraCalibration_stub CameraCalibration_stubentry;
    public CameraInfo_stub CameraInfo_stubentry;
    public MultiCameraInfo_stub MultiCameraInfo_stubentry;
    public com__robotraconteur__imaging__camerainfoFactory() : this(null,null) {}
    public com__robotraconteur__imaging__camerainfoFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PlumbBobDistortionInfo_stubentry=new PlumbBobDistortionInfo_stub(this,this.node,this.context);
    CameraCalibration_stubentry=new CameraCalibration_stub(this,this.node,this.context);
    CameraInfo_stubentry=new CameraInfo_stub(this,this.node,this.context);
    MultiCameraInfo_stubentry=new MultiCameraInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PlumbBobDistortionInfo")
    return PlumbBobDistortionInfo_stubentry;
    if (objecttype=="CameraCalibration")
    return CameraCalibration_stubentry;
    if (objecttype=="CameraInfo")
    return CameraInfo_stubentry;
    if (objecttype=="MultiCameraInfo")
    return MultiCameraInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PlumbBobDistortionInfo_stub : IStructureStub {
    public PlumbBobDistortionInfo_stub(com__robotraconteur__imaging__camerainfoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PlumbBobDistortionInfo s = (PlumbBobDistortionInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("k1",s.k1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("k2",s.k2));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("p1",s.p1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("p2",s.p2));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("k3",s.k3));
    return new MessageElementStructure("com.robotraconteur.imaging.camerainfo.PlumbBobDistortionInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PlumbBobDistortionInfo s=new PlumbBobDistortionInfo();
    s.k1 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"k1")));
    s.k2 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"k2")));
    s.p1 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"p1")));
    s.p2 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"p2")));
    s.k3 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"k3")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class CameraCalibration_stub : IStructureStub {
    public CameraCalibration_stub(com__robotraconteur__imaging__camerainfoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    CameraCalibration s = (CameraCalibration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometryi.Size2D>(rr_node, rr_context, "image_size",ref s.image_size));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "distortion_info",s.distortion_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "K",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.K,9,new uint[] {3, 3})));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_device",s.parent_device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "camera_pose",s.camera_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.imaging.camerainfo.CameraCalibration",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    CameraCalibration s=new CameraCalibration();
    s.image_size =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometryi.Size2D>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"image_size"));
    s.distortion_info =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"distortion_info"));
    s.K =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"K")),9,new uint[] {3, 3});
    s.parent_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_device"));
    s.camera_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"camera_pose"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class CameraInfo_stub : IStructureStub {
    public CameraInfo_stub(com__robotraconteur__imaging__camerainfoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    CameraInfo s = (CameraInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "calibration",s.calibration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.imaging.camerainfo.CameraInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    CameraInfo s=new CameraInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.calibration =MessageElementUtil.UnpackStructure<CameraCalibration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"calibration"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class MultiCameraInfo_stub : IStructureStub {
    public MultiCameraInfo_stub(com__robotraconteur__imaging__camerainfoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    MultiCameraInfo s = (MultiCameraInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<CameraInfo>(rr_node, rr_context, "camera_info_all",s.camera_info_all));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.imaging.camerainfo.MultiCameraInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    MultiCameraInfo s=new MultiCameraInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.camera_info_all =MessageElementUtil.UnpackList<CameraInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"camera_info_all"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.imaging
{
[RobotRaconteurServiceObjectInterface("com.robotraconteur.imaging.Camera")]
public interface Camera
{
    Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken));
    Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken));
    Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken));
    Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken));
    Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken));
    Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.image.Image> capture_frame(CancellationToken rr_cancel=default(CancellationToken));
    Task trigger(CancellationToken rr_cancel=default(CancellationToken));
    Task start_streaming(CancellationToken rr_cancel=default(CancellationToken));
    Task stop_streaming(CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.image.Image> frame_stream{ get; set; }
    Pipe<com.robotraconteur.image.CompressedImage> preview_stream{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.imaging.MultiCamera")]
public interface MultiCamera
{
    Task<Dictionary<int,string>> get_camera_names(CancellationToken cancel=default(CancellationToken));
    Task set_camera_names(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken));
    Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.imaging.camerainfo.MultiCameraInfo> get_multicamera_info(CancellationToken cancel=default(CancellationToken));
    Task set_multicamera_info(com.robotraconteur.imaging.camerainfo.MultiCameraInfo value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,com.robotraconteur.image.Image>> capture_frame_all(CancellationToken rr_cancel=default(CancellationToken));
    Task trigger_all(CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Task<Camera> get_cameras(int ind, CancellationToken rr_cancel=default(CancellationToken));
    Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all{ get; set; }
    Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.imaging.ImagePartCamera")]
public interface ImagePartCamera
{
    Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken));
    Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken));
    Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken));
    Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken));
    Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken));
    Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken));
    Task<Generator2<com.robotraconteur.image.ImagePart>> capture_frame(CancellationToken rr_cancel=default(CancellationToken));
    Task trigger(CancellationToken rr_cancel=default(CancellationToken));
    Task start_streaming(CancellationToken rr_cancel=default(CancellationToken));
    Task stop_streaming(CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.image.CompressedImage> preview_stream{ get; set; }
}

public static class com__robotraconteur__imagingConstants  {
}
    public enum TriggerMode
    {
    unknown = 0,
    software = 1,
    continuous = 2,
    external = 3,
    aux1 = 4,
    aux2 = 5,
    aux3 = 6,
    aux4 = 7
    };
    public enum Capabilities
    {
    unknown = 0,
    still = 0x1,
    stream = 0x2,
    preview = 0x4,
    software_trigger = 0x10,
    continuous_trigger = 0x20,
    external_trigger = 0x40,
    aux_trigger = 0x80
    };
}

namespace com.robotraconteur.imaging
{
public class com__robotraconteur__imagingFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imaging\n\nstdver 0.9\n\nimport com.robotraconteur.image\nimport com.robotraconteur.imaging.camerainfo\nimport com.robotraconteur.param\n\nusing com.robotraconteur.image.Image\nusing com.robotraconteur.image.ImagePart\nusing com.robotraconteur.image.CompressedImage\nusing com.robotraconteur.imaging.camerainfo.CameraInfo\nusing com.robotraconteur.imaging.camerainfo.MultiCameraInfo\nusing com.robotraconteur.param.ParameterInfo\n\nenum TriggerMode\nunknown = 0,\nsoftware,\ncontinuous,\nexternal,\naux1,\naux2,\naux3,\naux4\nend\n\nenum Capabilities\nunknown = 0,\nstill = 0x1,\nstream = 0x2,\npreview = 0x4,\nsoftware_trigger = 0x10,\ncontinuous_trigger = 0x20,\nexternal_trigger = 0x40,\naux_trigger = 0x80\nend\n\nobject Camera\nproperty uint32 capabilities [readonly]\nfunction Image capture_frame()\nproperty TriggerMode trigger_mode [nolockread]\nfunction void trigger()\nfunction void start_streaming()\nfunction void stop_streaming()\npipe Image frame_stream [readonly]\npipe CompressedImage preview_stream [readonly,nolock]\nproperty ParameterInfo{string} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty CameraInfo camera_info [readonly,nolock]\nend\n\nobject MultiCamera\nproperty string{int32} camera_names [readonly,nolock]\nobjref Camera{int32} cameras\nfunction Image{int32} capture_frame_all()\nfunction void trigger_all()\npipe Image{int32} frame_stream_all [readonly]\npipe CompressedImage{int32} preview_stream_all [readonly,nolock]\nproperty ParameterInfo{string} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty MultiCameraInfo multicamera_info [readonly,nolock]\nend\n\nobject ImagePartCamera\nproperty uint32 capabilities [readonly]\nfunction ImagePart{generator} capture_frame()\nproperty TriggerMode trigger_mode [nolockread]\nfunction void trigger()\nfunction void start_streaming()\nfunction void stop_streaming()\npipe CompressedImage preview_stream [readonly,nolock]\nproperty ParameterInfo{string} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty CameraInfo camera_info [readonly,nolock]\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imaging";}
    public com__robotraconteur__imagingFactory() : this(null,null) {}
    public com__robotraconteur__imagingFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Camera":
    return new Camera_stub(path, context);
    case "MultiCamera":
    return new MultiCamera_stub(path, context);
    case "ImagePartCamera":
    return new ImagePartCamera_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Camera":
    return new Camera_skel(path,(Camera)obj,context);
    case "MultiCamera":
    return new MultiCamera_skel(path,(MultiCamera)obj,context);
    case "ImagePartCamera":
    return new ImagePartCamera_skel(path,(ImagePartCamera)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Camera_stub : ServiceStub , Camera {
    private Pipe<com.robotraconteur.image.Image> rr_frame_stream;
    private Pipe<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    public Camera_stub(string path, ClientContext c) : base(path, c) {
    rr_frame_stream=new PipeClient<com.robotraconteur.image.Image>("frame_stream", this);
    rr_preview_stream=new PipeClient<com.robotraconteur.image.CompressedImage>("preview_stream", this);
    }
    public async Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "capabilities");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"capabilities");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "trigger_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<TriggerMode>(me);
        }
    public async Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"trigger_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<TriggerMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "param_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me);
        }
    public async Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"param_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "camera_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_node, rr_context, me);
        }
    public async Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"camera_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.image.Image> capture_frame(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_frame");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task trigger(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"trigger");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task start_streaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"start_streaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task stop_streaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"stop_streaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.Image> frame_stream {
    get { return rr_frame_stream;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rr_preview_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "frame_stream":
    this.rr_frame_stream.PipePacketReceived(m);
    break;
    case "preview_stream":
    this.rr_preview_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class MultiCamera_stub : ServiceStub , MultiCamera {
    private Pipe<Dictionary<int,com.robotraconteur.image.Image>> rr_frame_stream_all;
    private Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> rr_preview_stream_all;
    public MultiCamera_stub(string path, ClientContext c) : base(path, c) {
    rr_frame_stream_all=new PipeClient<Dictionary<int,com.robotraconteur.image.Image>>("frame_stream_all", this);
    rr_preview_stream_all=new PipeClient<Dictionary<int,com.robotraconteur.image.CompressedImage>>("preview_stream_all", this);
    }
    public async Task<Dictionary<int,string>> get_camera_names(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "camera_names");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,string>(rr_node, rr_context, me);
        }
    public async Task set_camera_names(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"camera_names");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "param_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me);
        }
    public async Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"param_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.imaging.camerainfo.MultiCameraInfo> get_multicamera_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "multicamera_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.MultiCameraInfo>(rr_node, rr_context, me);
        }
    public async Task set_multicamera_info(com.robotraconteur.imaging.camerainfo.MultiCameraInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"multicamera_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<int,com.robotraconteur.image.Image>> capture_frame_all(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_frame_all");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackMap<int,com.robotraconteur.image.Image>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task trigger_all(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"trigger_all");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<Camera> get_cameras(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (Camera)await FindObjRefTyped("cameras",ind.ToString(),"com.robotraconteur.imaging.Camera",cancel);
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all {
    get { return rr_frame_stream_all;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all {
    get { return rr_preview_stream_all;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "frame_stream_all":
    this.rr_frame_stream_all.PipePacketReceived(m);
    break;
    case "preview_stream_all":
    this.rr_preview_stream_all.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ImagePartCamera_stub : ServiceStub , ImagePartCamera {
    private Pipe<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    public ImagePartCamera_stub(string path, ClientContext c) : base(path, c) {
    rr_preview_stream=new PipeClient<com.robotraconteur.image.CompressedImage>("preview_stream", this);
    }
    public async Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "capabilities");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"capabilities");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "trigger_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<TriggerMode>(me);
        }
    public async Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"trigger_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<TriggerMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "param_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me);
        }
    public async Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"param_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "camera_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_node, rr_context, me);
        }
    public async Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"camera_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Generator2<com.robotraconteur.image.ImagePart>> capture_frame(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"capture_frame");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<com.robotraconteur.image.ImagePart>("capture_frame",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task trigger(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"trigger");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task start_streaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"start_streaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task stop_streaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"stop_streaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rr_preview_stream;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "preview_stream":
    this.rr_preview_stream.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Camera_skel : ServiceSkel {
    protected Camera obj;
    public Camera_skel(string p,Camera o,ServerContext c) : base(p,o,c) { obj=(Camera)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "capabilities":
    {
    uint ret=await obj.get_capabilities();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "trigger_mode":
    {
    TriggerMode ret=await obj.get_trigger_mode();
    mr.AddElement(MessageElementUtil.PackEnum<TriggerMode>("value",ret));
    break;
    }
    case "param_info":
    {
    Dictionary<string,com.robotraconteur.param.ParameterInfo> ret=await obj.get_param_info();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    case "camera_info":
    {
    com.robotraconteur.imaging.camerainfo.CameraInfo ret=await obj.get_camera_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "capabilities":
    {
    await obj.set_capabilities((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "trigger_mode":
    {
    await obj.set_trigger_mode(MessageElementUtil.UnpackEnum<TriggerMode>(me));
    break;
    }
    case "param_info":
    {
    await obj.set_param_info(MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me));
    break;
    }
    case "camera_info":
    {
    await obj.set_camera_info(MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_frame":
    {
    com.robotraconteur.image.Image rr_ret=await this.obj.capture_frame(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "trigger":
    {
    await this.obj.trigger(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "start_streaming":
    {
    await this.obj.start_streaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "stop_streaming":
    {
    await this.obj.stop_streaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.image.Image> rr_frame_stream;
    private PipeServer<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Camera castobj=(Camera)o;
    this.rr_frame_stream=new PipeServer<com.robotraconteur.image.Image>("frame_stream",this);
    this.rr_preview_stream=new PipeServer<com.robotraconteur.image.CompressedImage>("preview_stream",this);
    castobj.frame_stream=this.rr_frame_stream;
    castobj.preview_stream=this.rr_preview_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "frame_stream":
    return await this.rr_frame_stream.PipeCommand(m,e);
    case "preview_stream":
    return await this.rr_preview_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "frame_stream":
    this.rr_frame_stream.PipePacketReceived(m,e);
    break;
    case "preview_stream":
    this.rr_preview_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "trigger_mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "preview_stream") return true;
    if (m.MemberName == "camera_info") return true;
    return false;
    }
}
public class MultiCamera_skel : ServiceSkel {
    protected MultiCamera obj;
    public MultiCamera_skel(string p,MultiCamera o,ServerContext c) : base(p,o,c) { obj=(MultiCamera)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "camera_names":
    {
    Dictionary<int,string> ret=await obj.get_camera_names();
    mr.AddElement(MessageElementUtil.PackMapType<int,string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "param_info":
    {
    Dictionary<string,com.robotraconteur.param.ParameterInfo> ret=await obj.get_param_info();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    case "multicamera_info":
    {
    com.robotraconteur.imaging.camerainfo.MultiCameraInfo ret=await obj.get_multicamera_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "camera_names":
    {
    await obj.set_camera_names(MessageElementUtil.UnpackMap<int,string>(rr_node, rr_context, me));
    break;
    }
    case "param_info":
    {
    await obj.set_param_info(MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me));
    break;
    }
    case "multicamera_info":
    {
    await obj.set_multicamera_info(MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.MultiCameraInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_frame_all":
    {
    Dictionary<int,com.robotraconteur.image.Image> rr_ret=await this.obj.capture_frame_all(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackMapType<int,com.robotraconteur.image.Image>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "trigger_all":
    {
    await this.obj.trigger_all(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "cameras": {
    return await obj.get_cameras(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<Dictionary<int,com.robotraconteur.image.Image>> rr_frame_stream_all;
    private PipeServer<Dictionary<int,com.robotraconteur.image.CompressedImage>> rr_preview_stream_all;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    MultiCamera castobj=(MultiCamera)o;
    this.rr_frame_stream_all=new PipeServer<Dictionary<int,com.robotraconteur.image.Image>>("frame_stream_all",this);
    this.rr_preview_stream_all=new PipeServer<Dictionary<int,com.robotraconteur.image.CompressedImage>>("preview_stream_all",this);
    castobj.frame_stream_all=this.rr_frame_stream_all;
    castobj.preview_stream_all=this.rr_preview_stream_all;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "frame_stream_all":
    return await this.rr_frame_stream_all.PipeCommand(m,e);
    case "preview_stream_all":
    return await this.rr_preview_stream_all.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "frame_stream_all":
    this.rr_frame_stream_all.PipePacketReceived(m,e);
    break;
    case "preview_stream_all":
    this.rr_preview_stream_all.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "camera_names") return true;
    if (m.MemberName == "preview_stream_all") return true;
    if (m.MemberName == "multicamera_info") return true;
    return false;
    }
}
public class ImagePartCamera_skel : ServiceSkel {
    protected ImagePartCamera obj;
    public ImagePartCamera_skel(string p,ImagePartCamera o,ServerContext c) : base(p,o,c) { obj=(ImagePartCamera)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "capabilities":
    {
    uint ret=await obj.get_capabilities();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "trigger_mode":
    {
    TriggerMode ret=await obj.get_trigger_mode();
    mr.AddElement(MessageElementUtil.PackEnum<TriggerMode>("value",ret));
    break;
    }
    case "param_info":
    {
    Dictionary<string,com.robotraconteur.param.ParameterInfo> ret=await obj.get_param_info();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    case "camera_info":
    {
    com.robotraconteur.imaging.camerainfo.CameraInfo ret=await obj.get_camera_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "capabilities":
    {
    await obj.set_capabilities((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "trigger_mode":
    {
    await obj.set_trigger_mode(MessageElementUtil.UnpackEnum<TriggerMode>(me));
    break;
    }
    case "param_info":
    {
    await obj.set_param_info(MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, me));
    break;
    }
    case "camera_info":
    {
    await obj.set_camera_info(MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "capture_frame":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<com.robotraconteur.image.ImagePart> rr_ret=await this.obj.capture_frame();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<com.robotraconteur.image.ImagePart>(rr_ret,"capture_frame",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "trigger":
    {
    await this.obj.trigger(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "start_streaming":
    {
    await this.obj.start_streaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "stop_streaming":
    {
    await this.obj.stop_streaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ImagePartCamera castobj=(ImagePartCamera)o;
    this.rr_preview_stream=new PipeServer<com.robotraconteur.image.CompressedImage>("preview_stream",this);
    castobj.preview_stream=this.rr_preview_stream;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "preview_stream":
    return await this.rr_preview_stream.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "preview_stream":
    this.rr_preview_stream.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "trigger_mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "preview_stream") return true;
    if (m.MemberName == "camera_info") return true;
    return false;
    }
}
public class Camera_default_impl : Camera{
    protected PipeBroadcaster<com.robotraconteur.image.Image> rrvar_frame_stream;
    protected PipeBroadcaster<com.robotraconteur.image.CompressedImage> rrvar_preview_stream;
    public virtual Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.image.Image> capture_frame(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task trigger(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task start_streaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task stop_streaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.image.Image> frame_stream {
    get { return rrvar_frame_stream.Pipe;  }
    set {
    if (rrvar_frame_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream= new PipeBroadcaster<com.robotraconteur.image.Image>(value);
    }
    }
    public virtual Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rrvar_preview_stream.Pipe;  }
    set {
    if (rrvar_preview_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream= new PipeBroadcaster<com.robotraconteur.image.CompressedImage>(value);
    }
    }
}
public class MultiCamera_default_impl : MultiCamera{
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>> rrvar_frame_stream_all;
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>> rrvar_preview_stream_all;
    public virtual Task<Dictionary<int,string>> get_camera_names(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_camera_names(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.imaging.camerainfo.MultiCameraInfo> get_multicamera_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_multicamera_info(com.robotraconteur.imaging.camerainfo.MultiCameraInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,com.robotraconteur.image.Image>> capture_frame_all(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task trigger_all(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Camera> get_cameras(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all {
    get { return rrvar_frame_stream_all.Pipe;  }
    set {
    if (rrvar_frame_stream_all!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream_all= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>>(value);
    }
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all {
    get { return rrvar_preview_stream_all.Pipe;  }
    set {
    if (rrvar_preview_stream_all!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream_all= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>>(value);
    }
    }
}
public class ImagePartCamera_default_impl : ImagePartCamera{
    protected PipeBroadcaster<com.robotraconteur.image.CompressedImage> rrvar_preview_stream;
    public virtual Task<uint> get_capabilities(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_capabilities(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<TriggerMode> get_trigger_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_trigger_mode(TriggerMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.param.ParameterInfo>> get_param_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_param_info(Dictionary<string,com.robotraconteur.param.ParameterInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.imaging.camerainfo.CameraInfo> get_camera_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_camera_info(com.robotraconteur.imaging.camerainfo.CameraInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<com.robotraconteur.image.ImagePart>> capture_frame(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task trigger(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task start_streaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task stop_streaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rrvar_preview_stream.Pipe;  }
    set {
    if (rrvar_preview_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream= new PipeBroadcaster<com.robotraconteur.image.CompressedImage>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.imu
{
[RobotRaconteurServiceStruct("com.robotraconteur.imu.ImuState")]
public class ImuState
{
    public com.robotraconteur.geometry.Vector3 angular_velocity;
    public com.robotraconteur.geometry.Vector3 linear_acceleration;
    public com.robotraconteur.geometry.Quaternion orientation;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.imu.ImuSensor")]
public interface ImuSensor : com.robotraconteur.sensor.Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.sensor.SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<ImuState> imu_state { get; set; }
}

}

namespace com.robotraconteur.imu
{
public class com__robotraconteur__imuFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imu\n\nstdver 0.9\n\nimport com.robotraconteur.sensor\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.sensor.Sensor\nusing com.robotraconteur.sensor.SensorInfo\nusing com.robotraconteur.sensor.SensorData\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Quaternion\n\nstruct ImuState\nfield Vector3 angular_velocity\nfield Vector3 linear_acceleration\nfield Quaternion orientation\nend struct\n\nobject ImuSensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire ImuState imu_state [readonly,nolock]\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imu";}
    public ImuState_stub ImuState_stubentry;
    public com__robotraconteur__imuFactory() : this(null,null) {}
    public com__robotraconteur__imuFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ImuState_stubentry=new ImuState_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ImuState")
    return ImuState_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ImuSensor":
    return new ImuSensor_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ImuSensor":
    return new ImuSensor_skel(path,(ImuSensor)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ImuState_stub : IStructureStub {
    public ImuState_stub(com__robotraconteur__imuFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__imuFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ImuState s = (ImuState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "angular_velocity",ref s.angular_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "linear_acceleration",ref s.linear_acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Quaternion>(rr_node, rr_context, "orientation",ref s.orientation));
    return new MessageElementStructure("com.robotraconteur.imu.ImuState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ImuState s=new ImuState();
    s.angular_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"angular_velocity"));
    s.linear_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"linear_acceleration"));
    s.orientation =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Quaternion>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"orientation"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ImuSensor_stub : ServiceStub , ImuSensor {
    private Pipe<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<ImuState> rr_imu_state;
    public ImuSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<com.robotraconteur.sensor.SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_imu_state=new WireClient<ImuState>("imu_state", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ImuState> imu_state {
    get { return rr_imu_state;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "imu_state":
    this.rr_imu_state.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class ImuSensor_skel : ServiceSkel {
    protected ImuSensor obj;
    public ImuSensor_skel(string p,ImuSensor o,ServerContext c) : base(p,o,c) { obj=(ImuSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    com.robotraconteur.sensor.SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<ImuState> rr_imu_state;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ImuSensor castobj=(ImuSensor)o;
    this.rr_sensor_data=new PipeServer<com.robotraconteur.sensor.SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_imu_state=new WireServer<ImuState>("imu_state",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.imu_state=this.rr_imu_state;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "imu_state":
    return await this.rr_imu_state.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "imu_state":
    this.rr_imu_state.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "imu_state") return true;
    return false;
    }
}
public class ImuSensor_default_impl : ImuSensor{
    protected PipeBroadcaster<com.robotraconteur.sensor.SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<ImuState> rrvar_imu_state;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.sensor.SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(com.robotraconteur.sensor.SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<com.robotraconteur.sensor.SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<ImuState> imu_state {
    get { return rrvar_imu_state.Wire;  }
    set {
    if (rrvar_imu_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_imu_state= new WireBroadcaster<ImuState>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.laserscan
{
[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScanInfo")]
public class LaserScanInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public double angle_min;
    public double angle_max;
    public double angle_increment;
    public uint angle_count;
    public double vertical_angle_min;
    public double vertical_angle_max;
    public double vertical_angle_increment;
    public uint vertical_angle_count;
    public double time_increment;
    public double scan_time;
    public double range_min;
    public double range_max;
    public double range_resolution;
}

[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScan")]
public class LaserScan
{
    public LaserScanInfo scan_info;
    public double[] ranges;
    public double[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScanInfof")]
public class LaserScanInfof
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public float angle_min;
    public float angle_max;
    public float angle_increment;
    public uint angle_count;
    public float vertical_angle_min;
    public float vertical_angle_max;
    public float vertical_angle_increment;
    public uint vertical_angle_count;
    public float time_increment;
    public float scan_time;
    public float range_min;
    public float range_max;
    public float range_resolution;
}

[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScanf")]
public class LaserScanf
{
    public LaserScanInfof scan_info;
    public float[] ranges;
    public float[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScanPart")]
public class LaserScanPart
{
    public LaserScanInfo scan_info;
    public uint data_offset;
    public uint data_total_len;
    public double[] ranges;
    public double[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.laserscan.LaserScanPartf")]
public class LaserScanPartf
{
    public LaserScanInfof scan_info;
    public uint data_offset;
    public uint data_total_len;
    public float[] ranges;
    public float[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.laserscan
{
public class com__robotraconteur__laserscanFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.laserscan\n\nstdver 0.9\n\nimport com.robotraconteur.image\nimport com.robotraconteur.sensordata\n\nusing com.robotraconteur.image.PixelRGB\nusing com.robotraconteur.sensordata.SensorDataHeader\n\nstruct LaserScanInfo\nfield SensorDataHeader data_header\nfield double angle_min\nfield double angle_max\nfield double angle_increment\nfield uint32 angle_count\nfield double vertical_angle_min\nfield double vertical_angle_max\nfield double vertical_angle_increment\nfield uint32 vertical_angle_count\nfield double time_increment\nfield double scan_time\nfield double range_min\nfield double range_max\nfield double range_resolution\nend\n\nstruct LaserScan\nfield LaserScanInfo scan_info\nfield double[] ranges\nfield double[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanInfof\nfield SensorDataHeader data_header\nfield single angle_min\nfield single angle_max\nfield single angle_increment\nfield uint32 angle_count\nfield single vertical_angle_min\nfield single vertical_angle_max\nfield single vertical_angle_increment\nfield uint32 vertical_angle_count\nfield single time_increment\nfield single scan_time\nfield single range_min\nfield single range_max\nfield single range_resolution\nend\n\nstruct LaserScanf\nfield LaserScanInfof scan_info\nfield single[] ranges\nfield single[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanPart\nfield LaserScanInfo scan_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield double[] ranges\nfield double[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanPartf\nfield LaserScanInfof scan_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield single[] ranges\nfield single[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.laserscan";}
    public LaserScanInfo_stub LaserScanInfo_stubentry;
    public LaserScan_stub LaserScan_stubentry;
    public LaserScanInfof_stub LaserScanInfof_stubentry;
    public LaserScanf_stub LaserScanf_stubentry;
    public LaserScanPart_stub LaserScanPart_stubentry;
    public LaserScanPartf_stub LaserScanPartf_stubentry;
    public com__robotraconteur__laserscanFactory() : this(null,null) {}
    public com__robotraconteur__laserscanFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    LaserScanInfo_stubentry=new LaserScanInfo_stub(this,this.node,this.context);
    LaserScan_stubentry=new LaserScan_stub(this,this.node,this.context);
    LaserScanInfof_stubentry=new LaserScanInfof_stub(this,this.node,this.context);
    LaserScanf_stubentry=new LaserScanf_stub(this,this.node,this.context);
    LaserScanPart_stubentry=new LaserScanPart_stub(this,this.node,this.context);
    LaserScanPartf_stubentry=new LaserScanPartf_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LaserScanInfo")
    return LaserScanInfo_stubentry;
    if (objecttype=="LaserScan")
    return LaserScan_stubentry;
    if (objecttype=="LaserScanInfof")
    return LaserScanInfof_stubentry;
    if (objecttype=="LaserScanf")
    return LaserScanf_stubentry;
    if (objecttype=="LaserScanPart")
    return LaserScanPart_stubentry;
    if (objecttype=="LaserScanPartf")
    return LaserScanPartf_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LaserScanInfo_stub : IStructureStub {
    public LaserScanInfo_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScanInfo s = (LaserScanInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("angle_min",s.angle_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("angle_max",s.angle_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("angle_increment",s.angle_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("angle_count",s.angle_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("vertical_angle_min",s.vertical_angle_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("vertical_angle_max",s.vertical_angle_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("vertical_angle_increment",s.vertical_angle_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("vertical_angle_count",s.vertical_angle_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_increment",s.time_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("scan_time",s.scan_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("range_min",s.range_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("range_max",s.range_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("range_resolution",s.range_resolution));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScanInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScanInfo s=new LaserScanInfo();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.angle_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"angle_min")));
    s.angle_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"angle_max")));
    s.angle_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"angle_increment")));
    s.angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"angle_count")));
    s.vertical_angle_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"vertical_angle_min")));
    s.vertical_angle_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"vertical_angle_max")));
    s.vertical_angle_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"vertical_angle_increment")));
    s.vertical_angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"vertical_angle_count")));
    s.time_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_increment")));
    s.scan_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"scan_time")));
    s.range_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"range_min")));
    s.range_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"range_max")));
    s.range_resolution =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"range_resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScan_stub : IStructureStub {
    public LaserScan_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScan s = (LaserScan)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "scan_info",s.scan_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("ranges",s.ranges));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("intensities",s.intensities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, "color",s.color));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScan",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScan s=new LaserScan();
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"scan_info"));
    s.ranges =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(m.Elements,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScanInfof_stub : IStructureStub {
    public LaserScanInfof_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScanInfof s = (LaserScanInfof)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("angle_min",s.angle_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("angle_max",s.angle_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("angle_increment",s.angle_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("angle_count",s.angle_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("vertical_angle_min",s.vertical_angle_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("vertical_angle_max",s.vertical_angle_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("vertical_angle_increment",s.vertical_angle_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("vertical_angle_count",s.vertical_angle_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("time_increment",s.time_increment));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("scan_time",s.scan_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("range_min",s.range_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("range_max",s.range_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("range_resolution",s.range_resolution));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScanInfof",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScanInfof s=new LaserScanInfof();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.angle_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"angle_min")));
    s.angle_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"angle_max")));
    s.angle_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"angle_increment")));
    s.angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"angle_count")));
    s.vertical_angle_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"vertical_angle_min")));
    s.vertical_angle_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"vertical_angle_max")));
    s.vertical_angle_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"vertical_angle_increment")));
    s.vertical_angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"vertical_angle_count")));
    s.time_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"time_increment")));
    s.scan_time =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"scan_time")));
    s.range_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"range_min")));
    s.range_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"range_max")));
    s.range_resolution =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(m.Elements,"range_resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScanf_stub : IStructureStub {
    public LaserScanf_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScanf s = (LaserScanf)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "scan_info",s.scan_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("ranges",s.ranges));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("intensities",s.intensities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, "color",s.color));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScanf",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScanf s=new LaserScanf();
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfof>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"scan_info"));
    s.ranges =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(m.Elements,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(m.Elements,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(m.Elements,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScanPart_stub : IStructureStub {
    public LaserScanPart_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScanPart s = (LaserScanPart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "scan_info",s.scan_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("ranges",s.ranges));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("intensities",s.intensities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, "color",s.color));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScanPart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScanPart s=new LaserScanPart();
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"scan_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.ranges =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(m.Elements,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScanPartf_stub : IStructureStub {
    public LaserScanPartf_stub(com__robotraconteur__laserscanFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscanFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScanPartf s = (LaserScanPartf)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "scan_info",s.scan_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("ranges",s.ranges));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("intensities",s.intensities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, "color",s.color));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.laserscan.LaserScanPartf",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScanPartf s=new LaserScanPartf();
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfof>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"scan_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.ranges =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(m.Elements,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(m.Elements,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(m.Elements,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.laserscanner
{
[RobotRaconteurServiceStruct("com.robotraconteur.laserscanner.LaserScannerInfo")]
public class LaserScannerInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.laserscan.LaserScanInfof scanner_info;
    public double scan_rate;
    public Dictionary<string,com.robotraconteur.param.ParameterInfo> param_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.laserscanner.LaserScanner")]
public interface LaserScanner
{
    Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken));
    Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.laserscanner.LaserScanPartScanner")]
public interface LaserScanPartScanner
{
    Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken));
    Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data{ get; set; }
}

}

namespace com.robotraconteur.laserscanner
{
public class com__robotraconteur__laserscannerFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.laserscanner\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.laserscan\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.laserscan.LaserScanInfof as LaserScanInfo\nusing com.robotraconteur.laserscan.LaserScanf as LaserScan\nusing com.robotraconteur.laserscan.LaserScanPartf as LaserScanPart\n\nstruct LaserScannerInfo\nfield DeviceInfo device_info\nfield LaserScanInfo scanner_info\nfield double scan_rate\nfield ParameterInfo{string} param_info\nfield varvalue{string} extended\nend\n\nobject LaserScanner\nproperty LaserScannerInfo scanner_info [readonly,nolock]\nproperty bool active\npipe LaserScan laser_scan_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject LaserScanPartScanner\nproperty LaserScannerInfo scanner_info [readonly,nolock]\nproperty bool active\npipe LaserScanPart laser_scan_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.laserscanner";}
    public LaserScannerInfo_stub LaserScannerInfo_stubentry;
    public com__robotraconteur__laserscannerFactory() : this(null,null) {}
    public com__robotraconteur__laserscannerFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    LaserScannerInfo_stubentry=new LaserScannerInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LaserScannerInfo")
    return LaserScannerInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "LaserScanner":
    return new LaserScanner_stub(path, context);
    case "LaserScanPartScanner":
    return new LaserScanPartScanner_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "LaserScanner":
    return new LaserScanner_skel(path,(LaserScanner)obj,context);
    case "LaserScanPartScanner":
    return new LaserScanPartScanner_skel(path,(LaserScanPartScanner)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LaserScannerInfo_stub : IStructureStub {
    public LaserScannerInfo_stub(com__robotraconteur__laserscannerFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__laserscannerFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LaserScannerInfo s = (LaserScannerInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "scanner_info",s.scanner_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("scan_rate",s.scan_rate));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "param_info",s.param_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.laserscanner.LaserScannerInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LaserScannerInfo s=new LaserScannerInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.scanner_info =MessageElementUtil.UnpackStructure<com.robotraconteur.laserscan.LaserScanInfof>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"scanner_info"));
    s.scan_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"scan_rate")));
    s.param_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"param_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class LaserScanner_stub : ServiceStub , LaserScanner {
    private Pipe<com.robotraconteur.laserscan.LaserScanf> rr_laser_scan_sensor_data;
    public LaserScanner_stub(string path, ClientContext c) : base(path, c) {
    rr_laser_scan_sensor_data=new PipeClient<com.robotraconteur.laserscan.LaserScanf>("laser_scan_sensor_data", this);
    }
    public async Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scanner_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_node, rr_context, me);
        }
    public async Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scanner_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data {
    get { return rr_laser_scan_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "laser_scan_sensor_data":
    this.rr_laser_scan_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class LaserScanPartScanner_stub : ServiceStub , LaserScanPartScanner {
    private Pipe<com.robotraconteur.laserscan.LaserScanPartf> rr_laser_scan_sensor_data;
    public LaserScanPartScanner_stub(string path, ClientContext c) : base(path, c) {
    rr_laser_scan_sensor_data=new PipeClient<com.robotraconteur.laserscan.LaserScanPartf>("laser_scan_sensor_data", this);
    }
    public async Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "scanner_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_node, rr_context, me);
        }
    public async Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"scanner_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data {
    get { return rr_laser_scan_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "laser_scan_sensor_data":
    this.rr_laser_scan_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class LaserScanner_skel : ServiceSkel {
    protected LaserScanner obj;
    public LaserScanner_skel(string p,LaserScanner o,ServerContext c) : base(p,o,c) { obj=(LaserScanner)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "scanner_info":
    {
    LaserScannerInfo ret=await obj.get_scanner_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "scanner_info":
    {
    await obj.set_scanner_info(MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.laserscan.LaserScanf> rr_laser_scan_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    LaserScanner castobj=(LaserScanner)o;
    this.rr_laser_scan_sensor_data=new PipeServer<com.robotraconteur.laserscan.LaserScanf>("laser_scan_sensor_data",this);
    castobj.laser_scan_sensor_data=this.rr_laser_scan_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "laser_scan_sensor_data":
    return await this.rr_laser_scan_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "laser_scan_sensor_data":
    this.rr_laser_scan_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "scanner_info") return true;
    return false;
    }
}
public class LaserScanPartScanner_skel : ServiceSkel {
    protected LaserScanPartScanner obj;
    public LaserScanPartScanner_skel(string p,LaserScanPartScanner o,ServerContext c) : base(p,o,c) { obj=(LaserScanPartScanner)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "scanner_info":
    {
    LaserScannerInfo ret=await obj.get_scanner_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "scanner_info":
    {
    await obj.set_scanner_info(MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<com.robotraconteur.laserscan.LaserScanPartf> rr_laser_scan_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    LaserScanPartScanner castobj=(LaserScanPartScanner)o;
    this.rr_laser_scan_sensor_data=new PipeServer<com.robotraconteur.laserscan.LaserScanPartf>("laser_scan_sensor_data",this);
    castobj.laser_scan_sensor_data=this.rr_laser_scan_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "laser_scan_sensor_data":
    return await this.rr_laser_scan_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "laser_scan_sensor_data":
    this.rr_laser_scan_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "scanner_info") return true;
    return false;
    }
}
public class LaserScanner_default_impl : LaserScanner{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScanf> rrvar_laser_scan_sensor_data;
    public virtual Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data {
    get { return rrvar_laser_scan_sensor_data.Pipe;  }
    set {
    if (rrvar_laser_scan_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_laser_scan_sensor_data= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScanf>(value);
    }
    }
}
public class LaserScanPartScanner_default_impl : LaserScanPartScanner{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScanPartf> rrvar_laser_scan_sensor_data;
    public virtual Task<LaserScannerInfo> get_scanner_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_scanner_info(LaserScannerInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data {
    get { return rrvar_laser_scan_sensor_data.Pipe;  }
    set {
    if (rrvar_laser_scan_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_laser_scan_sensor_data= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScanPartf>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.lighting
{
[RobotRaconteurServiceStruct("com.robotraconteur.lighting.LightInfo")]
public class LightInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public double max_lumens;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.lighting.Light")]
public interface Light
{
    Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken));
    Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken));
    Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.lighting.DimmableLight")]
public interface DimmableLight : Light
{
    Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken));
    Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken));
    Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_intensity(CancellationToken cancel=default(CancellationToken));
    Task set_intensity(double value, CancellationToken cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.lighting.ColorTunableLight")]
public interface ColorTunableLight : Light, DimmableLight
{
    Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken));
    Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken));
    Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_intensity(CancellationToken cancel=default(CancellationToken));
    Task set_intensity(double value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.color.ColorRGBA> get_color(CancellationToken cancel=default(CancellationToken));
    Task set_color(com.robotraconteur.color.ColorRGBA value, CancellationToken cancel=default(CancellationToken));
}

}

namespace com.robotraconteur.lighting
{
public class com__robotraconteur__lightingFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.lighting\n\nstdver 0.9\n\nimport com.robotraconteur.color\nimport com.robotraconteur.device\n\nusing com.robotraconteur.color.ColorRGBA\nusing com.robotraconteur.device.DeviceInfo\n\nstruct LightInfo\nfield DeviceInfo device_info\nfield double max_lumens\nfield varvalue{string} extended\nend\n\nobject Light\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\nend\n\nobject DimmableLight\nimplements Light\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\n# intensity 0.0 to 1.0\nproperty double intensity\nend\n\nobject ColorTunableLight\nimplements Light\nimplements DimmableLight\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\n# intensity 0.0 to 1.0\nproperty double intensity\nproperty ColorRGBA color\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.lighting";}
    public LightInfo_stub LightInfo_stubentry;
    public com__robotraconteur__lightingFactory() : this(null,null) {}
    public com__robotraconteur__lightingFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    LightInfo_stubentry=new LightInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LightInfo")
    return LightInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Light":
    return new Light_stub(path, context);
    case "DimmableLight":
    return new DimmableLight_stub(path, context);
    case "ColorTunableLight":
    return new ColorTunableLight_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Light":
    return new Light_skel(path,(Light)obj,context);
    case "DimmableLight":
    return new DimmableLight_skel(path,(DimmableLight)obj,context);
    case "ColorTunableLight":
    return new ColorTunableLight_skel(path,(ColorTunableLight)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LightInfo_stub : IStructureStub {
    public LightInfo_stub(com__robotraconteur__lightingFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__lightingFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    LightInfo s = (LightInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("max_lumens",s.max_lumens));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.lighting.LightInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    LightInfo s=new LightInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.max_lumens =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"max_lumens")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Light_stub : ServiceStub , Light {
    public Light_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "light_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me);
        }
    public async Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"light_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "on_off");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"on_off");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class DimmableLight_stub : ServiceStub , DimmableLight {
    public DimmableLight_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "light_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me);
        }
    public async Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"light_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "on_off");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"on_off");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_intensity(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "intensity");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_intensity(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"intensity");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ColorTunableLight_stub : ServiceStub , ColorTunableLight {
    public ColorTunableLight_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "light_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me);
        }
    public async Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"light_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "on_off");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"on_off");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_intensity(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "intensity");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_intensity(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"intensity");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<com.robotraconteur.color.ColorRGBA> get_color(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "color");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, me);
        }
    public async Task set_color(com.robotraconteur.color.ColorRGBA value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"color");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Light_skel : ServiceSkel {
    protected Light obj;
    public Light_skel(string p,Light o,ServerContext c) : base(p,o,c) { obj=(Light)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "light_info":
    {
    LightInfo ret=await obj.get_light_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "on_off":
    {
    bool ret=await obj.get_on_off();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "light_info":
    {
    await obj.set_light_info(MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me));
    break;
    }
    case "on_off":
    {
    await obj.set_on_off((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Light castobj=(Light)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "light_info") return true;
    return false;
    }
}
public class DimmableLight_skel : ServiceSkel {
    protected DimmableLight obj;
    public DimmableLight_skel(string p,DimmableLight o,ServerContext c) : base(p,o,c) { obj=(DimmableLight)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "light_info":
    {
    LightInfo ret=await obj.get_light_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "on_off":
    {
    bool ret=await obj.get_on_off();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "intensity":
    {
    double ret=await obj.get_intensity();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "light_info":
    {
    await obj.set_light_info(MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me));
    break;
    }
    case "on_off":
    {
    await obj.set_on_off((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "intensity":
    {
    await obj.set_intensity((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    DimmableLight castobj=(DimmableLight)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "light_info") return true;
    return false;
    }
}
public class ColorTunableLight_skel : ServiceSkel {
    protected ColorTunableLight obj;
    public ColorTunableLight_skel(string p,ColorTunableLight o,ServerContext c) : base(p,o,c) { obj=(ColorTunableLight)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "light_info":
    {
    LightInfo ret=await obj.get_light_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "on_off":
    {
    bool ret=await obj.get_on_off();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "intensity":
    {
    double ret=await obj.get_intensity();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "color":
    {
    com.robotraconteur.color.ColorRGBA ret=await obj.get_color();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, "value",ref ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "light_info":
    {
    await obj.set_light_info(MessageElementUtil.UnpackStructure<LightInfo>(rr_node, rr_context, me));
    break;
    }
    case "on_off":
    {
    await obj.set_on_off((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "intensity":
    {
    await obj.set_intensity((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "color":
    {
    await obj.set_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ColorTunableLight castobj=(ColorTunableLight)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "light_info") return true;
    return false;
    }
}
public class Light_default_impl : Light{
    public virtual Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class DimmableLight_default_impl : DimmableLight{
    public virtual Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_intensity(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_intensity(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class ColorTunableLight_default_impl : ColorTunableLight{
    public virtual Task<LightInfo> get_light_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_light_info(LightInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_on_off(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_on_off(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_intensity(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_intensity(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.color.ColorRGBA> get_color(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_color(com.robotraconteur.color.ColorRGBA value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.octree
{
[RobotRaconteurServiceStruct("com.robotraconteur.octree.OcTreeInfo")]
public class OcTreeInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public OcTreeEncoding encoding;
    public string id;
    public double resolution;
}

[RobotRaconteurServiceStruct("com.robotraconteur.octree.OcTree")]
public class OcTree
{
    public OcTreeInfo octree_info;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.octree.OcTreePart")]
public class OcTreePart
{
    public OcTreeInfo octree_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.octree.OcTreeResource")]
public class OcTreeResource
{
    public com.robotraconteur.resource.ResourceIdentifier octree_resource;
}

public static class com__robotraconteur__octreeConstants  {
}
    public enum OcTreeEncoding
    {
    unknown = 0,
    octomap_ot = 1,
    octomap_bt = 2,
    other = 3
    };
}

namespace com.robotraconteur.octree
{
public class com__robotraconteur__octreeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.octree\n\nstdver 0.9\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\n\nenum OcTreeEncoding\nunknown=0,\noctomap_ot,\noctomap_bt,\nother\nend\n\nstruct OcTreeInfo\nfield SensorDataHeader data_header\nfield OcTreeEncoding encoding\nfield string id\nfield double resolution\nend\n\nstruct OcTree\nfield OcTreeInfo octree_info\nfield uint8[] data\nend\n\nstruct OcTreePart\nfield OcTreeInfo octree_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data\nend\n\nstruct OcTreeResource\nfield ResourceIdentifier octree_resource\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.octree";}
    public OcTreeInfo_stub OcTreeInfo_stubentry;
    public OcTree_stub OcTree_stubentry;
    public OcTreePart_stub OcTreePart_stubentry;
    public OcTreeResource_stub OcTreeResource_stubentry;
    public com__robotraconteur__octreeFactory() : this(null,null) {}
    public com__robotraconteur__octreeFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    OcTreeInfo_stubentry=new OcTreeInfo_stub(this,this.node,this.context);
    OcTree_stubentry=new OcTree_stub(this,this.node,this.context);
    OcTreePart_stubentry=new OcTreePart_stub(this,this.node,this.context);
    OcTreeResource_stubentry=new OcTreeResource_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="OcTreeInfo")
    return OcTreeInfo_stubentry;
    if (objecttype=="OcTree")
    return OcTree_stubentry;
    if (objecttype=="OcTreePart")
    return OcTreePart_stubentry;
    if (objecttype=="OcTreeResource")
    return OcTreeResource_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class OcTreeInfo_stub : IStructureStub {
    public OcTreeInfo_stub(com__robotraconteur__octreeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__octreeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    OcTreeInfo s = (OcTreeInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<OcTreeEncoding>("encoding",s.encoding));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("id",s.id));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("resolution",s.resolution));
    return new MessageElementStructure("com.robotraconteur.octree.OcTreeInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    OcTreeInfo s=new OcTreeInfo();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.encoding =MessageElementUtil.UnpackEnum<OcTreeEncoding>(MessageElement.FindElement(m.Elements,"encoding"));
    s.id =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"id"));
    s.resolution =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class OcTree_stub : IStructureStub {
    public OcTree_stub(com__robotraconteur__octreeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__octreeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    OcTree s = (OcTree)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "octree_info",s.octree_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.octree.OcTree",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    OcTree s=new OcTree();
    s.octree_info =MessageElementUtil.UnpackStructure<OcTreeInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"octree_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class OcTreePart_stub : IStructureStub {
    public OcTreePart_stub(com__robotraconteur__octreeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__octreeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    OcTreePart s = (OcTreePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "octree_info",s.octree_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.octree.OcTreePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    OcTreePart s=new OcTreePart();
    s.octree_info =MessageElementUtil.UnpackStructure<OcTreeInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"octree_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"data_total_len")));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class OcTreeResource_stub : IStructureStub {
    public OcTreeResource_stub(com__robotraconteur__octreeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__octreeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    OcTreeResource s = (OcTreeResource)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "octree_resource",s.octree_resource));
    return new MessageElementStructure("com.robotraconteur.octree.OcTreeResource",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    OcTreeResource s=new OcTreeResource();
    s.octree_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"octree_resource"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.param
{
[RobotRaconteurServiceStruct("com.robotraconteur.param.ParameterInfo")]
public class ParameterInfo
{
    public com.robotraconteur.identifier.Identifier parameter_identifier;
    public com.robotraconteur.device.DeviceClass parameter_class;
    public com.robotraconteur.datatype.DataType data_type;
    public string user_description;
    public object default_value;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> enum_values;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.param
{
public class com__robotraconteur__paramFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.param\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceClass\n\nstruct ParameterInfo\nfield Identifier parameter_identifier\nfield DeviceClass parameter_class\nfield DataType data_type\nfield string user_description\nfield varvalue default_value\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} enum_values\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.param";}
    public ParameterInfo_stub ParameterInfo_stubentry;
    public com__robotraconteur__paramFactory() : this(null,null) {}
    public com__robotraconteur__paramFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ParameterInfo_stubentry=new ParameterInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ParameterInfo")
    return ParameterInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ParameterInfo_stub : IStructureStub {
    public ParameterInfo_stub(com__robotraconteur__paramFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__paramFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ParameterInfo s = (ParameterInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parameter_identifier",s.parameter_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parameter_class",s.parameter_class));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "default_value",s.default_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "min_value",s.min_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "max_value",s.max_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "enum_values",s.enum_values));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.param.ParameterInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ParameterInfo s=new ParameterInfo();
    s.parameter_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_identifier"));
    s.parameter_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_class"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.default_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"default_value"));
    s.min_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"max_value"));
    s.enum_values =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"enum_values"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.pid
{
[RobotRaconteurServiceStruct("com.robotraconteur.pid.PIDParam")]
public class PIDParam
{
    public double p;
    public double i;
    public double d;
    public double imax;
    public double imin;
    public double cmdMax;
    public double cmdMin;
}

}

namespace com.robotraconteur.pid
{
public class com__robotraconteur__pidFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pid\n\nstdver 0.9\n\nstruct PIDParam\nfield double p\nfield double i\nfield double d\nfield double imax\nfield double imin\nfield double cmdMax\nfield double cmdMin\nend struct\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pid";}
    public PIDParam_stub PIDParam_stubentry;
    public com__robotraconteur__pidFactory() : this(null,null) {}
    public com__robotraconteur__pidFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PIDParam_stubentry=new PIDParam_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PIDParam")
    return PIDParam_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PIDParam_stub : IStructureStub {
    public PIDParam_stub(com__robotraconteur__pidFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pidFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PIDParam s = (PIDParam)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("p",s.p));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("i",s.i));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("d",s.d));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("imax",s.imax));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("imin",s.imin));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("cmdMax",s.cmdMax));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("cmdMin",s.cmdMin));
    return new MessageElementStructure("com.robotraconteur.pid.PIDParam",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PIDParam s=new PIDParam();
    s.p =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"p")));
    s.i =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"i")));
    s.d =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"d")));
    s.imax =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"imax")));
    s.imin =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"imin")));
    s.cmdMax =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"cmdMax")));
    s.cmdMin =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"cmdMin")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.pointcloud
{
[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloud")]
public class PointCloud
{
    public uint width;
    public uint height;
    public bool is_dense;
    public com.robotraconteur.geometry.Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloudPart")]
public class PointCloudPart
{
    public uint width;
    public uint height;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public com.robotraconteur.geometry.Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloudf")]
public class PointCloudf
{
    public uint width;
    public uint height;
    public bool is_dense;
    public com.robotraconteur.geometryf.Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloudPartf")]
public class PointCloudPartf
{
    public uint width;
    public uint height;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public com.robotraconteur.geometryf.Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloud2")]
public class PointCloud2
{
    public uint width;
    public uint height;
    public bool is_dense;
    public PointCloud2Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloud2Part")]
public class PointCloud2Part
{
    public uint width;
    public uint height;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public PointCloud2Point[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloud2f")]
public class PointCloud2f
{
    public uint width;
    public uint height;
    public bool is_dense;
    public PointCloud2Pointf[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.PointCloud2Partf")]
public class PointCloud2Partf
{
    public uint width;
    public uint height;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public PointCloud2Pointf[] points;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.FreeformPointCloud")]
public class FreeformPointCloud
{
    public uint width;
    public uint height;
    public string encoding;
    public bool is_dense;
    public object points;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.FreeformPointCloudPart")]
public class FreeformPointCloudPart
{
    public uint width;
    public uint height;
    public string encoding;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public object points;
    public Dictionary<string,object> extended;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.pointcloud.PointCloud2Point",typeof(double), 12)]
public struct PointCloud2Point
{
    public com.robotraconteur.geometry.Point point;
    public double intensity;
    public com.robotraconteur.geometry.Vector3 normal;
    public com.robotraconteur.image.PixelRGBFloatPacked rgb;
    public double[] moment_invariants;
    public double channel;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.point.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.intensity;
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.normal.GetNumericArray(ref a4);
    var a7 = new ArraySegment<double>(a.Array, a.Offset + 7, 1);
    this.rgb.GetNumericArray(ref a7);
    Array.Copy(this.moment_invariants, 0, a.Array, a.Offset + 8, 3);
    a.Array[a.Offset + 11] = this.channel;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.point.AssignFromNumericArray(ref a0);
    this.intensity = a.Array[a.Offset + 3];
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.normal.AssignFromNumericArray(ref a4);
    var a7 = new ArraySegment<double>(a.Array, a.Offset + 7, 1);
    this.rgb.AssignFromNumericArray(ref a7);
    Array.Copy(a.Array, a.Offset + 8, this.moment_invariants, 0, 3);
    this.channel = a.Array[a.Offset + 11];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.pointcloud.PointCloud2Pointf",typeof(float), 12)]
public struct PointCloud2Pointf
{
    public com.robotraconteur.geometryf.Point point;
    public float intensity;
    public com.robotraconteur.geometryf.Vector3 normal;
    public com.robotraconteur.image.PixelRGBFloatPackedf rgb;
    public float[] moment_invariants;
    public float channel;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.point.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.intensity;
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.normal.GetNumericArray(ref a4);
    var a7 = new ArraySegment<float>(a.Array, a.Offset + 7, 1);
    this.rgb.GetNumericArray(ref a7);
    Array.Copy(this.moment_invariants, 0, a.Array, a.Offset + 8, 3);
    a.Array[a.Offset + 11] = this.channel;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> a)
    {
    if(a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<float>(a.Array, a.Offset + 0, 3);
    this.point.AssignFromNumericArray(ref a0);
    this.intensity = a.Array[a.Offset + 3];
    var a4 = new ArraySegment<float>(a.Array, a.Offset + 4, 3);
    this.normal.AssignFromNumericArray(ref a4);
    var a7 = new ArraySegment<float>(a.Array, a.Offset + 7, 1);
    this.rgb.AssignFromNumericArray(ref a7);
    Array.Copy(a.Array, a.Offset + 8, this.moment_invariants, 0, 3);
    this.channel = a.Array[a.Offset + 11];
    }
}

}

namespace com.robotraconteur.pointcloud
{
public class com__robotraconteur__pointcloudFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pointcloud\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.geometryf\nimport com.robotraconteur.image\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometryf.Point as Pointf\nusing com.robotraconteur.geometryf.Vector3 as Vector3f\nusing com.robotraconteur.image.PixelRGBFloatPacked\nusing com.robotraconteur.image.PixelRGBFloatPackedf\n\nstruct PointCloud\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield Point[] points\nend\n\nstruct PointCloudPart\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield Point[] points\nend\n\nstruct PointCloudf\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield Pointf[] points\nend\n\nstruct PointCloudPartf\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield Pointf[] points\nend\n\nnamedarray PointCloud2Point\nfield Point point\nfield double intensity\nfield Vector3 normal\nfield PixelRGBFloatPacked rgb\nfield double[3] moment_invariants\nfield double channel\nend\n\nstruct PointCloud2\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield PointCloud2Point[] points\nend\n\nstruct PointCloud2Part\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield PointCloud2Point[] points\nend\n\nnamedarray PointCloud2Pointf\nfield Pointf point\nfield single intensity\nfield Vector3f normal\nfield PixelRGBFloatPackedf rgb\nfield single[3] moment_invariants\nfield single channel\nend\n\nstruct PointCloud2f\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield PointCloud2Pointf[] points\nend\n\nstruct PointCloud2Partf\nfield uint32 width\nfield uint32 height\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield PointCloud2Pointf[] points\nend\n\nstruct FreeformPointCloud\nfield uint32 width\nfield uint32 height\nfield string encoding\nfield bool is_dense\nfield varvalue points\nfield varvalue{string} extended\nend\n\nstruct FreeformPointCloudPart\nfield uint32 width\nfield uint32 height\nfield string encoding\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield varvalue points\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pointcloud";}
    public PointCloud_stub PointCloud_stubentry;
    public PointCloudPart_stub PointCloudPart_stubentry;
    public PointCloudf_stub PointCloudf_stubentry;
    public PointCloudPartf_stub PointCloudPartf_stubentry;
    public PointCloud2_stub PointCloud2_stubentry;
    public PointCloud2Part_stub PointCloud2Part_stubentry;
    public PointCloud2f_stub PointCloud2f_stubentry;
    public PointCloud2Partf_stub PointCloud2Partf_stubentry;
    public FreeformPointCloud_stub FreeformPointCloud_stubentry;
    public FreeformPointCloudPart_stub FreeformPointCloudPart_stubentry;
    public PointCloud2Point_stub PointCloud2Point_stubentry;
    public PointCloud2Pointf_stub PointCloud2Pointf_stubentry;
    public com__robotraconteur__pointcloudFactory() : this(null,null) {}
    public com__robotraconteur__pointcloudFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PointCloud_stubentry=new PointCloud_stub(this,this.node,this.context);
    PointCloudPart_stubentry=new PointCloudPart_stub(this,this.node,this.context);
    PointCloudf_stubentry=new PointCloudf_stub(this,this.node,this.context);
    PointCloudPartf_stubentry=new PointCloudPartf_stub(this,this.node,this.context);
    PointCloud2_stubentry=new PointCloud2_stub(this,this.node,this.context);
    PointCloud2Part_stubentry=new PointCloud2Part_stub(this,this.node,this.context);
    PointCloud2f_stubentry=new PointCloud2f_stub(this,this.node,this.context);
    PointCloud2Partf_stubentry=new PointCloud2Partf_stub(this,this.node,this.context);
    FreeformPointCloud_stubentry=new FreeformPointCloud_stub(this,this.node,this.context);
    FreeformPointCloudPart_stubentry=new FreeformPointCloudPart_stub(this,this.node,this.context);
    PointCloud2Point_stubentry=new PointCloud2Point_stub();
    PointCloud2Pointf_stubentry=new PointCloud2Pointf_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PointCloud")
    return PointCloud_stubentry;
    if (objecttype=="PointCloudPart")
    return PointCloudPart_stubentry;
    if (objecttype=="PointCloudf")
    return PointCloudf_stubentry;
    if (objecttype=="PointCloudPartf")
    return PointCloudPartf_stubentry;
    if (objecttype=="PointCloud2")
    return PointCloud2_stubentry;
    if (objecttype=="PointCloud2Part")
    return PointCloud2Part_stubentry;
    if (objecttype=="PointCloud2f")
    return PointCloud2f_stubentry;
    if (objecttype=="PointCloud2Partf")
    return PointCloud2Partf_stubentry;
    if (objecttype=="FreeformPointCloud")
    return FreeformPointCloud_stubentry;
    if (objecttype=="FreeformPointCloudPart")
    return FreeformPointCloudPart_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="PointCloud2Point")
    return PointCloud2Point_stubentry;
    if (objecttype=="PointCloud2Pointf")
    return PointCloud2Pointf_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PointCloud_stub : IStructureStub {
    public PointCloud_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud s = (PointCloud)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloud",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud s=new PointCloud();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudPart_stub : IStructureStub {
    public PointCloudPart_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudPart s = (PointCloudPart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloudPart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudPart s=new PointCloudPart();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudf_stub : IStructureStub {
    public PointCloudf_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudf s = (PointCloudf)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometryf.Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloudf",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudf s=new PointCloudf();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometryf.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudPartf_stub : IStructureStub {
    public PointCloudPartf_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudPartf s = (PointCloudPartf)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometryf.Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloudPartf",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudPartf s=new PointCloudPartf();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometryf.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2_stub : IStructureStub {
    public PointCloud2_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2 s = (PointCloud2)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<PointCloud2Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloud2",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2 s=new PointCloud2();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2Part_stub : IStructureStub {
    public PointCloud2Part_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2Part s = (PointCloud2Part)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<PointCloud2Point>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloud2Part",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2Part s=new PointCloud2Part();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2f_stub : IStructureStub {
    public PointCloud2f_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2f s = (PointCloud2f)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<PointCloud2Pointf>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloud2f",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2f s=new PointCloud2f();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Pointf>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2Partf_stub : IStructureStub {
    public PointCloud2Partf_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2Partf s = (PointCloud2Partf)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<PointCloud2Pointf>(rr_node, rr_context, "points",s.points));
    return new MessageElementStructure("com.robotraconteur.pointcloud.PointCloud2Partf",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2Partf s=new PointCloud2Partf();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Pointf>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformPointCloud_stub : IStructureStub {
    public FreeformPointCloud_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformPointCloud s = (FreeformPointCloud)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "points",s.points));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.pointcloud.FreeformPointCloud",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformPointCloud s=new FreeformPointCloud();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"encoding"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformPointCloudPart_stub : IStructureStub {
    public FreeformPointCloudPart_stub(com__robotraconteur__pointcloudFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloudFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformPointCloudPart s = (FreeformPointCloudPart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "points",s.points));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.pointcloud.FreeformPointCloudPart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformPointCloudPart s=new FreeformPointCloudPart();
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"width")));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"height")));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"encoding"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"points_total_len")));
    s.points =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2Point_stub : NamedArrayStub<PointCloud2Point,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref PointCloud2Point s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Point GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new PointCloud2Point();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(PointCloud2Point[] s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Point[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    PointCloud2Point[] s = new PointCloud2Point[m.Length / 12];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.pointcloud.PointCloud2Point"; } }
}

public class PointCloud2Pointf_stub : NamedArrayStub<PointCloud2Pointf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref PointCloud2Pointf s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Pointf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new PointCloud2Pointf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(PointCloud2Pointf[] s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Pointf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    PointCloud2Pointf[] s = new PointCloud2Pointf[m.Length / 12];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.pointcloud.PointCloud2Pointf"; } }
}

public static class RRExtensions
{
    public static double[] GetNumericArray(this PointCloud2Point[] s)
    {
    var a=new ArraySegment<double>(new double[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PointCloud2Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PointCloud2Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this PointCloud2Pointf[] s)
    {
    var a=new ArraySegment<float>(new float[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PointCloud2Pointf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PointCloud2Pointf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.pointcloud.sensor
{
[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.sensor.PointCloudSensorInfo")]
public class PointCloudSensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.Point range_min;
    public com.robotraconteur.geometry.Point range_max;
    public com.robotraconteur.geometry.Vector3 resolution;
    public double update_rate;
    public Dictionary<string,com.robotraconteur.param.ParameterInfo> param_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.sensor.PointCloudSensorData")]
public class PointCloudSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloudf point_cloud;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.sensor.PointCloudPartSensorData")]
public class PointCloudPartSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloudPartf point_cloud;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.sensor.PointCloud2SensorData")]
public class PointCloud2SensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloud2f point_cloud;
}

[RobotRaconteurServiceStruct("com.robotraconteur.pointcloud.sensor.PointCloud2PartSensorData")]
public class PointCloud2PartSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloud2Partf point_cloud;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.pointcloud.sensor.PointCloudSensor")]
public interface PointCloudSensor
{
    Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<PointCloudSensorData> point_cloud_sensor_data{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.pointcloud.sensor.PointCloudPartSensor")]
public interface PointCloudPartSensor
{
    Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<PointCloudPartSensorData> point_cloud_sensor_data{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.pointcloud.sensor.PointCloud2Sensor")]
public interface PointCloud2Sensor : PointCloudSensor
{
    Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<PointCloudSensorData> point_cloud_sensor_data{ get; set; }
    Pipe<PointCloud2SensorData> point_cloud2_sensor_data{ get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.pointcloud.sensor.PointCloud2PartSensor")]
public interface PointCloud2PartSensor : PointCloudPartSensor
{
    Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<PointCloudPartSensorData> point_cloud_sensor_data{ get; set; }
    Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data{ get; set; }
}

}

namespace com.robotraconteur.pointcloud.sensor
{
public class com__robotraconteur__pointcloud__sensorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pointcloud.sensor\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.pointcloud\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensor\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.pointcloud.PointCloudf as PointCloud\nusing com.robotraconteur.pointcloud.PointCloudPartf as PointCloudPart\nusing com.robotraconteur.pointcloud.PointCloud2f as PointCloud2\nusing com.robotraconteur.pointcloud.PointCloud2Partf as PointCloud2Part\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.sensor.SensorData\n\nstruct PointCloudSensorInfo\nfield DeviceInfo device_info\nfield Point range_min\nfield Point range_max\nfield Vector3 resolution\nfield double update_rate\nfield ParameterInfo{string} param_info\nfield varvalue{string} extended\nend\n\nstruct PointCloudSensorData\nfield SensorData sensor_data\nfield PointCloud point_cloud\nend\n\nstruct PointCloudPartSensorData\nfield SensorData sensor_data\nfield PointCloudPart point_cloud\nend\n\nobject PointCloudSensor\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nproperty bool active\npipe PointCloudSensorData point_cloud_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject PointCloudPartSensor\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nproperty bool active\npipe PointCloudPartSensorData point_cloud_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n\nstruct PointCloud2SensorData\nfield SensorData sensor_data\nfield PointCloud2 point_cloud\nend\n\nstruct PointCloud2PartSensorData\nfield SensorData sensor_data\nfield PointCloud2Part point_cloud\nend\n\nobject PointCloud2Sensor\nimplements PointCloudSensor\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nproperty bool active\npipe PointCloudSensorData point_cloud_sensor_data [readonly]\npipe PointCloud2SensorData point_cloud2_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject PointCloud2PartSensor\nimplements PointCloudPartSensor\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nproperty bool active\npipe PointCloudPartSensorData point_cloud_sensor_data [readonly]\npipe PointCloud2PartSensorData point_cloud2_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pointcloud.sensor";}
    public PointCloudSensorInfo_stub PointCloudSensorInfo_stubentry;
    public PointCloudSensorData_stub PointCloudSensorData_stubentry;
    public PointCloudPartSensorData_stub PointCloudPartSensorData_stubentry;
    public PointCloud2SensorData_stub PointCloud2SensorData_stubentry;
    public PointCloud2PartSensorData_stub PointCloud2PartSensorData_stubentry;
    public com__robotraconteur__pointcloud__sensorFactory() : this(null,null) {}
    public com__robotraconteur__pointcloud__sensorFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PointCloudSensorInfo_stubentry=new PointCloudSensorInfo_stub(this,this.node,this.context);
    PointCloudSensorData_stubentry=new PointCloudSensorData_stub(this,this.node,this.context);
    PointCloudPartSensorData_stubentry=new PointCloudPartSensorData_stub(this,this.node,this.context);
    PointCloud2SensorData_stubentry=new PointCloud2SensorData_stub(this,this.node,this.context);
    PointCloud2PartSensorData_stubentry=new PointCloud2PartSensorData_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PointCloudSensorInfo")
    return PointCloudSensorInfo_stubentry;
    if (objecttype=="PointCloudSensorData")
    return PointCloudSensorData_stubentry;
    if (objecttype=="PointCloudPartSensorData")
    return PointCloudPartSensorData_stubentry;
    if (objecttype=="PointCloud2SensorData")
    return PointCloud2SensorData_stubentry;
    if (objecttype=="PointCloud2PartSensorData")
    return PointCloud2PartSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "PointCloudSensor":
    return new PointCloudSensor_stub(path, context);
    case "PointCloudPartSensor":
    return new PointCloudPartSensor_stub(path, context);
    case "PointCloud2Sensor":
    return new PointCloud2Sensor_stub(path, context);
    case "PointCloud2PartSensor":
    return new PointCloud2PartSensor_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "PointCloudSensor":
    return new PointCloudSensor_skel(path,(PointCloudSensor)obj,context);
    case "PointCloudPartSensor":
    return new PointCloudPartSensor_skel(path,(PointCloudPartSensor)obj,context);
    case "PointCloud2Sensor":
    return new PointCloud2Sensor_skel(path,(PointCloud2Sensor)obj,context);
    case "PointCloud2PartSensor":
    return new PointCloud2PartSensor_skel(path,(PointCloud2PartSensor)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PointCloudSensorInfo_stub : IStructureStub {
    public PointCloudSensorInfo_stub(com__robotraconteur__pointcloud__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudSensorInfo s = (PointCloudSensorInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, "range_min",ref s.range_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, "range_max",ref s.range_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "resolution",ref s.resolution));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("update_rate",s.update_rate));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "param_info",s.param_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.pointcloud.sensor.PointCloudSensorInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudSensorInfo s=new PointCloudSensorInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.range_min =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"range_min"));
    s.range_max =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Point>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"range_max"));
    s.resolution =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"resolution"));
    s.update_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"update_rate")));
    s.param_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"param_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudSensorData_stub : IStructureStub {
    public PointCloudSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudSensorData s = (PointCloudSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "point_cloud",s.point_cloud));
    return new MessageElementStructure("com.robotraconteur.pointcloud.sensor.PointCloudSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudSensorData s=new PointCloudSensorData();
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudPartSensorData_stub : IStructureStub {
    public PointCloudPartSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloudPartSensorData s = (PointCloudPartSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "point_cloud",s.point_cloud));
    return new MessageElementStructure("com.robotraconteur.pointcloud.sensor.PointCloudPartSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloudPartSensorData s=new PointCloudPartSensorData();
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudPartf>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2SensorData_stub : IStructureStub {
    public PointCloud2SensorData_stub(com__robotraconteur__pointcloud__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2SensorData s = (PointCloud2SensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "point_cloud",s.point_cloud));
    return new MessageElementStructure("com.robotraconteur.pointcloud.sensor.PointCloud2SensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2SensorData s=new PointCloud2SensorData();
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2f>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloud2PartSensorData_stub : IStructureStub {
    public PointCloud2PartSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PointCloud2PartSensorData s = (PointCloud2PartSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "point_cloud",s.point_cloud));
    return new MessageElementStructure("com.robotraconteur.pointcloud.sensor.PointCloud2PartSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PointCloud2PartSensorData s=new PointCloud2PartSensorData();
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2Partf>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PointCloudSensor_stub : ServiceStub , PointCloudSensor {
    private Pipe<PointCloudSensorData> rr_point_cloud_sensor_data;
    public PointCloudSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_point_cloud_sensor_data=new PipeClient<PointCloudSensorData>("point_cloud_sensor_data", this);
    }
    public async Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "point_sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"point_sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class PointCloudPartSensor_stub : ServiceStub , PointCloudPartSensor {
    private Pipe<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    public PointCloudPartSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_point_cloud_sensor_data=new PipeClient<PointCloudPartSensorData>("point_cloud_sensor_data", this);
    }
    public async Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "point_sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"point_sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class PointCloud2Sensor_stub : ServiceStub , PointCloud2Sensor {
    private Pipe<PointCloudSensorData> rr_point_cloud_sensor_data;
    private Pipe<PointCloud2SensorData> rr_point_cloud2_sensor_data;
    public PointCloud2Sensor_stub(string path, ClientContext c) : base(path, c) {
    rr_point_cloud_sensor_data=new PipeClient<PointCloudSensorData>("point_cloud_sensor_data", this);
    rr_point_cloud2_sensor_data=new PipeClient<PointCloud2SensorData>("point_cloud2_sensor_data", this);
    }
    public async Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "point_sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"point_sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<PointCloud2SensorData> point_cloud2_sensor_data {
    get { return rr_point_cloud2_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m);
    break;
    case "point_cloud2_sensor_data":
    this.rr_point_cloud2_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class PointCloud2PartSensor_stub : ServiceStub , PointCloud2PartSensor {
    private Pipe<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    private Pipe<PointCloud2PartSensorData> rr_point_cloud2_sensor_data;
    public PointCloud2PartSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_point_cloud_sensor_data=new PipeClient<PointCloudPartSensorData>("point_cloud_sensor_data", this);
    rr_point_cloud2_sensor_data=new PipeClient<PointCloud2PartSensorData>("point_cloud2_sensor_data", this);
    }
    public async Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "point_sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"point_sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data {
    get { return rr_point_cloud2_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m);
    break;
    case "point_cloud2_sensor_data":
    this.rr_point_cloud2_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class PointCloudSensor_skel : ServiceSkel {
    protected PointCloudSensor obj;
    public PointCloudSensor_skel(string p,PointCloudSensor o,ServerContext c) : base(p,o,c) { obj=(PointCloudSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    PointCloudSensorInfo ret=await obj.get_point_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    await obj.set_point_sensor_info(MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<PointCloudSensorData> rr_point_cloud_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    PointCloudSensor castobj=(PointCloudSensor)o;
    this.rr_point_cloud_sensor_data=new PipeServer<PointCloudSensorData>("point_cloud_sensor_data",this);
    castobj.point_cloud_sensor_data=this.rr_point_cloud_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "point_cloud_sensor_data":
    return await this.rr_point_cloud_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "point_sensor_info") return true;
    return false;
    }
}
public class PointCloudPartSensor_skel : ServiceSkel {
    protected PointCloudPartSensor obj;
    public PointCloudPartSensor_skel(string p,PointCloudPartSensor o,ServerContext c) : base(p,o,c) { obj=(PointCloudPartSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    PointCloudSensorInfo ret=await obj.get_point_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    await obj.set_point_sensor_info(MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    PointCloudPartSensor castobj=(PointCloudPartSensor)o;
    this.rr_point_cloud_sensor_data=new PipeServer<PointCloudPartSensorData>("point_cloud_sensor_data",this);
    castobj.point_cloud_sensor_data=this.rr_point_cloud_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "point_cloud_sensor_data":
    return await this.rr_point_cloud_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "point_sensor_info") return true;
    return false;
    }
}
public class PointCloud2Sensor_skel : ServiceSkel {
    protected PointCloud2Sensor obj;
    public PointCloud2Sensor_skel(string p,PointCloud2Sensor o,ServerContext c) : base(p,o,c) { obj=(PointCloud2Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    PointCloudSensorInfo ret=await obj.get_point_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    await obj.set_point_sensor_info(MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<PointCloudSensorData> rr_point_cloud_sensor_data;
    private PipeServer<PointCloud2SensorData> rr_point_cloud2_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    PointCloud2Sensor castobj=(PointCloud2Sensor)o;
    this.rr_point_cloud_sensor_data=new PipeServer<PointCloudSensorData>("point_cloud_sensor_data",this);
    this.rr_point_cloud2_sensor_data=new PipeServer<PointCloud2SensorData>("point_cloud2_sensor_data",this);
    castobj.point_cloud_sensor_data=this.rr_point_cloud_sensor_data;
    castobj.point_cloud2_sensor_data=this.rr_point_cloud2_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "point_cloud_sensor_data":
    return await this.rr_point_cloud_sensor_data.PipeCommand(m,e);
    case "point_cloud2_sensor_data":
    return await this.rr_point_cloud2_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m,e);
    break;
    case "point_cloud2_sensor_data":
    this.rr_point_cloud2_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "point_sensor_info") return true;
    return false;
    }
}
public class PointCloud2PartSensor_skel : ServiceSkel {
    protected PointCloud2PartSensor obj;
    public PointCloud2PartSensor_skel(string p,PointCloud2PartSensor o,ServerContext c) : base(p,o,c) { obj=(PointCloud2PartSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    PointCloudSensorInfo ret=await obj.get_point_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "point_sensor_info":
    {
    await obj.set_point_sensor_info(MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_node, rr_context, me));
    break;
    }
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    private PipeServer<PointCloud2PartSensorData> rr_point_cloud2_sensor_data;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    PointCloud2PartSensor castobj=(PointCloud2PartSensor)o;
    this.rr_point_cloud_sensor_data=new PipeServer<PointCloudPartSensorData>("point_cloud_sensor_data",this);
    this.rr_point_cloud2_sensor_data=new PipeServer<PointCloud2PartSensorData>("point_cloud2_sensor_data",this);
    castobj.point_cloud_sensor_data=this.rr_point_cloud_sensor_data;
    castobj.point_cloud2_sensor_data=this.rr_point_cloud2_sensor_data;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "point_cloud_sensor_data":
    return await this.rr_point_cloud_sensor_data.PipeCommand(m,e);
    case "point_cloud2_sensor_data":
    return await this.rr_point_cloud2_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "point_cloud_sensor_data":
    this.rr_point_cloud_sensor_data.PipePacketReceived(m,e);
    break;
    case "point_cloud2_sensor_data":
    this.rr_point_cloud2_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "point_sensor_info") return true;
    return false;
    }
}
public class PointCloudSensor_default_impl : PointCloudSensor{
    protected PipeBroadcaster<PointCloudSensorData> rrvar_point_cloud_sensor_data;
    public virtual Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudSensorData>(value);
    }
    }
}
public class PointCloudPartSensor_default_impl : PointCloudPartSensor{
    protected PipeBroadcaster<PointCloudPartSensorData> rrvar_point_cloud_sensor_data;
    public virtual Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudPartSensorData>(value);
    }
    }
}
public class PointCloud2Sensor_default_impl : PointCloud2Sensor{
    protected PipeBroadcaster<PointCloudSensorData> rrvar_point_cloud_sensor_data;
    protected PipeBroadcaster<PointCloud2SensorData> rrvar_point_cloud2_sensor_data;
    public virtual Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudSensorData>(value);
    }
    }
    public virtual Pipe<PointCloud2SensorData> point_cloud2_sensor_data {
    get { return rrvar_point_cloud2_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud2_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud2_sensor_data= new PipeBroadcaster<PointCloud2SensorData>(value);
    }
    }
}
public class PointCloud2PartSensor_default_impl : PointCloud2PartSensor{
    protected PipeBroadcaster<PointCloudPartSensorData> rrvar_point_cloud_sensor_data;
    protected PipeBroadcaster<PointCloud2PartSensorData> rrvar_point_cloud2_sensor_data;
    public virtual Task<PointCloudSensorInfo> get_point_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_point_sensor_info(PointCloudSensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudPartSensorData>(value);
    }
    }
    public virtual Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data {
    get { return rrvar_point_cloud2_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud2_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud2_sensor_data= new PipeBroadcaster<PointCloud2PartSensorData>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.resource
{
[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourceIdentifier")]
public class ResourceIdentifier
{
    public com.robotraconteur.identifier.Identifier bucket;
    public string key;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.BucketInfo")]
public class BucketInfo
{
    public com.robotraconteur.identifier.Identifier identifier;
    public List<string> keys;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourceInfo")]
public class ResourceInfo
{
    public ResourceIdentifier identifier;
    public string key;
    public com.robotraconteur.datetime.DateTimeUTC created;
    public com.robotraconteur.datetime.DateTimeUTC modified;
    public ulong total_size;
    public string description;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.Resource")]
public class Resource
{
    public ResourceInfo info;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourcePart")]
public class ResourcePart
{
    public ResourceInfo info;
    public ulong data_offset;
    public byte[] data;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.resource.ResourceReadOnlyStorage")]
public interface ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken));
    Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.resource.ResourceStorage")]
public interface ResourceStorage : ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken));
    Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_delete(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
}

}

namespace com.robotraconteur.resource
{
public class com__robotraconteur__resourceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.resource\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.uuid.UUID\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.identifier.Identifier\n\nstruct ResourceIdentifier\nfield Identifier bucket\nfield string key\nend\n\nstruct BucketInfo\nfield Identifier identifier\nfield string{list} keys\nend\n\nstruct ResourceInfo\nfield ResourceIdentifier identifier\nfield string key\nfield DateTimeUTC created\nfield DateTimeUTC modified\nfield uint64 total_size\nfield string description\nfield varvalue{string} extended\nend\n\nstruct Resource\nfield ResourceInfo info\nfield uint8[] data\nend\n\nstruct ResourcePart\nfield ResourceInfo info\nfield uint64 data_offset\nfield uint8[] data\nend\n\nobject ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nend\n\nobject ResourceStorage\nimplements ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nfunction void resource_bucket_add(Identifier bucket_identifier)\nfunction void resource_bucket_delete(Identifier bucket_identifier)\nfunction void resource_set(ResourceIdentifier identifier, bool overrite, ResourcePart{generator} resource)\nfunction void resource_delete(ResourceIdentifier identifier)\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.resource";}
    public ResourceIdentifier_stub ResourceIdentifier_stubentry;
    public BucketInfo_stub BucketInfo_stubentry;
    public ResourceInfo_stub ResourceInfo_stubentry;
    public Resource_stub Resource_stubentry;
    public ResourcePart_stub ResourcePart_stubentry;
    public com__robotraconteur__resourceFactory() : this(null,null) {}
    public com__robotraconteur__resourceFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ResourceIdentifier_stubentry=new ResourceIdentifier_stub(this,this.node,this.context);
    BucketInfo_stubentry=new BucketInfo_stub(this,this.node,this.context);
    ResourceInfo_stubentry=new ResourceInfo_stub(this,this.node,this.context);
    Resource_stubentry=new Resource_stub(this,this.node,this.context);
    ResourcePart_stubentry=new ResourcePart_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ResourceIdentifier")
    return ResourceIdentifier_stubentry;
    if (objecttype=="BucketInfo")
    return BucketInfo_stubentry;
    if (objecttype=="ResourceInfo")
    return ResourceInfo_stubentry;
    if (objecttype=="Resource")
    return Resource_stubentry;
    if (objecttype=="ResourcePart")
    return ResourcePart_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_stub(path, context);
    case "ResourceStorage":
    return new ResourceStorage_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_skel(path,(ResourceReadOnlyStorage)obj,context);
    case "ResourceStorage":
    return new ResourceStorage_skel(path,(ResourceStorage)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ResourceIdentifier_stub : IStructureStub {
    public ResourceIdentifier_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourceIdentifier s = (ResourceIdentifier)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket",s.bucket));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("key",s.key));
    return new MessageElementStructure("com.robotraconteur.resource.ResourceIdentifier",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourceIdentifier s=new ResourceIdentifier();
    s.bucket =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"bucket"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"key"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class BucketInfo_stub : IStructureStub {
    public BucketInfo_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    BucketInfo s = (BucketInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",s.identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "keys",s.keys));
    return new MessageElementStructure("com.robotraconteur.resource.BucketInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    BucketInfo s=new BucketInfo();
    s.identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"identifier"));
    s.keys =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"keys"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourceInfo_stub : IStructureStub {
    public ResourceInfo_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourceInfo s = (ResourceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",s.identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("key",s.key));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "created",ref s.created));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "modified",ref s.modified));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("total_size",s.total_size));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.resource.ResourceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourceInfo s=new ResourceInfo();
    s.identifier =MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"identifier"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"key"));
    s.created =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"created"));
    s.modified =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"modified"));
    s.total_size =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"total_size")));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"description"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Resource_stub : IStructureStub {
    public Resource_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Resource s = (Resource)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "info",s.info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.resource.Resource",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Resource s=new Resource();
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourcePart_stub : IStructureStub {
    public ResourcePart_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourcePart s = (ResourcePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "info",s.info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.resource.ResourcePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourcePart s=new ResourcePart();
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourceReadOnlyStorage_stub : ServiceStub , ResourceReadOnlyStorage {
    public ResourceReadOnlyStorage_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "resource_bucket_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me);
        }
    public async Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"resource_bucket_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_info");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_all");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get_all",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ResourceStorage_stub : ServiceStub , ResourceStorage {
    public ResourceStorage_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "resource_bucket_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me);
        }
    public async Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"resource_bucket_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_info");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_all");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get_all",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_bucket_add");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_bucket_delete");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_set");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("overrite",overrite));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator3Client<ResourcePart>("resource_set",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task resource_delete(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_delete");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ResourceReadOnlyStorage_skel : ServiceSkel {
    protected ResourceReadOnlyStorage obj;
    public ResourceReadOnlyStorage_skel(string p,ResourceReadOnlyStorage o,ServerContext c) : base(p,o,c) { obj=(ResourceReadOnlyStorage)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    List<BucketInfo> ret=await obj.get_resource_bucket_info();
    mr.AddElement(MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    await obj.set_resource_bucket_info(MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    ResourceInfo rr_ret=await this.obj.resource_get_info(identifier, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get(identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get_all(bucket_identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get_all",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ResourceReadOnlyStorage castobj=(ResourceReadOnlyStorage)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "resource_bucket_info") return true;
    return false;
    }
}
public class ResourceStorage_skel : ServiceSkel {
    protected ResourceStorage obj;
    public ResourceStorage_skel(string p,ResourceStorage o,ServerContext c) : base(p,o,c) { obj=(ResourceStorage)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    List<BucketInfo> ret=await obj.get_resource_bucket_info();
    mr.AddElement(MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    await obj.set_resource_bucket_info(MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    ResourceInfo rr_ret=await this.obj.resource_get_info(identifier, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get(identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get_all(bucket_identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get_all",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_bucket_add":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    await this.obj.resource_bucket_add(bucket_identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "resource_bucket_delete":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    await this.obj.resource_bucket_delete(bucket_identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "resource_set":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    bool overrite=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"overrite")));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator3<ResourcePart> rr_ret=await this.obj.resource_set(identifier, overrite);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator3Server<ResourcePart>(rr_ret,"resource_set",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_delete":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    await this.obj.resource_delete(identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ResourceStorage castobj=(ResourceStorage)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "resource_bucket_info") return true;
    return false;
    }
}
public class ResourceReadOnlyStorage_default_impl : ResourceReadOnlyStorage{
    public virtual Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class ResourceStorage_default_impl : ResourceStorage{
    public virtual Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_delete(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.joints
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.joints.JointLimits")]
public class JointLimits
{
    public double lower;
    public double upper;
    public double home;
    public double velocity;
    public double acceleration;
    public double effort;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.joints.JointInfo")]
public class JointInfo
{
    public com.robotraconteur.identifier.Identifier joint_identifier;
    public JointType joint_type;
    public JointLimits joint_limits;
    public JointPositionUnits default_units;
    public JointEffortUnits default_effort_units;
    public bool passive;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__jointsConstants  {
}
    public enum JointPositionUnits
    {
    implicit_ = 0,
    meter = 1,
    radian = 2,
    degree = 3,
    ticks_lin = 4,
    ticks_rot = 5,
    nanoticks_lin = 6,
    nanoticks_rot = 7
    };
    public enum JointVelocityUnits
    {
    implicit_ = 0,
    meter_second = 16,
    radian_second = 17,
    degree_second = 18,
    ticks_lin_second = 19,
    ticks_rot_second = 20,
    nanoticks_lin_second = 21,
    nanoticks_rot_second = 22
    };
    public enum JointAccelerationUnits
    {
    implicit_ = 0,
    meter_second2 = 32,
    radian_second2 = 33,
    degree_second2 = 34,
    ticks_lin_second2 = 35,
    ticks_rot_second2 = 36,
    nanoticks_lin_second2 = 37,
    nanoticks_rot_second2 = 38
    };
    public enum JointJerkUnits
    {
    implicit_ = 0,
    meter_second2 = 48,
    radian_second3 = 49,
    degree_second3 = 50,
    ticks_lin_second3 = 51,
    ticks_rot_second3 = 52,
    nanoticks_lin_second3 = 53,
    nanoticks_rot_second3 = 54
    };
    public enum JointEffortUnits
    {
    implicit_ = 0,
    newton = 64,
    newton_meter = 65,
    ampere = 66,
    volt = 67,
    pascal = 68,
    coulomb = 69,
    tesla = 70,
    weber = 71,
    meter_second2 = 72,
    radian_second2 = 73,
    degree_second2 = 74
    };
    public enum JointType
    {
    unknown = 0,
    revolute = 1,
    continuous = 2,
    prismatic = 3,
    wheel = 4,
    screw = 5,
    other = 6,
    revolute2 = 7,
    universal = 8,
    ball = 9,
    planar = 10,
    floating = 11,
    other_compound = 12
    };
}

namespace com.robotraconteur.robotics.joints
{
public class com__robotraconteur__robotics__jointsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.joints\n\nstdver 0.9\n\nimport com.robotraconteur.units\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.identifier.Identifier\n\nenum JointPositionUnits\nimplicit = 0,\nmeter,\nradian,\ndegree,\n# ticks_lin = m/(2^20)\nticks_lin,\n# ticks_rot = rev/(2^20)\nticks_rot,\n# nanoticks_lin = nm/(2^20)\nnanoticks_lin,\n# nanoticks_rot = nrev/(2^20)\nnanoticks_rot\nend\n\nenum JointVelocityUnits\nimplicit = 0,\nmeter_second = 16,\nradian_second,\ndegree_second,\nticks_lin_second,\nticks_rot_second,\nnanoticks_lin_second,\nnanoticks_rot_second\nend\n\nenum JointAccelerationUnits\nimplicit = 0,\nmeter_second2 = 32,\nradian_second2,\ndegree_second2,\nticks_lin_second2,\nticks_rot_second2,\nnanoticks_lin_second2,\nnanoticks_rot_second2\nend\n\nenum JointJerkUnits\nimplicit = 0,\nmeter_second2 = 48,\nradian_second3,\ndegree_second3,\nticks_lin_second3,\nticks_rot_second3,\nnanoticks_lin_second3,\nnanoticks_rot_second3\nend\n\nenum JointEffortUnits\nimplicit = 0,\nnewton = 64,\nnewton_meter,\nampere,\nvolt,\npascal,\ncoulomb,\ntesla,\nweber,\nmeter_second2,\nradian_second2,\ndegree_second2\nend\n\nenum JointType\nunknown = 0,\nrevolute,\ncontinuous,\nprismatic,\nwheel,\nscrew,\nother,\n# Compound joint types\nrevolute2,\nuniversal,\nball,\nplanar,\nfloating,\nother_compound\nend\n\nstruct JointLimits\nfield double lower\nfield double upper\nfield double home\nfield double velocity\nfield double acceleration\nfield double effort\nend\n\nstruct JointInfo\nfield Identifier joint_identifier\nfield JointType joint_type\nfield JointLimits joint_limits\nfield JointPositionUnits default_units\nfield JointEffortUnits default_effort_units\nfield bool passive\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.joints";}
    public JointLimits_stub JointLimits_stubentry;
    public JointInfo_stub JointInfo_stubentry;
    public com__robotraconteur__robotics__jointsFactory() : this(null,null) {}
    public com__robotraconteur__robotics__jointsFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    JointLimits_stubentry=new JointLimits_stub(this,this.node,this.context);
    JointInfo_stubentry=new JointInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointLimits")
    return JointLimits_stubentry;
    if (objecttype=="JointInfo")
    return JointInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointLimits_stub : IStructureStub {
    public JointLimits_stub(com__robotraconteur__robotics__jointsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__jointsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointLimits s = (JointLimits)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("lower",s.lower));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("upper",s.upper));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("home",s.home));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("velocity",s.velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("acceleration",s.acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("effort",s.effort));
    return new MessageElementStructure("com.robotraconteur.robotics.joints.JointLimits",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointLimits s=new JointLimits();
    s.lower =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"lower")));
    s.upper =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"upper")));
    s.home =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"home")));
    s.velocity =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"velocity")));
    s.acceleration =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"acceleration")));
    s.effort =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"effort")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointInfo_stub : IStructureStub {
    public JointInfo_stub(com__robotraconteur__robotics__jointsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__jointsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointInfo s = (JointInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joint_identifier",s.joint_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointType>("joint_type",s.joint_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joint_limits",s.joint_limits));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointPositionUnits>("default_units",s.default_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointEffortUnits>("default_effort_units",s.default_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("passive",s.passive));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.joints.JointInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointInfo s=new JointInfo();
    s.joint_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_identifier"));
    s.joint_type =MessageElementUtil.UnpackEnum<JointType>(MessageElement.FindElement(m.Elements,"joint_type"));
    s.joint_limits =MessageElementUtil.UnpackStructure<JointLimits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_limits"));
    s.default_units =MessageElementUtil.UnpackEnum<JointPositionUnits>(MessageElement.FindElement(m.Elements,"default_units"));
    s.default_effort_units =MessageElementUtil.UnpackEnum<JointEffortUnits>(MessageElement.FindElement(m.Elements,"default_effort_units"));
    s.passive =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"passive")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.tool
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.tool.ToolInfo")]
public class ToolInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.Transform tcp;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public double actuation_time;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.robotics.tool
{
public class com__robotraconteur__robotics__toolFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.tool\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\n\nstruct ToolInfo\nfield DeviceInfo device_info\nfield Transform tcp\nfield SpatialInertia inertia\nfield double actuation_time\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.tool";}
    public ToolInfo_stub ToolInfo_stubentry;
    public com__robotraconteur__robotics__toolFactory() : this(null,null) {}
    public com__robotraconteur__robotics__toolFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ToolInfo_stubentry=new ToolInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ToolInfo")
    return ToolInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ToolInfo_stub : IStructureStub {
    public ToolInfo_stub(com__robotraconteur__robotics__toolFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__toolFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ToolInfo s = (ToolInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Transform>(rr_node, rr_context, "tcp",ref s.tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("actuation_time",s.actuation_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.tool.ToolInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ToolInfo s=new ToolInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.tcp =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    s.actuation_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"actuation_time")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.trajectory
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.JointTrajectoryWaypoint")]
public class JointTrajectoryWaypoint
{
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] position_tolerance;
    public double[] velocity_tolerance;
    public double time_from_start;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.JointTrajectory")]
public class JointTrajectory
{
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<JointTrajectoryWaypoint> waypoints;
    public InterpolationMode interpolation_mode;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.TrajectoryStatus")]
public class TrajectoryStatus
{
    public ulong seqno;
    public com.robotraconteur.action.ActionStatusCode action_status;
    public uint current_waypoint;
    public double trajectory_time;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDeviceWaypoint")]
public class AdvancedJointTrajectoryDeviceWaypoint
{
    public List<double[]> joint_position;
    public List<double[]> joint_velocity;
    public List<double[]> joint_acceleration;
    public List<double[]> joint_jerk;
    public List<double[]> joint_effort;
    public List<double[]> position_tolerance;
    public List<double[]> velocity_tolerance;
    public Dictionary<string,object> signals;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryWaypoint")]
public class AdvancedJointTrajectoryWaypoint
{
    public List<AdvancedJointTrajectoryDeviceWaypoint> joints;
    public double time_from_start;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDevice")]
public class AdvancedJointTrajectoryDevice
{
    public com.robotraconteur.identifier.Identifier device;
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<com.robotraconteur.robotics.joints.JointEffortUnits> joint_effort_units;
    public InterpolationMode interpolation_mode;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectory")]
public class AdvancedJointTrajectory
{
    public List<AdvancedJointTrajectoryDevice> devices;
    public List<AdvancedJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.FreeformJointTrajectoryWaypoint")]
public class FreeformJointTrajectoryWaypoint
{
    public List<object> joint_position;
    public List<object> joint_velocity;
    public List<object> position_tolerance;
    public List<object> velocity_tolerance;
    public string interpolation_mode;
    public Dictionary<string,object> signals;
    public double time_from_start;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.FreeformJointTrajectory")]
public class FreeformJointTrajectory
{
    public List<string> joint_names;
    public List<string> joint_units;
    public List<FreeformJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__trajectoryConstants  {
}
    public enum InterpolationMode
    {
    default_ = 0,
    joint = 1,
    linear = 2,
    cylindrical = 3,
    spherical = 4,
    joint_cubic_spline = 5,
    cubic_spline = 6,
    custom = 7
    };
}

namespace com.robotraconteur.robotics.trajectory
{
public class com__robotraconteur__robotics__trajectoryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.trajectory\n\nstdver 0.9\n\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\n\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.robotics.joints.JointEffortUnits\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\n\nenum InterpolationMode\ndefault = 0,\njoint,\nlinear,\ncylindrical,\nspherical,\njoint_cubic_spline,\ncubic_spline,\ncustom\nend\n\nstruct JointTrajectoryWaypoint\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] position_tolerance\nfield double[] velocity_tolerance\nfield double time_from_start\nend\n\nstruct JointTrajectory\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointTrajectoryWaypoint{list} waypoints\nfield InterpolationMode interpolation_mode\nfield varvalue{string} extended\nend\n\nstruct TrajectoryStatus\nfield uint64 seqno\nfield ActionStatusCode action_status\nfield uint32 current_waypoint\nfield double trajectory_time\nend\n\nstruct AdvancedJointTrajectoryDeviceWaypoint\n# Use list for compound joints\nfield double[]{list} joint_position\nfield double[]{list} joint_velocity\nfield double[]{list} joint_acceleration\nfield double[]{list} joint_jerk\nfield double[]{list} joint_effort\nfield double[]{list} position_tolerance\nfield double[]{list} velocity_tolerance\nfield varvalue{string} signals\nend\n\nstruct AdvancedJointTrajectoryWaypoint\nfield AdvancedJointTrajectoryDeviceWaypoint{list} joints\nfield double time_from_start\nend\n\nstruct AdvancedJointTrajectoryDevice\nfield Identifier device\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointEffortUnits{list} joint_effort_units\nfield InterpolationMode interpolation_mode\nfield varvalue{string} extended\nend\n\nstruct AdvancedJointTrajectory\nfield AdvancedJointTrajectoryDevice{list} devices\nfield AdvancedJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectoryWaypoint\nfield varvalue{list} joint_position\nfield varvalue{list} joint_velocity\nfield varvalue{list} position_tolerance\nfield varvalue{list} velocity_tolerance\nfield string interpolation_mode\nfield varvalue{string} signals\nfield double time_from_start\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectory\nfield string{list} joint_names\nfield string{list} joint_units\nfield FreeformJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.trajectory";}
    public JointTrajectoryWaypoint_stub JointTrajectoryWaypoint_stubentry;
    public JointTrajectory_stub JointTrajectory_stubentry;
    public TrajectoryStatus_stub TrajectoryStatus_stubentry;
    public AdvancedJointTrajectoryDeviceWaypoint_stub AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    public AdvancedJointTrajectoryWaypoint_stub AdvancedJointTrajectoryWaypoint_stubentry;
    public AdvancedJointTrajectoryDevice_stub AdvancedJointTrajectoryDevice_stubentry;
    public AdvancedJointTrajectory_stub AdvancedJointTrajectory_stubentry;
    public FreeformJointTrajectoryWaypoint_stub FreeformJointTrajectoryWaypoint_stubentry;
    public FreeformJointTrajectory_stub FreeformJointTrajectory_stubentry;
    public com__robotraconteur__robotics__trajectoryFactory() : this(null,null) {}
    public com__robotraconteur__robotics__trajectoryFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    JointTrajectoryWaypoint_stubentry=new JointTrajectoryWaypoint_stub(this,this.node,this.context);
    JointTrajectory_stubentry=new JointTrajectory_stub(this,this.node,this.context);
    TrajectoryStatus_stubentry=new TrajectoryStatus_stub(this,this.node,this.context);
    AdvancedJointTrajectoryDeviceWaypoint_stubentry=new AdvancedJointTrajectoryDeviceWaypoint_stub(this,this.node,this.context);
    AdvancedJointTrajectoryWaypoint_stubentry=new AdvancedJointTrajectoryWaypoint_stub(this,this.node,this.context);
    AdvancedJointTrajectoryDevice_stubentry=new AdvancedJointTrajectoryDevice_stub(this,this.node,this.context);
    AdvancedJointTrajectory_stubentry=new AdvancedJointTrajectory_stub(this,this.node,this.context);
    FreeformJointTrajectoryWaypoint_stubentry=new FreeformJointTrajectoryWaypoint_stub(this,this.node,this.context);
    FreeformJointTrajectory_stubentry=new FreeformJointTrajectory_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointTrajectoryWaypoint")
    return JointTrajectoryWaypoint_stubentry;
    if (objecttype=="JointTrajectory")
    return JointTrajectory_stubentry;
    if (objecttype=="TrajectoryStatus")
    return TrajectoryStatus_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDeviceWaypoint")
    return AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryWaypoint")
    return AdvancedJointTrajectoryWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDevice")
    return AdvancedJointTrajectoryDevice_stubentry;
    if (objecttype=="AdvancedJointTrajectory")
    return AdvancedJointTrajectory_stubentry;
    if (objecttype=="FreeformJointTrajectoryWaypoint")
    return FreeformJointTrajectoryWaypoint_stubentry;
    if (objecttype=="FreeformJointTrajectory")
    return FreeformJointTrajectory_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointTrajectoryWaypoint_stub : IStructureStub {
    public JointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointTrajectoryWaypoint s = (JointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.JointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointTrajectoryWaypoint s=new JointTrajectoryWaypoint();
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointTrajectory_stub : IStructureStub {
    public JointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointTrajectory s = (JointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<JointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.JointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointTrajectory s=new JointTrajectory();
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<JointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class TrajectoryStatus_stub : IStructureStub {
    public TrajectoryStatus_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    TrajectoryStatus s = (TrajectoryStatus)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<com.robotraconteur.action.ActionStatusCode>("action_status",s.action_status));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("current_waypoint",s.current_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.TrajectoryStatus",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    TrajectoryStatus s=new TrajectoryStatus();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.action_status =MessageElementUtil.UnpackEnum<com.robotraconteur.action.ActionStatusCode>(MessageElement.FindElement(m.Elements,"action_status"));
    s.current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"current_waypoint")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_time")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryDeviceWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryDeviceWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDeviceWaypoint s = (AdvancedJointTrajectoryDeviceWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_acceleration",s.joint_acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_jerk",s.joint_jerk));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "signals",s.signals));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDeviceWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDeviceWaypoint s=new AdvancedJointTrajectoryDeviceWaypoint();
    s.joint_position =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_acceleration =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_acceleration"));
    s.joint_jerk =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_jerk"));
    s.joint_effort =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_effort"));
    s.position_tolerance =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signals"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryWaypoint s = (AdvancedJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDeviceWaypoint>(rr_node, rr_context, "joints",s.joints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryWaypoint s=new AdvancedJointTrajectoryWaypoint();
    s.joints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDeviceWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joints"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryDevice_stub : IStructureStub {
    public AdvancedJointTrajectoryDevice_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDevice s = (AdvancedJointTrajectoryDevice)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device",s.device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, "joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDevice",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDevice s=new AdvancedJointTrajectoryDevice();
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device"));
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.joint_effort_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_effort_units"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectory_stub : IStructureStub {
    public AdvancedJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectory s = (AdvancedJointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDevice>(rr_node, rr_context, "devices",s.devices));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectory s=new AdvancedJointTrajectory();
    s.devices =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDevice>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"devices"));
    s.waypoints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformJointTrajectoryWaypoint_stub : IStructureStub {
    public FreeformJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformJointTrajectoryWaypoint s = (FreeformJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "signals",s.signals));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.FreeformJointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformJointTrajectoryWaypoint s=new FreeformJointTrajectoryWaypoint();
    s.joint_position =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.interpolation_mode =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signals"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformJointTrajectory_stub : IStructureStub {
    public FreeformJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformJointTrajectory s = (FreeformJointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<FreeformJointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.FreeformJointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformJointTrajectory s=new FreeformJointTrajectory();
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<FreeformJointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.payload
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.payload.PayloadInfo")]
public class PayloadInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.robotics.payload
{
public class com__robotraconteur__robotics__payloadFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.payload\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\n\nstruct PayloadInfo\nfield DeviceInfo device_info\nfield SpatialInertia inertia\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.payload";}
    public PayloadInfo_stub PayloadInfo_stubentry;
    public com__robotraconteur__robotics__payloadFactory() : this(null,null) {}
    public com__robotraconteur__robotics__payloadFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PayloadInfo_stubentry=new PayloadInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PayloadInfo")
    return PayloadInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PayloadInfo_stub : IStructureStub {
    public PayloadInfo_stub(com__robotraconteur__robotics__payloadFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__payloadFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PayloadInfo s = (PayloadInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.payload.PayloadInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PayloadInfo s=new PayloadInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.planning
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.EnvState")]
public class EnvState
{
    public Dictionary<string,double[]> joints;
    public Dictionary<string,com.robotraconteur.geometry.NamedTransform> transforms;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.JointWaypoint")]
public class JointWaypoint
{
    public double[] joint_positions;
    public double[] coeffs;
    public bool is_critical;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.CartesianWaypoint")]
public class CartesianWaypoint
{
    public com.robotraconteur.geometry.Pose cartesion_position;
    public double[] coeffs;
    public bool is_critical;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.JointTolerancedWaypoint")]
public class JointTolerancedWaypoint
{
    public double[] joint_positions;
    public double[] lower_tolerance;
    public double[] upper_tolerance;
    public double[] coeffs;
    public bool is_critical;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.PlanningRequest")]
public class PlanningRequest
{
    public com.robotraconteur.identifier.Identifier device;
    public com.robotraconteur.identifier.Identifier planner_algorithm;
    public com.robotraconteur.identifier.Identifier filter_algorithm;
    public com.robotraconteur.geometry.Box workspace_bounds;
    public object start_waypoint;
    public object goal_waypoint;
    public List<object> intermediate_waypoints;
    public bool collision_check;
    public double collision_safety_margin;
    public Dictionary<string,object> planner_specific;
    public Dictionary<string,object> filter_specific;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.PlanningResponse")]
public class PlanningResponse
{
    public PlannerStatusCode status_code;
    public com.robotraconteur.robotics.trajectory.JointTrajectory joint_trajectory;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.ContactResult")]
public class ContactResult
{
    public double distance;
    public byte shape1_type_id;
    public byte shape2_type_id;
    public string shape1_name;
    public string shape2_name;
    public uint shape1_subid;
    public uint shape2_subid;
    public com.robotraconteur.geometry.Vector3 shape1_nearest_point;
    public com.robotraconteur.geometry.Vector3 shape2_nearest_point;
    public com.robotraconteur.geometry.Vector3 normal;
    public com.robotraconteur.geometry.Vector3 shape1_cc_nearest_points;
    public com.robotraconteur.geometry.Vector3 shape2_cc_nearest_points;
    public double cc_time;
    public byte cc_type;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.planning.InvKinResult")]
public class InvKinResult
{
    public List<double[]> joints;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.robotics.planning.Planner")]
public interface Planner
{
    Task<Generator2<PlanningResponse>> plan(PlanningRequest request,CancellationToken rr_cancel=default(CancellationToken));
    Task<List<ContactResult>> compute_contacts(EnvState state,CancellationToken rr_cancel=default(CancellationToken));
    Task<List<InvKinResult>> invkin(string robot_name, com.robotraconteur.geometry.NamedPose tcp_pose,CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.robotics.planning.PlanningScene")]
public interface PlanningScene
{
    Task<EnvState> get_env_state(CancellationToken cancel=default(CancellationToken));
    Task set_env_state(EnvState value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo>> get_robots(CancellationToken cancel=default(CancellationToken));
    Task set_robots(Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotState>> get_robot_states(CancellationToken cancel=default(CancellationToken));
    Task set_robot_states(Dictionary<string,com.robotraconteur.robotics.robot.RobotState> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject>> get_shapes(CancellationToken cancel=default(CancellationToken));
    Task set_shapes(Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,com.robotraconteur.geometry.NamedTransform>> get_transforms(CancellationToken cancel=default(CancellationToken));
    Task set_transforms(Dictionary<string,com.robotraconteur.geometry.NamedTransform> value, CancellationToken cancel=default(CancellationToken));
    Task add_robot(string name, com.robotraconteur.robotics.robot.RobotInfo robot, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task update_robot_info(string robot_name, com.robotraconteur.robotics.robot.RobotInfo robot,CancellationToken rr_cancel=default(CancellationToken));
    Task update_robot_state(string robot_name, com.robotraconteur.robotics.robot.RobotState robot_state,CancellationToken rr_cancel=default(CancellationToken));
    Task add_shape(string shape_name, com.robotraconteur.geometry.shapes.ShapeObject shape, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task remove_item(string name,CancellationToken rr_cancel=default(CancellationToken));
    Task move_item(string name, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken));
}

public static class com__robotraconteur__robotics__planningConstants  {
}
    public enum PlannerStatusCode
    {
    is_not_configured = -2,
    failure = -1,
    unknown = 0,
    is_configured = 1,
    running = 2,
    success = 3
    };
}

namespace com.robotraconteur.robotics.planning
{
public class com__robotraconteur__robotics__planningFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.planning\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.robotics.robot\nimport com.robotraconteur.robotics.trajectory\nimport com.robotraconteur.geometry.shapes\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.geometry.NamedTransform\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Vector6\nusing com.robotraconteur.geometry.Box\nusing com.robotraconteur.robotics.trajectory.JointTrajectory\nusing com.robotraconteur.robotics.robot.RobotInfo\nusing com.robotraconteur.robotics.robot.RobotState\nusing com.robotraconteur.geometry.shapes.ShapeObject\nusing com.robotraconteur.identifier.Identifier\n\nenum PlannerStatusCode\nis_not_configured = -2,\nfailure = -1,\nunknown = 0,\nis_configured = 1,\nrunning = 2,\nsuccess = 3\nend\n\nstruct EnvState\nfield double[]{string} joints\nfield NamedTransform{string} transforms\nfield varvalue{string} extended\nend\n\nstruct JointWaypoint\nfield double[] joint_positions\nfield double[] coeffs\nfield bool is_critical\nend\n\nstruct CartesianWaypoint\nfield Pose cartesion_position\nfield double[] coeffs\nfield bool is_critical\nend\n\nstruct JointTolerancedWaypoint\nfield double[] joint_positions\nfield double[] lower_tolerance\nfield double[] upper_tolerance\nfield double[] coeffs\nfield bool is_critical\nend\n\nstruct PlanningRequest\nfield Identifier device\nfield Identifier planner_algorithm\nfield Identifier filter_algorithm\nfield Box workspace_bounds\nfield varvalue start_waypoint\nfield varvalue goal_waypoint\nfield varvalue{list} intermediate_waypoints\nfield bool collision_check\nfield double collision_safety_margin\nfield varvalue{string} planner_specific\nfield varvalue{string} filter_specific\nfield varvalue{string} extended\nend\n\nstruct PlanningResponse\nfield PlannerStatusCode status_code\nfield JointTrajectory joint_trajectory\nfield varvalue{string} extended\nend\n\nstruct ContactResult\nfield double distance\nfield uint8 shape1_type_id\nfield uint8 shape2_type_id\nfield string shape1_name\nfield string shape2_name\nfield uint32 shape1_subid\nfield uint32 shape2_subid\nfield Vector3 shape1_nearest_point\nfield Vector3 shape2_nearest_point\nfield Vector3 normal\nfield Vector3 shape1_cc_nearest_points\nfield Vector3 shape2_cc_nearest_points\nfield double cc_time\nfield uint8 cc_type\nfield varvalue{string} extended\nend\n\nstruct InvKinResult\nfield double[]{list} joints\nend\n\nobject Planner\nfunction PlanningResponse{generator} plan(PlanningRequest request)\n\nfunction ContactResult{list} compute_contacts(EnvState state)\n\nfunction InvKinResult{list} invkin(string robot_name, NamedPose tcp_pose)\nend\n\nobject PlanningScene\nproperty EnvState env_state\n\nproperty RobotInfo{string} robots [readonly]\nproperty RobotState{string} robot_states [readonly]\nproperty ShapeObject{string} shapes [readonly]\nproperty NamedTransform{string} transforms [readonly]\n\nfunction void add_robot(string name, RobotInfo robot, NamedPose pose)\nfunction void update_robot_info(string robot_name, RobotInfo robot)\nfunction void update_robot_state(string robot_name, RobotState robot_state)\n\nfunction void add_shape(string shape_name, ShapeObject shape, NamedPose pose)\n\nfunction void remove_item(string name)\nfunction void move_item(string name, NamedPose pose)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.planning";}
    public EnvState_stub EnvState_stubentry;
    public JointWaypoint_stub JointWaypoint_stubentry;
    public CartesianWaypoint_stub CartesianWaypoint_stubentry;
    public JointTolerancedWaypoint_stub JointTolerancedWaypoint_stubentry;
    public PlanningRequest_stub PlanningRequest_stubentry;
    public PlanningResponse_stub PlanningResponse_stubentry;
    public ContactResult_stub ContactResult_stubentry;
    public InvKinResult_stub InvKinResult_stubentry;
    public com__robotraconteur__robotics__planningFactory() : this(null,null) {}
    public com__robotraconteur__robotics__planningFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    EnvState_stubentry=new EnvState_stub(this,this.node,this.context);
    JointWaypoint_stubentry=new JointWaypoint_stub(this,this.node,this.context);
    CartesianWaypoint_stubentry=new CartesianWaypoint_stub(this,this.node,this.context);
    JointTolerancedWaypoint_stubentry=new JointTolerancedWaypoint_stub(this,this.node,this.context);
    PlanningRequest_stubentry=new PlanningRequest_stub(this,this.node,this.context);
    PlanningResponse_stubentry=new PlanningResponse_stub(this,this.node,this.context);
    ContactResult_stubentry=new ContactResult_stub(this,this.node,this.context);
    InvKinResult_stubentry=new InvKinResult_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="EnvState")
    return EnvState_stubentry;
    if (objecttype=="JointWaypoint")
    return JointWaypoint_stubentry;
    if (objecttype=="CartesianWaypoint")
    return CartesianWaypoint_stubentry;
    if (objecttype=="JointTolerancedWaypoint")
    return JointTolerancedWaypoint_stubentry;
    if (objecttype=="PlanningRequest")
    return PlanningRequest_stubentry;
    if (objecttype=="PlanningResponse")
    return PlanningResponse_stubentry;
    if (objecttype=="ContactResult")
    return ContactResult_stubentry;
    if (objecttype=="InvKinResult")
    return InvKinResult_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Planner":
    return new Planner_stub(path, context);
    case "PlanningScene":
    return new PlanningScene_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Planner":
    return new Planner_skel(path,(Planner)obj,context);
    case "PlanningScene":
    return new PlanningScene_skel(path,(PlanningScene)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class EnvState_stub : IStructureStub {
    public EnvState_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    EnvState s = (EnvState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,double[]>(rr_node, rr_context, "joints",s.joints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, "transforms",s.transforms));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.EnvState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    EnvState s=new EnvState();
    s.joints =MessageElementUtil.UnpackMap<string,double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joints"));
    s.transforms =MessageElementUtil.UnpackMap<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"transforms"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointWaypoint_stub : IStructureStub {
    public JointWaypoint_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointWaypoint s = (JointWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_positions",s.joint_positions));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("coeffs",s.coeffs));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_critical",s.is_critical));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.JointWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointWaypoint s=new JointWaypoint();
    s.joint_positions =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_positions"));
    s.coeffs =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"coeffs"));
    s.is_critical =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_critical")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class CartesianWaypoint_stub : IStructureStub {
    public CartesianWaypoint_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    CartesianWaypoint s = (CartesianWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "cartesion_position",ref s.cartesion_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("coeffs",s.coeffs));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_critical",s.is_critical));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.CartesianWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    CartesianWaypoint s=new CartesianWaypoint();
    s.cartesion_position =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"cartesion_position"));
    s.coeffs =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"coeffs"));
    s.is_critical =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_critical")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointTolerancedWaypoint_stub : IStructureStub {
    public JointTolerancedWaypoint_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointTolerancedWaypoint s = (JointTolerancedWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_positions",s.joint_positions));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("lower_tolerance",s.lower_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("upper_tolerance",s.upper_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("coeffs",s.coeffs));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("is_critical",s.is_critical));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.JointTolerancedWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointTolerancedWaypoint s=new JointTolerancedWaypoint();
    s.joint_positions =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_positions"));
    s.lower_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"lower_tolerance"));
    s.upper_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"upper_tolerance"));
    s.coeffs =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"coeffs"));
    s.is_critical =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"is_critical")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PlanningRequest_stub : IStructureStub {
    public PlanningRequest_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PlanningRequest s = (PlanningRequest)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device",s.device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "planner_algorithm",s.planner_algorithm));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "filter_algorithm",s.filter_algorithm));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Box>(rr_node, rr_context, "workspace_bounds",ref s.workspace_bounds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "start_waypoint",s.start_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "goal_waypoint",s.goal_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "intermediate_waypoints",s.intermediate_waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("collision_check",s.collision_check));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("collision_safety_margin",s.collision_safety_margin));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "planner_specific",s.planner_specific));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "filter_specific",s.filter_specific));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.PlanningRequest",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PlanningRequest s=new PlanningRequest();
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device"));
    s.planner_algorithm =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"planner_algorithm"));
    s.filter_algorithm =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"filter_algorithm"));
    s.workspace_bounds =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Box>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"workspace_bounds"));
    s.start_waypoint =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"start_waypoint"));
    s.goal_waypoint =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"goal_waypoint"));
    s.intermediate_waypoints =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"intermediate_waypoints"));
    s.collision_check =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"collision_check")));
    s.collision_safety_margin =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"collision_safety_margin")));
    s.planner_specific =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"planner_specific"));
    s.filter_specific =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"filter_specific"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PlanningResponse_stub : IStructureStub {
    public PlanningResponse_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PlanningResponse s = (PlanningResponse)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<PlannerStatusCode>("status_code",s.status_code));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joint_trajectory",s.joint_trajectory));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.PlanningResponse",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PlanningResponse s=new PlanningResponse();
    s.status_code =MessageElementUtil.UnpackEnum<PlannerStatusCode>(MessageElement.FindElement(m.Elements,"status_code"));
    s.joint_trajectory =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.trajectory.JointTrajectory>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_trajectory"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ContactResult_stub : IStructureStub {
    public ContactResult_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ContactResult s = (ContactResult)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("distance",s.distance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("shape1_type_id",s.shape1_type_id));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("shape2_type_id",s.shape2_type_id));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("shape1_name",s.shape1_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("shape2_name",s.shape2_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("shape1_subid",s.shape1_subid));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("shape2_subid",s.shape2_subid));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "shape1_nearest_point",ref s.shape1_nearest_point));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "shape2_nearest_point",ref s.shape2_nearest_point));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "normal",ref s.normal));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "shape1_cc_nearest_points",ref s.shape1_cc_nearest_points));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "shape2_cc_nearest_points",ref s.shape2_cc_nearest_points));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("cc_time",s.cc_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("cc_type",s.cc_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.ContactResult",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ContactResult s=new ContactResult();
    s.distance =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"distance")));
    s.shape1_type_id =(MessageElementUtil.UnpackScalar<byte>(MessageElement.FindElement(m.Elements,"shape1_type_id")));
    s.shape2_type_id =(MessageElementUtil.UnpackScalar<byte>(MessageElement.FindElement(m.Elements,"shape2_type_id")));
    s.shape1_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"shape1_name"));
    s.shape2_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"shape2_name"));
    s.shape1_subid =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"shape1_subid")));
    s.shape2_subid =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"shape2_subid")));
    s.shape1_nearest_point =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape1_nearest_point"));
    s.shape2_nearest_point =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape2_nearest_point"));
    s.normal =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"normal"));
    s.shape1_cc_nearest_points =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape1_cc_nearest_points"));
    s.shape2_cc_nearest_points =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"shape2_cc_nearest_points"));
    s.cc_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"cc_time")));
    s.cc_type =(MessageElementUtil.UnpackScalar<byte>(MessageElement.FindElement(m.Elements,"cc_type")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class InvKinResult_stub : IStructureStub {
    public InvKinResult_stub(com__robotraconteur__robotics__planningFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__planningFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    InvKinResult s = (InvKinResult)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joints",s.joints));
    return new MessageElementStructure("com.robotraconteur.robotics.planning.InvKinResult",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    InvKinResult s=new InvKinResult();
    s.joints =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joints"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Planner_stub : ServiceStub , Planner {
    public Planner_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<Generator2<PlanningResponse>> plan(PlanningRequest request, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"plan");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "request",request));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<PlanningResponse>("plan",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<List<ContactResult>> compute_contacts(EnvState state, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"compute_contacts");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "state",state));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackList<ContactResult>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<List<InvKinResult>> invkin(string robot_name, com.robotraconteur.geometry.NamedPose tcp_pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"invkin");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("robot_name",robot_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "tcp_pose",tcp_pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackList<InvKinResult>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class PlanningScene_stub : ServiceStub , PlanningScene {
    public PlanningScene_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<EnvState> get_env_state(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "env_state");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<EnvState>(rr_node, rr_context, me);
        }
    public async Task set_env_state(EnvState value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"env_state");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo>> get_robots(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "robots");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, me);
        }
    public async Task set_robots(Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"robots");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotState>> get_robot_states(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "robot_states");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.robotics.robot.RobotState>(rr_node, rr_context, me);
        }
    public async Task set_robot_states(Dictionary<string,com.robotraconteur.robotics.robot.RobotState> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"robot_states");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.robotics.robot.RobotState>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject>> get_shapes(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "shapes");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.geometry.shapes.ShapeObject>(rr_node, rr_context, me);
        }
    public async Task set_shapes(Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"shapes");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.geometry.shapes.ShapeObject>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<string,com.robotraconteur.geometry.NamedTransform>> get_transforms(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "transforms");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, me);
        }
    public async Task set_transforms(Dictionary<string,com.robotraconteur.geometry.NamedTransform> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"transforms");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task add_robot(string name, com.robotraconteur.robotics.robot.RobotInfo robot, com.robotraconteur.geometry.NamedPose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"add_robot");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "robot",robot));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "pose",pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task update_robot_info(string robot_name, com.robotraconteur.robotics.robot.RobotInfo robot, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"update_robot_info");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("robot_name",robot_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "robot",robot));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task update_robot_state(string robot_name, com.robotraconteur.robotics.robot.RobotState robot_state, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"update_robot_state");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("robot_name",robot_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "robot_state",robot_state));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task add_shape(string shape_name, com.robotraconteur.geometry.shapes.ShapeObject shape, com.robotraconteur.geometry.NamedPose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"add_shape");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("shape_name",shape_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "shape",shape));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "pose",pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task remove_item(string name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"remove_item");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task move_item(string name, com.robotraconteur.geometry.NamedPose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"move_item");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "pose",pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Planner_skel : ServiceSkel {
    protected Planner obj;
    public Planner_skel(string p,Planner o,ServerContext c) : base(p,o,c) { obj=(Planner)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "plan":
    {
    PlanningRequest request=MessageElementUtil.UnpackStructure<PlanningRequest>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"request"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<PlanningResponse> rr_ret=await this.obj.plan(request);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<PlanningResponse>(rr_ret,"plan",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "compute_contacts":
    {
    EnvState state=MessageElementUtil.UnpackStructure<EnvState>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"state"));
    List<ContactResult> rr_ret=await this.obj.compute_contacts(state, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackListType<ContactResult>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "invkin":
    {
    string robot_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"robot_name"));
    com.robotraconteur.geometry.NamedPose tcp_pose=MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"tcp_pose"));
    List<InvKinResult> rr_ret=await this.obj.invkin(robot_name, tcp_pose, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackListType<InvKinResult>(rr_node, rr_context, "return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Planner)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Planner)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Planner castobj=(Planner)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Planner)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class PlanningScene_skel : ServiceSkel {
    protected PlanningScene obj;
    public PlanningScene_skel(string p,PlanningScene o,ServerContext c) : base(p,o,c) { obj=(PlanningScene)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "env_state":
    {
    EnvState ret=await obj.get_env_state();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "robots":
    {
    Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo> ret=await obj.get_robots();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    case "robot_states":
    {
    Dictionary<string,com.robotraconteur.robotics.robot.RobotState> ret=await obj.get_robot_states();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.robotics.robot.RobotState>(rr_node, rr_context, "value",ret));
    break;
    }
    case "shapes":
    {
    Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject> ret=await obj.get_shapes();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.geometry.shapes.ShapeObject>(rr_node, rr_context, "value",ret));
    break;
    }
    case "transforms":
    {
    Dictionary<string,com.robotraconteur.geometry.NamedTransform> ret=await obj.get_transforms();
    mr.AddElement(MessageElementUtil.PackMapType<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "env_state":
    {
    await obj.set_env_state(MessageElementUtil.UnpackStructure<EnvState>(rr_node, rr_context, me));
    break;
    }
    case "robots":
    {
    await obj.set_robots(MessageElementUtil.UnpackMap<string,com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, me));
    break;
    }
    case "robot_states":
    {
    await obj.set_robot_states(MessageElementUtil.UnpackMap<string,com.robotraconteur.robotics.robot.RobotState>(rr_node, rr_context, me));
    break;
    }
    case "shapes":
    {
    await obj.set_shapes(MessageElementUtil.UnpackMap<string,com.robotraconteur.geometry.shapes.ShapeObject>(rr_node, rr_context, me));
    break;
    }
    case "transforms":
    {
    await obj.set_transforms(MessageElementUtil.UnpackMap<string,com.robotraconteur.geometry.NamedTransform>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "add_robot":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    com.robotraconteur.robotics.robot.RobotInfo robot=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"robot"));
    com.robotraconteur.geometry.NamedPose pose=MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.add_robot(name, robot, pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "update_robot_info":
    {
    string robot_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"robot_name"));
    com.robotraconteur.robotics.robot.RobotInfo robot=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.robot.RobotInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"robot"));
    await this.obj.update_robot_info(robot_name, robot, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "update_robot_state":
    {
    string robot_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"robot_name"));
    com.robotraconteur.robotics.robot.RobotState robot_state=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.robot.RobotState>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"robot_state"));
    await this.obj.update_robot_state(robot_name, robot_state, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "add_shape":
    {
    string shape_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"shape_name"));
    com.robotraconteur.geometry.shapes.ShapeObject shape=MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.shapes.ShapeObject>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"shape"));
    com.robotraconteur.geometry.NamedPose pose=MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.add_shape(shape_name, shape, pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "remove_item":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    await this.obj.remove_item(name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "move_item":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    com.robotraconteur.geometry.NamedPose pose=MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.move_item(name, pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PlanningScene)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PlanningScene)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    PlanningScene castobj=(PlanningScene)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PlanningScene)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class Planner_default_impl : Planner{
    public virtual Task<Generator2<PlanningResponse>> plan(PlanningRequest request,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<ContactResult>> compute_contacts(EnvState state,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<InvKinResult>> invkin(string robot_name, com.robotraconteur.geometry.NamedPose tcp_pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class PlanningScene_default_impl : PlanningScene{
    public virtual Task<EnvState> get_env_state(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_env_state(EnvState value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo>> get_robots(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_robots(Dictionary<string,com.robotraconteur.robotics.robot.RobotInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.robotics.robot.RobotState>> get_robot_states(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_robot_states(Dictionary<string,com.robotraconteur.robotics.robot.RobotState> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject>> get_shapes(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_shapes(Dictionary<string,com.robotraconteur.geometry.shapes.ShapeObject> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,com.robotraconteur.geometry.NamedTransform>> get_transforms(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_transforms(Dictionary<string,com.robotraconteur.geometry.NamedTransform> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task add_robot(string name, com.robotraconteur.robotics.robot.RobotInfo robot, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task update_robot_info(string robot_name, com.robotraconteur.robotics.robot.RobotInfo robot,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task update_robot_state(string robot_name, com.robotraconteur.robotics.robot.RobotState robot_state,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task add_shape(string shape_name, com.robotraconteur.geometry.shapes.ShapeObject shape, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task remove_item(string name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task move_item(string name, com.robotraconteur.geometry.NamedPose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.robot
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotKinChainInfo")]
public class RobotKinChainInfo
{
    public com.robotraconteur.identifier.Identifier kin_chain_identifier;
    public com.robotraconteur.geometry.Vector3[] H;
    public com.robotraconteur.geometry.Vector3[] P;
    public com.robotraconteur.geometry.SpatialInertia[] link_inertias;
    public List<com.robotraconteur.identifier.Identifier> link_identifiers;
    public uint[] joint_numbers;
    public com.robotraconteur.geometry.Pose flange_pose;
    public com.robotraconteur.identifier.Identifier flange_identifier;
    public com.robotraconteur.robotics.tool.ToolInfo current_tool;
    public com.robotraconteur.robotics.payload.PayloadInfo current_payload;
    public com.robotraconteur.geometry.SpatialVelocity tcp_max_velocity;
    public com.robotraconteur.geometry.SpatialAcceleration tcp_max_acceleration;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotInfo")]
public class RobotInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public RobotType robot_type;
    public List<com.robotraconteur.robotics.joints.JointInfo> joint_info;
    public List<RobotKinChainInfo> chains;
    public uint robot_capabilities;
    public List<com.robotraconteur.signal.SignalInfo> signal_info;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public ushort config_seqno;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotState")]
public class RobotState
{
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.AdvancedRobotState")]
public class AdvancedRobotState
{
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public byte[] joint_position_units;
    public byte[] joint_effort_units;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
    public double trajectory_time;
    public double trajectory_max_time;
    public uint trajectory_current_waypoint;
    public ushort config_seqno;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotStateSensorData")]
public class RobotStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public AdvancedRobotState robot_state;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotJointCommand")]
public class RobotJointCommand
{
    public ulong seqno;
    public ulong state_seqno;
    public double[] command;
    public byte[] units;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.robotics.robot.Robot")]
public interface Robot
{
    Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken));
    Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken));
    Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken));
    Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken));
    Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken));
    Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken));
    Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken));
    Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken));
    Task<List<com.robotraconteur.eventlog.EventLogMessageHeader>> get_current_errors(CancellationToken cancel=default(CancellationToken));
    Task set_current_errors(List<com.robotraconteur.eventlog.EventLogMessageHeader> value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken));
    Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken));
    Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task halt(CancellationToken rr_cancel=default(CancellationToken));
    Task enable(CancellationToken rr_cancel=default(CancellationToken));
    Task disable(CancellationToken rr_cancel=default(CancellationToken));
    Task reset_errors(CancellationToken rr_cancel=default(CancellationToken));
    Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken));
    Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken rr_cancel=default(CancellationToken));
    Task<double[]> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_signal(string signal_name, double[] value_,CancellationToken rr_cancel=default(CancellationToken));
    Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,CancellationToken rr_cancel=default(CancellationToken));
    Task tool_detached(int chain, string tool_name,CancellationToken rr_cancel=default(CancellationToken));
    Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task payload_detached(int chain, string payload_name,CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    event Action<int, string> tool_changed;
    event Action<int, string> payload_changed;
    event Action<string> param_changed;
    Pipe<RobotStateSensorData> robot_state_sensor_data{ get; set; }
    Wire<RobotState> robot_state { get; set; }
    Wire<AdvancedRobotState> advanced_robot_state { get; set; }
    Wire<RobotJointCommand> position_command { get; set; }
    Wire<RobotJointCommand> velocity_command { get; set; }
}

public static class com__robotraconteur__robotics__robotConstants  {
}
    public enum RobotType
    {
    unknown = 0,
    serial = 1,
    dual_arm = 2,
    differential_drive = 3,
    planar = 4,
    floating = 5,
    freeform = 6,
    other = 7
    };
    public enum RobotCommandMode
    {
    invalid_state = -1,
    halt = 0,
    jog = 1,
    trajectory = 2,
    position_command = 3,
    velocity_command = 4,
    homing = 5
    };
    public enum RobotOperationalMode
    {
    undefined = 0,
    manual_reduced_speed = 1,
    manual_full_speed = 2,
    auto = 3,
    cobot = 4
    };
    public enum RobotControllerState
    {
    undefined = 0,
    init = 1,
    motor_on = 2,
    motor_off = 3,
    guard_stop = 4,
    emergency_stop = 5,
    emergency_stop_reset = 6
    };
    public enum RobotCapabilities
    {
    unknown = 0,
    jog_command = 0x1,
    trajectory_command = 0x2,
    position_command = 0x4,
    velocity_command = 0x8,
    homing_command = 0x10,
    software_reset_errors = 0x20,
    software_enable = 0x40
    };
    public enum RobotStateFlags
    {
    unknown = 0,
    error = 0x1,
    fatal_error = 0x2,
    estop = 0x4,
    estop_button1 = 0x8,
    estop_button2 = 0x10,
    estop_button3 = 0x20,
    estop_button4 = 0x40,
    estop_guard1 = 0x80,
    estop_guard2 = 0x100,
    estop_guard3 = 0x200,
    estop_guard4 = 0x400,
    estop_software = 0x800,
    estop_fault = 0x1000,
    estop_internal = 0x2000,
    estop_other = 0x4000,
    estop_released = 0x8000,
    enabling_switch = 0x10000,
    enabled = 0x20000,
    ready = 0x40000,
    homed = 0x80000,
    homing_required = 0x100000,
    communication_failure = 0x200000,
    valid_position_command = 0x1000000,
    valid_velocity_command = 0x2000000,
    trajectory_running = 0x4000000
    };
}

namespace com.robotraconteur.robotics.robot
{
public class com__robotraconteur__robotics__robotFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.robot\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.signal\nimport com.robotraconteur.param\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.robotics.tool\nimport com.robotraconteur.robotics.payload\nimport com.robotraconteur.robotics.trajectory\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\nimport com.robotraconteur.eventlog\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.SpatialVelocity\nusing com.robotraconteur.geometry.SpatialAcceleration\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.signal.SignalInfo\nusing com.robotraconteur.robotics.joints.JointInfo\nusing com.robotraconteur.robotics.tool.ToolInfo\nusing com.robotraconteur.robotics.payload.PayloadInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.robotics.trajectory.TrajectoryStatus\nusing com.robotraconteur.robotics.trajectory.JointTrajectory\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\nusing com.robotraconteur.eventlog.EventLogMessageHeader\n\nenum RobotType\nunknown = 0,\nserial = 1,\ndual_arm,\ndifferential_drive,\nplanar,\nfloating,\nfreeform,\nother\nend\n\nenum RobotCommandMode\ninvalid_state = -1,\nhalt = 0,\njog,\ntrajectory,\nposition_command,\nvelocity_command,\nhoming\nend\n\nenum RobotOperationalMode\nundefined = 0,\nmanual_reduced_speed,\nmanual_full_speed,\nauto,\ncobot\nend\n\nenum RobotControllerState\nundefined = 0,\ninit = 1,\nmotor_on,\nmotor_off,\nguard_stop,\nemergency_stop,\nemergency_stop_reset\nend\n\nenum RobotCapabilities\nunknown = 0,\njog_command = 0x1,\ntrajectory_command = 0x2,\nposition_command = 0x4,\nvelocity_command = 0x8,\nhoming_command = 0x10,\nsoftware_reset_errors = 0x20,\nsoftware_enable = 0x40\nend\n\nenum RobotStateFlags\nunknown = 0,\nerror = 0x1,\nfatal_error = 0x2,\nestop = 0x4,\nestop_button1 = 0x8,\nestop_button2 = 0x10,\nestop_button3 = 0x20,\nestop_button4 = 0x40,\nestop_guard1 = 0x80,\nestop_guard2 = 0x100,\nestop_guard3 = 0x200,\nestop_guard4 = 0x400,\nestop_software = 0x800,\nestop_fault = 0x1000,\nestop_internal = 0x2000,\nestop_other = 0x4000,\nestop_released = 0x8000,\nenabling_switch = 0x10000,\nenabled = 0x20000,\nready = 0x40000,\nhomed = 0x80000,\nhoming_required = 0x100000,\ncommunication_failure = 0x200000,\nvalid_position_command = 0x1000000,\nvalid_velocity_command = 0x2000000,\ntrajectory_running = 0x4000000\nend\n\nstruct RobotKinChainInfo\nfield Identifier kin_chain_identifier\nfield Vector3[] H\nfield Vector3[] P\nfield SpatialInertia[] link_inertias\nfield Identifier{list} link_identifiers\nfield uint32[] joint_numbers\nfield Pose flange_pose\nfield Identifier flange_identifier\nfield ToolInfo current_tool\nfield PayloadInfo current_payload\nfield SpatialVelocity tcp_max_velocity\nfield SpatialAcceleration tcp_max_acceleration\nfield varvalue{string} extended\nend\n\nstruct RobotInfo\nfield DeviceInfo device_info\nfield RobotType robot_type\nfield JointInfo{list} joint_info\nfield RobotKinChainInfo{list} chains\nfield uint32 robot_capabilities\nfield SignalInfo{list} signal_info\nfield ParameterInfo{list} parameter_info\nfield uint16 config_seqno\nfield varvalue{string} extended\nend\n\nstruct RobotState\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nend\n\nstruct AdvancedRobotState\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield uint8[] joint_position_units\nfield uint8[] joint_effort_units\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nfield double trajectory_time\nfield double trajectory_max_time\nfield uint32 trajectory_current_waypoint\nfield uint16 config_seqno\nend\n\nstruct RobotStateSensorData\nfield SensorDataHeader data_header\nfield AdvancedRobotState robot_state\nend\n\nstruct RobotJointCommand\nfield uint64 seqno\nfield uint64 state_seqno\nfield double[] command\n# Use JointUnits values\nfield uint8[] units\nend\n\nobject Robot\nproperty RobotInfo robot_info [readonly,nolock]\nproperty RobotCommandMode command_mode [nolockread]\nproperty RobotOperationalMode operational_mode [readonly, nolock]\nproperty RobotControllerState controller_state [readonly, nolock]\nproperty EventLogMessageHeader{list} current_errors [readonly, nolock]\nfunction void halt() [urgent]\nfunction void enable()\nfunction void disable() [urgent]\nfunction void reset_errors()\nproperty double speed_ratio\nfunction void jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait)\nfunction void jog_cartesian(Pose{int32} target_pose, SpatialVelocity{int32} max_velocity, bool relative, bool wait)\nfunction TrajectoryStatus{generator} execute_trajectory(JointTrajectory trajectory)\nwire RobotState robot_state [readonly,nolock]\nwire AdvancedRobotState advanced_robot_state [readonly,nolock]\npipe RobotStateSensorData robot_state_sensor_data [readonly,nolock]\nproperty uint32 update_downsample [perclient]\nproperty double update_rate [readonly]\nwire RobotJointCommand position_command [writeonly]\nwire RobotJointCommand velocity_command [writeonly]\nfunction ActionStatusCode{generator} home()\nfunction double[] getf_signal(string signal_name)\nfunction void setf_signal(string signal_name, double[] value)\nfunction void tool_attached(int32 chain, ToolInfo tool)\nfunction void tool_detached(int32 chain, string tool_name)\nevent tool_changed(int32 chain, string tool_name)\nfunction void payload_attached(int32 chain, PayloadInfo payload, Pose pose)\nfunction void payload_detached(int32 chain, string payload_name)\nevent payload_changed(int32 chain, string payload_name)\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nevent param_changed(string param_name)\nend\n\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.robot";}
    public RobotKinChainInfo_stub RobotKinChainInfo_stubentry;
    public RobotInfo_stub RobotInfo_stubentry;
    public RobotState_stub RobotState_stubentry;
    public AdvancedRobotState_stub AdvancedRobotState_stubentry;
    public RobotStateSensorData_stub RobotStateSensorData_stubentry;
    public RobotJointCommand_stub RobotJointCommand_stubentry;
    public com__robotraconteur__robotics__robotFactory() : this(null,null) {}
    public com__robotraconteur__robotics__robotFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    RobotKinChainInfo_stubentry=new RobotKinChainInfo_stub(this,this.node,this.context);
    RobotInfo_stubentry=new RobotInfo_stub(this,this.node,this.context);
    RobotState_stubentry=new RobotState_stub(this,this.node,this.context);
    AdvancedRobotState_stubentry=new AdvancedRobotState_stub(this,this.node,this.context);
    RobotStateSensorData_stubentry=new RobotStateSensorData_stub(this,this.node,this.context);
    RobotJointCommand_stubentry=new RobotJointCommand_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="RobotKinChainInfo")
    return RobotKinChainInfo_stubentry;
    if (objecttype=="RobotInfo")
    return RobotInfo_stubentry;
    if (objecttype=="RobotState")
    return RobotState_stubentry;
    if (objecttype=="AdvancedRobotState")
    return AdvancedRobotState_stubentry;
    if (objecttype=="RobotStateSensorData")
    return RobotStateSensorData_stubentry;
    if (objecttype=="RobotJointCommand")
    return RobotJointCommand_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Robot":
    return new Robot_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Robot":
    return new Robot_skel(path,(Robot)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class RobotKinChainInfo_stub : IStructureStub {
    public RobotKinChainInfo_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotKinChainInfo s = (RobotKinChainInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "kin_chain_identifier",s.kin_chain_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "H",s.H));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "P",s.P));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "link_inertias",s.link_inertias));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, "link_identifiers",s.link_identifiers));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("joint_numbers",s.joint_numbers));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "flange_pose",ref s.flange_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "flange_identifier",s.flange_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "current_tool",s.current_tool));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "current_payload",s.current_payload));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "tcp_max_velocity",ref s.tcp_max_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialAcceleration>(rr_node, rr_context, "tcp_max_acceleration",ref s.tcp_max_acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotKinChainInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotKinChainInfo s=new RobotKinChainInfo();
    s.kin_chain_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_identifier"));
    s.H =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"H"));
    s.P =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"P"));
    s.link_inertias =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"link_inertias"));
    s.link_identifiers =MessageElementUtil.UnpackList<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"link_identifiers"));
    s.joint_numbers =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"joint_numbers"));
    s.flange_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"flange_pose"));
    s.flange_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"flange_identifier"));
    s.current_tool =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"current_tool"));
    s.current_payload =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"current_payload"));
    s.tcp_max_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp_max_velocity"));
    s.tcp_max_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp_max_acceleration"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotInfo_stub : IStructureStub {
    public RobotInfo_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotInfo s = (RobotInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotType>("robot_type",s.robot_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointInfo>(rr_node, rr_context, "joint_info",s.joint_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<RobotKinChainInfo>(rr_node, rr_context, "chains",s.chains));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("robot_capabilities",s.robot_capabilities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, "signal_info",s.signal_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotInfo s=new RobotInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.robot_type =MessageElementUtil.UnpackEnum<RobotType>(MessageElement.FindElement(m.Elements,"robot_type"));
    s.joint_info =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_info"));
    s.chains =MessageElementUtil.UnpackList<RobotKinChainInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"chains"));
    s.robot_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"robot_capabilities")));
    s.signal_info =MessageElementUtil.UnpackList<com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_info"));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_info"));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(m.Elements,"config_seqno")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotState_stub : IStructureStub {
    public RobotState_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotState s = (RobotState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotState s=new RobotState();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(m.Elements,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(m.Elements,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(m.Elements,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity_command"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"trajectory_running")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedRobotState_stub : IStructureStub {
    public AdvancedRobotState_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedRobotState s = (AdvancedRobotState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("joint_position_units",s.joint_position_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_max_time",s.trajectory_max_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("trajectory_current_waypoint",s.trajectory_current_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.AdvancedRobotState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedRobotState s=new AdvancedRobotState();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(m.Elements,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(m.Elements,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(m.Elements,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity_command"));
    s.joint_position_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"joint_position_units"));
    s.joint_effort_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"joint_effort_units"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"trajectory_running")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_time")));
    s.trajectory_max_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_max_time")));
    s.trajectory_current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"trajectory_current_waypoint")));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(m.Elements,"config_seqno")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotStateSensorData_stub : IStructureStub {
    public RobotStateSensorData_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotStateSensorData s = (RobotStateSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "robot_state",s.robot_state));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotStateSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotStateSensorData s=new RobotStateSensorData();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.robot_state =MessageElementUtil.UnpackStructure<AdvancedRobotState>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"robot_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotJointCommand_stub : IStructureStub {
    public RobotJointCommand_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotJointCommand s = (RobotJointCommand)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("state_seqno",s.state_seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("command",s.command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("units",s.units));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotJointCommand",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotJointCommand s=new RobotJointCommand();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.state_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"state_seqno")));
    s.command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"command"));
    s.units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"units"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Robot_stub : ServiceStub , Robot {
    private Pipe<RobotStateSensorData> rr_robot_state_sensor_data;
    private Wire<RobotState> rr_robot_state;
    private Wire<AdvancedRobotState> rr_advanced_robot_state;
    private Wire<RobotJointCommand> rr_position_command;
    private Wire<RobotJointCommand> rr_velocity_command;
    public Robot_stub(string path, ClientContext c) : base(path, c) {
    rr_robot_state_sensor_data=new PipeClient<RobotStateSensorData>("robot_state_sensor_data", this);
    rr_robot_state=new WireClient<RobotState>("robot_state", this);
    rr_advanced_robot_state=new WireClient<AdvancedRobotState>("advanced_robot_state", this);
    rr_position_command=new WireClient<RobotJointCommand>("position_command", this);
    rr_velocity_command=new WireClient<RobotJointCommand>("velocity_command", this);
    }
    public async Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "robot_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<RobotInfo>(rr_node, rr_context, me);
        }
    public async Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"robot_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "command_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotCommandMode>(me);
        }
    public async Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"command_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "operational_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotOperationalMode>(me);
        }
    public async Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"operational_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "controller_state");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotControllerState>(me);
        }
    public async Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"controller_state");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<com.robotraconteur.eventlog.EventLogMessageHeader>> get_current_errors(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "current_errors");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<com.robotraconteur.eventlog.EventLogMessageHeader>(rr_node, rr_context, me);
        }
    public async Task set_current_errors(List<com.robotraconteur.eventlog.EventLogMessageHeader> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"current_errors");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.eventlog.EventLogMessageHeader>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "speed_ratio");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"speed_ratio");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_downsample");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_downsample");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task halt(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"halt");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task enable(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"enable");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task disable(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"disable");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task reset_errors(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"reset_errors");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"jog_joint");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("joint_position",joint_position));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("relative",relative));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("wait",wait));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"jog_cartesian");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.Pose>(rr_node, rr_context, "target_pose",target_pose));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "max_velocity",max_velocity));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("relative",relative));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("wait",wait));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"execute_trajectory");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "trajectory",trajectory));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<com.robotraconteur.robotics.trajectory.TrajectoryStatus>("execute_trajectory",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"home");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<com.robotraconteur.action.ActionStatusCode>("home",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<double[]> getf_signal(string signal_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackArray<double>(rr_me.FindElement("return"));
    }
    public async Task setf_signal(string signal_name, double[] value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"tool_attached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "tool",tool));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task tool_detached(int chain, string tool_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"tool_detached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("tool_name",tool_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"payload_attached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "payload",payload));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task payload_detached(int chain, string payload_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"payload_detached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("payload_name",payload_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public event Action<int, string> tool_changed;
    public event Action<int, string> payload_changed;
    public event Action<string> param_changed;
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    case "tool_changed":
    {
    if (tool_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("chain")));
    string tool_name=MessageElementUtil.UnpackString(rr_m.FindElement("tool_name"));
    tool_changed(chain, tool_name);
    }
    return;
    }
    case "payload_changed":
    {
    if (payload_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("chain")));
    string payload_name=MessageElementUtil.UnpackString(rr_m.FindElement("payload_name"));
    payload_changed(chain, payload_name);
    }
    return;
    }
    case "param_changed":
    {
    if (param_changed != null) { 
    string param_name=MessageElementUtil.UnpackString(rr_m.FindElement("param_name"));
    param_changed(param_name);
    }
    return;
    }
    default:
    break;
    }
    }
    public Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rr_robot_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotState> robot_state {
    get { return rr_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<AdvancedRobotState> advanced_robot_state {
    get { return rr_advanced_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> position_command {
    get { return rr_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> velocity_command {
    get { return rr_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "robot_state_sensor_data":
    this.rr_robot_state_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "robot_state":
    this.rr_robot_state.WirePacketReceived(m);
    break;
    case "advanced_robot_state":
    this.rr_advanced_robot_state.WirePacketReceived(m);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Robot_skel : ServiceSkel {
    protected Robot obj;
    public Robot_skel(string p,Robot o,ServerContext c) : base(p,o,c) { obj=(Robot)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "robot_info":
    {
    RobotInfo ret=await obj.get_robot_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "command_mode":
    {
    RobotCommandMode ret=await obj.get_command_mode();
    mr.AddElement(MessageElementUtil.PackEnum<RobotCommandMode>("value",ret));
    break;
    }
    case "operational_mode":
    {
    RobotOperationalMode ret=await obj.get_operational_mode();
    mr.AddElement(MessageElementUtil.PackEnum<RobotOperationalMode>("value",ret));
    break;
    }
    case "controller_state":
    {
    RobotControllerState ret=await obj.get_controller_state();
    mr.AddElement(MessageElementUtil.PackEnum<RobotControllerState>("value",ret));
    break;
    }
    case "current_errors":
    {
    List<com.robotraconteur.eventlog.EventLogMessageHeader> ret=await obj.get_current_errors();
    mr.AddElement(MessageElementUtil.PackListType<com.robotraconteur.eventlog.EventLogMessageHeader>(rr_node, rr_context, "value",ret));
    break;
    }
    case "speed_ratio":
    {
    double ret=await obj.get_speed_ratio();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "update_downsample":
    {
    uint ret=await obj.get_update_downsample();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "robot_info":
    {
    await obj.set_robot_info(MessageElementUtil.UnpackStructure<RobotInfo>(rr_node, rr_context, me));
    break;
    }
    case "command_mode":
    {
    await obj.set_command_mode(MessageElementUtil.UnpackEnum<RobotCommandMode>(me));
    break;
    }
    case "operational_mode":
    {
    await obj.set_operational_mode(MessageElementUtil.UnpackEnum<RobotOperationalMode>(me));
    break;
    }
    case "controller_state":
    {
    await obj.set_controller_state(MessageElementUtil.UnpackEnum<RobotControllerState>(me));
    break;
    }
    case "current_errors":
    {
    await obj.set_current_errors(MessageElementUtil.UnpackList<com.robotraconteur.eventlog.EventLogMessageHeader>(rr_node, rr_context, me));
    break;
    }
    case "speed_ratio":
    {
    await obj.set_speed_ratio((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "update_downsample":
    {
    await obj.set_update_downsample((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "halt":
    {
    await this.obj.halt(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "enable":
    {
    await this.obj.enable(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "disable":
    {
    await this.obj.disable(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "reset_errors":
    {
    await this.obj.reset_errors(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "jog_joint":
    {
    double[] joint_position=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"joint_position"));
    double[] max_velocity=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"max_velocity"));
    bool relative=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"relative")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"wait")));
    await this.obj.jog_joint(joint_position, max_velocity, relative, wait, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "jog_cartesian":
    {
    Dictionary<int,com.robotraconteur.geometry.Pose> target_pose=MessageElementUtil.UnpackMap<int,com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"target_pose"));
    Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity=MessageElementUtil.UnpackMap<int,com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"max_velocity"));
    bool relative=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"relative")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"wait")));
    await this.obj.jog_cartesian(target_pose, max_velocity, relative, wait, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "execute_trajectory":
    {
    com.robotraconteur.robotics.trajectory.JointTrajectory trajectory=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.trajectory.JointTrajectory>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"trajectory"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> rr_ret=await this.obj.execute_trajectory(trajectory);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<com.robotraconteur.robotics.trajectory.TrajectoryStatus>(rr_ret,"execute_trajectory",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "home":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<com.robotraconteur.action.ActionStatusCode> rr_ret=await this.obj.home();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<com.robotraconteur.action.ActionStatusCode>(rr_ret,"home",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "getf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    double[] rr_ret=await this.obj.getf_signal(signal_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackArray<double>("return",rr_ret));
    break;
    }
    case "setf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    double[] value_=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_signal(signal_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "tool_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.tool.ToolInfo tool=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"tool"));
    await this.obj.tool_attached(chain, tool, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "tool_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    string tool_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"tool_name"));
    await this.obj.tool_detached(chain, tool_name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "payload_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.payload.PayloadInfo payload=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"payload"));
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.payload_attached(chain, payload, pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "payload_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    string payload_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"payload_name"));
    await this.obj.payload_detached(chain, payload_name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed+=rr_tool_changed;
    obj.payload_changed+=rr_payload_changed;
    obj.param_changed+=rr_param_changed;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed-=rr_tool_changed;
    obj.payload_changed-=rr_payload_changed;
    obj.param_changed-=rr_param_changed;
    }
    public void rr_tool_changed(int chain, string tool_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"tool_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("tool_name",tool_name));
    this.SendEvent(rr_mm);
    }
    public void rr_payload_changed(int chain, string payload_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"payload_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("payload_name",payload_name));
    this.SendEvent(rr_mm);
    }
    public void rr_param_changed(string param_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"param_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("param_name",param_name));
    this.SendEvent(rr_mm);
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<RobotStateSensorData> rr_robot_state_sensor_data;
    private WireServer<RobotState> rr_robot_state;
    private WireServer<AdvancedRobotState> rr_advanced_robot_state;
    private WireServer<RobotJointCommand> rr_position_command;
    private WireServer<RobotJointCommand> rr_velocity_command;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Robot castobj=(Robot)o;
    this.rr_robot_state_sensor_data=new PipeServer<RobotStateSensorData>("robot_state_sensor_data",this);
    this.rr_robot_state=new WireServer<RobotState>("robot_state",this);
    this.rr_advanced_robot_state=new WireServer<AdvancedRobotState>("advanced_robot_state",this);
    this.rr_position_command=new WireServer<RobotJointCommand>("position_command",this);
    this.rr_velocity_command=new WireServer<RobotJointCommand>("velocity_command",this);
    castobj.robot_state_sensor_data=this.rr_robot_state_sensor_data;
    castobj.robot_state=this.rr_robot_state;
    castobj.advanced_robot_state=this.rr_advanced_robot_state;
    castobj.position_command=this.rr_position_command;
    castobj.velocity_command=this.rr_velocity_command;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Robot)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "robot_state_sensor_data":
    return await this.rr_robot_state_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "robot_state":
    return await this.rr_robot_state.WireCommand(m,e);
    case "advanced_robot_state":
    return await this.rr_advanced_robot_state.WireCommand(m,e);
    case "position_command":
    return await this.rr_position_command.WireCommand(m,e);
    case "velocity_command":
    return await this.rr_velocity_command.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "robot_state_sensor_data":
    this.rr_robot_state_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "robot_state":
    this.rr_robot_state.WirePacketReceived(m,e);
    break;
    case "advanced_robot_state":
    this.rr_advanced_robot_state.WirePacketReceived(m,e);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m,e);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "robot_info") return true;
    if (m.MemberName == "command_mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "operational_mode") return true;
    if (m.MemberName == "controller_state") return true;
    if (m.MemberName == "current_errors") return true;
    if (m.MemberName == "robot_state") return true;
    if (m.MemberName == "advanced_robot_state") return true;
    if (m.MemberName == "robot_state_sensor_data") return true;
    return false;
    }
}
public class Robot_default_impl : Robot{
    protected PipeBroadcaster<RobotStateSensorData> rrvar_robot_state_sensor_data;
    protected WireBroadcaster<RobotState> rrvar_robot_state;
    protected WireBroadcaster<AdvancedRobotState> rrvar_advanced_robot_state;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_position_command;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_velocity_command;
    public virtual Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<com.robotraconteur.eventlog.EventLogMessageHeader>> get_current_errors(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_current_errors(List<com.robotraconteur.eventlog.EventLogMessageHeader> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task halt(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task enable(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task disable(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task reset_errors(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double[]> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_signal(string signal_name, double[] value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task tool_detached(int chain, string tool_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task payload_detached(int chain, string payload_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual event Action<int, string> tool_changed;
    public virtual event Action<int, string> payload_changed;
    public virtual event Action<string> param_changed;
    public virtual Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rrvar_robot_state_sensor_data.Pipe;  }
    set {
    if (rrvar_robot_state_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state_sensor_data= new PipeBroadcaster<RobotStateSensorData>(value);
    }
    }
    public virtual Wire<RobotState> robot_state {
    get { return rrvar_robot_state.Wire;  }
    set {
    if (rrvar_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state= new WireBroadcaster<RobotState>(value);
    }
    }
    public virtual Wire<AdvancedRobotState> advanced_robot_state {
    get { return rrvar_advanced_robot_state.Wire;  }
    set {
    if (rrvar_advanced_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_advanced_robot_state= new WireBroadcaster<AdvancedRobotState>(value);
    }
    }
    public virtual Wire<RobotJointCommand> position_command {
    get { return rrvar_position_command.Wire;  }
    set {
    if (rrvar_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
    public virtual Wire<RobotJointCommand> velocity_command {
    get { return rrvar_velocity_command.Wire;  }
    set {
    if (rrvar_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.sensor
{
[RobotRaconteurServiceStruct("com.robotraconteur.sensor.SensorInfo")]
public class SensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public SensorTypeCode sensor_type;
    public List<com.robotraconteur.units.SIUnit> units;
    public com.robotraconteur.datatype.DataType data_type;
    public double[] sensor_resolution;
    public bool analog_sensor;
    public double update_frequency;
    public Dictionary<string,com.robotraconteur.param.ParameterInfo> parameter_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.sensor.SensorData")]
public class SensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public double[] data;
    public com.robotraconteur.datatype.DataType data_type;
    public Dictionary<string,object> parameters;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.Sensor")]
public interface Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.Vector2Sensor")]
public interface Vector2Sensor : Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.Vector3Sensor")]
public interface Vector3Sensor : Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.Vector6Sensor")]
public interface Vector6Sensor : Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.WrenchSensor")]
public interface WrenchSensor : Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.sensor.FreeformSensor")]
public interface FreeformSensor : Sensor
{
    Task<bool> get_active(CancellationToken cancel=default(CancellationToken));
    Task set_active(bool value, CancellationToken cancel=default(CancellationToken));
    Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken));
    Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value { get; set; }
    Wire<object> freeform_sensor_value { get; set; }
}

public static class com__robotraconteur__sensorConstants  {
}
    public enum SensorTypeCode
    {
    unknown = 0,
    generic_digital = 1,
    generic_analog = 2,
    pushbutton = 3,
    dial = 4,
    limitswitch = 5,
    infrared = 6,
    pressure = 7,
    vacuum = 8,
    temperature = 9,
    humidity = 10,
    level = 11,
    contact = 12,
    ultrasonic = 13,
    magnetic = 14,
    encoder = 15,
    potentiometer = 16,
    resolver = 17,
    linear_encoder = 18,
    linear_potentiometer = 19,
    lvds = 20,
    accelerometer = 21,
    gyroscopic = 22,
    velocity = 23,
    angular_velocity = 24,
    spatial_velocity = 25,
    torque = 26,
    force = 27,
    proximity = 28,
    voltage = 29,
    current = 30,
    laser = 31,
    flow = 32,
    pyrometer = 33,
    forcetorque = 34,
    light_color = 35,
    light_intensity = 36,
    object_color = 37,
    altitude = 38
    };
}

namespace com.robotraconteur.sensor
{
public class com__robotraconteur__sensorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.sensor\n\nstdver 0.9\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.geometry\nimport com.robotraconteur.units\nimport com.robotraconteur.datatype\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.geometry.Vector2\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Vector6\nusing com.robotraconteur.geometry.Wrench\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.datatype.DataType\n\nenum SensorTypeCode\nunknown = 0,\ngeneric_digital,\ngeneric_analog,\npushbutton,\ndial,\nlimitswitch,\ninfrared,\npressure,\nvacuum,\ntemperature,\nhumidity,\nlevel,\ncontact,\nultrasonic,\nmagnetic,\nencoder,\npotentiometer,\nresolver,\nlinear_encoder,\nlinear_potentiometer,\nlvds,\naccelerometer,\ngyroscopic,\nvelocity,\nangular_velocity,\nspatial_velocity,\ntorque,\nforce,\nproximity,\nvoltage,\ncurrent,\nlaser,\nflow,\npyrometer,\nforcetorque,\nlight_color,\nlight_intensity,\nobject_color,\naltitude\nend\n\nstruct SensorInfo\nfield DeviceInfo device_info\nfield SensorTypeCode sensor_type\nfield SIUnit{list} units\nfield DataType data_type\nfield double[] sensor_resolution\nfield bool analog_sensor\nfield double update_frequency\nfield ParameterInfo{string} parameter_info\nfield varvalue{string} extended\nend\n\nstruct SensorData\nfield SensorDataHeader data_header\nfield double[] data\nfield DataType data_type\nfield varvalue{string} parameters\nfield varvalue{string} extended\nend\n\nobject Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject Vector2Sensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector2 vector2_sensor_value [readonly,nolock]\nend\n\nobject Vector3Sensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector3 vector3_sensor_value [readonly,nolock]\nend\n\nobject Vector6Sensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector6 vector6_sensor_value [readonly,nolock]\nend\n\nobject WrenchSensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Wrench wrench_sensor_value [readonly,nolock]\nend\n\nobject FreeformSensor\nimplements Sensor\nproperty bool active\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire varvalue freeform_sensor_value [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.sensor";}
    public SensorInfo_stub SensorInfo_stubentry;
    public SensorData_stub SensorData_stubentry;
    public com__robotraconteur__sensorFactory() : this(null,null) {}
    public com__robotraconteur__sensorFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SensorInfo_stubentry=new SensorInfo_stub(this,this.node,this.context);
    SensorData_stubentry=new SensorData_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorInfo")
    return SensorInfo_stubentry;
    if (objecttype=="SensorData")
    return SensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Sensor":
    return new Sensor_stub(path, context);
    case "Vector2Sensor":
    return new Vector2Sensor_stub(path, context);
    case "Vector3Sensor":
    return new Vector3Sensor_stub(path, context);
    case "Vector6Sensor":
    return new Vector6Sensor_stub(path, context);
    case "WrenchSensor":
    return new WrenchSensor_stub(path, context);
    case "FreeformSensor":
    return new FreeformSensor_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Sensor":
    return new Sensor_skel(path,(Sensor)obj,context);
    case "Vector2Sensor":
    return new Vector2Sensor_skel(path,(Vector2Sensor)obj,context);
    case "Vector3Sensor":
    return new Vector3Sensor_skel(path,(Vector3Sensor)obj,context);
    case "Vector6Sensor":
    return new Vector6Sensor_skel(path,(Vector6Sensor)obj,context);
    case "WrenchSensor":
    return new WrenchSensor_skel(path,(WrenchSensor)obj,context);
    case "FreeformSensor":
    return new FreeformSensor_skel(path,(FreeformSensor)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorInfo_stub : IStructureStub {
    public SensorInfo_stub(com__robotraconteur__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorInfo s = (SensorInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<SensorTypeCode>("sensor_type",s.sensor_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>(rr_node, rr_context, "units",s.units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("sensor_resolution",s.sensor_resolution));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("analog_sensor",s.analog_sensor));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("update_frequency",s.update_frequency));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.sensor.SensorInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorInfo s=new SensorInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.sensor_type =MessageElementUtil.UnpackEnum<SensorTypeCode>(MessageElement.FindElement(m.Elements,"sensor_type"));
    s.units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"units"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.sensor_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"sensor_resolution"));
    s.analog_sensor =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"analog_sensor")));
    s.update_frequency =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"update_frequency")));
    s.parameter_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class SensorData_stub : IStructureStub {
    public SensorData_stub(com__robotraconteur__sensorFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensorFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorData s = (SensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("data",s.data));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "parameters",s.parameters));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.sensor.SensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorData s=new SensorData();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.data =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"data"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.parameters =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameters"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Sensor_stub : ServiceStub , Sensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    public Sensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Vector2Sensor_stub : ServiceStub , Vector2Sensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector2> rr_vector2_sensor_value;
    public Vector2Sensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_vector2_sensor_value=new WireClient<com.robotraconteur.geometry.Vector2>("vector2_sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value {
    get { return rr_vector2_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "vector2_sensor_value":
    this.rr_vector2_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Vector3Sensor_stub : ServiceStub , Vector3Sensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector3> rr_vector3_sensor_value;
    public Vector3Sensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_vector3_sensor_value=new WireClient<com.robotraconteur.geometry.Vector3>("vector3_sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value {
    get { return rr_vector3_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "vector3_sensor_value":
    this.rr_vector3_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Vector6Sensor_stub : ServiceStub , Vector6Sensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector6> rr_vector6_sensor_value;
    public Vector6Sensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_vector6_sensor_value=new WireClient<com.robotraconteur.geometry.Vector6>("vector6_sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value {
    get { return rr_vector6_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "vector6_sensor_value":
    this.rr_vector6_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class WrenchSensor_stub : ServiceStub , WrenchSensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Wrench> rr_wrench_sensor_value;
    public WrenchSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_wrench_sensor_value=new WireClient<com.robotraconteur.geometry.Wrench>("wrench_sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value {
    get { return rr_wrench_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "wrench_sensor_value":
    this.rr_wrench_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class FreeformSensor_stub : ServiceStub , FreeformSensor {
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<object> rr_freeform_sensor_value;
    public FreeformSensor_stub(string path, ClientContext c) : base(path, c) {
    rr_sensor_data=new PipeClient<SensorData>("sensor_data", this);
    rr_sensor_value=new WireClient<double[]>("sensor_value", this);
    rr_freeform_sensor_value=new WireClient<object>("freeform_sensor_value", this);
    }
    public async Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "active");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"active");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "sensor_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me);
        }
    public async Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"sensor_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<object> freeform_sensor_value {
    get { return rr_freeform_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m);
    break;
    case "freeform_sensor_value":
    this.rr_freeform_sensor_value.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Sensor_skel : ServiceSkel {
    protected Sensor obj;
    public Sensor_skel(string p,Sensor o,ServerContext c) : base(p,o,c) { obj=(Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Sensor castobj=(Sensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    return false;
    }
}
public class Vector2Sensor_skel : ServiceSkel {
    protected Vector2Sensor obj;
    public Vector2Sensor_skel(string p,Vector2Sensor o,ServerContext c) : base(p,o,c) { obj=(Vector2Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<com.robotraconteur.geometry.Vector2> rr_vector2_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Vector2Sensor castobj=(Vector2Sensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_vector2_sensor_value=new WireServer<com.robotraconteur.geometry.Vector2>("vector2_sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.vector2_sensor_value=this.rr_vector2_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "vector2_sensor_value":
    return await this.rr_vector2_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "vector2_sensor_value":
    this.rr_vector2_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "vector2_sensor_value") return true;
    return false;
    }
}
public class Vector3Sensor_skel : ServiceSkel {
    protected Vector3Sensor obj;
    public Vector3Sensor_skel(string p,Vector3Sensor o,ServerContext c) : base(p,o,c) { obj=(Vector3Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<com.robotraconteur.geometry.Vector3> rr_vector3_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Vector3Sensor castobj=(Vector3Sensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_vector3_sensor_value=new WireServer<com.robotraconteur.geometry.Vector3>("vector3_sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.vector3_sensor_value=this.rr_vector3_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "vector3_sensor_value":
    return await this.rr_vector3_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "vector3_sensor_value":
    this.rr_vector3_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "vector3_sensor_value") return true;
    return false;
    }
}
public class Vector6Sensor_skel : ServiceSkel {
    protected Vector6Sensor obj;
    public Vector6Sensor_skel(string p,Vector6Sensor o,ServerContext c) : base(p,o,c) { obj=(Vector6Sensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<com.robotraconteur.geometry.Vector6> rr_vector6_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Vector6Sensor castobj=(Vector6Sensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_vector6_sensor_value=new WireServer<com.robotraconteur.geometry.Vector6>("vector6_sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.vector6_sensor_value=this.rr_vector6_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "vector6_sensor_value":
    return await this.rr_vector6_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "vector6_sensor_value":
    this.rr_vector6_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "vector6_sensor_value") return true;
    return false;
    }
}
public class WrenchSensor_skel : ServiceSkel {
    protected WrenchSensor obj;
    public WrenchSensor_skel(string p,WrenchSensor o,ServerContext c) : base(p,o,c) { obj=(WrenchSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<com.robotraconteur.geometry.Wrench> rr_wrench_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    WrenchSensor castobj=(WrenchSensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_wrench_sensor_value=new WireServer<com.robotraconteur.geometry.Wrench>("wrench_sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.wrench_sensor_value=this.rr_wrench_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "wrench_sensor_value":
    return await this.rr_wrench_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "wrench_sensor_value":
    this.rr_wrench_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "wrench_sensor_value") return true;
    return false;
    }
}
public class FreeformSensor_skel : ServiceSkel {
    protected FreeformSensor obj;
    public FreeformSensor_skel(string p,FreeformSensor o,ServerContext c) : base(p,o,c) { obj=(FreeformSensor)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "active":
    {
    bool ret=await obj.get_active();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "sensor_info":
    {
    SensorInfo ret=await obj.get_sensor_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "active":
    {
    await obj.set_active((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "sensor_info":
    {
    await obj.set_sensor_info(MessageElementUtil.UnpackStructure<SensorInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<SensorData> rr_sensor_data;
    private WireServer<double[]> rr_sensor_value;
    private WireServer<object> rr_freeform_sensor_value;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    FreeformSensor castobj=(FreeformSensor)o;
    this.rr_sensor_data=new PipeServer<SensorData>("sensor_data",this);
    this.rr_sensor_value=new WireServer<double[]>("sensor_value",this);
    this.rr_freeform_sensor_value=new WireServer<object>("freeform_sensor_value",this);
    castobj.sensor_data=this.rr_sensor_data;
    castobj.sensor_value=this.rr_sensor_value;
    castobj.freeform_sensor_value=this.rr_freeform_sensor_value;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_data":
    return await this.rr_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "sensor_value":
    return await this.rr_sensor_value.WireCommand(m,e);
    case "freeform_sensor_value":
    return await this.rr_freeform_sensor_value.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_data":
    this.rr_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "sensor_value":
    this.rr_sensor_value.WirePacketReceived(m,e);
    break;
    case "freeform_sensor_value":
    this.rr_freeform_sensor_value.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "sensor_info") return true;
    if (m.MemberName == "sensor_value") return true;
    if (m.MemberName == "sensor_data") return true;
    if (m.MemberName == "freeform_sensor_value") return true;
    return false;
    }
}
public class Sensor_default_impl : Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
}
public class Vector2Sensor_default_impl : Vector2Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector2> rrvar_vector2_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value {
    get { return rrvar_vector2_sensor_value.Wire;  }
    set {
    if (rrvar_vector2_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector2_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector2>(value);
    }
    }
}
public class Vector3Sensor_default_impl : Vector3Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector3> rrvar_vector3_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value {
    get { return rrvar_vector3_sensor_value.Wire;  }
    set {
    if (rrvar_vector3_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector3_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector3>(value);
    }
    }
}
public class Vector6Sensor_default_impl : Vector6Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector6> rrvar_vector6_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value {
    get { return rrvar_vector6_sensor_value.Wire;  }
    set {
    if (rrvar_vector6_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector6_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector6>(value);
    }
    }
}
public class WrenchSensor_default_impl : WrenchSensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Wrench> rrvar_wrench_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value {
    get { return rrvar_wrench_sensor_value.Wire;  }
    set {
    if (rrvar_wrench_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_wrench_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Wrench>(value);
    }
    }
}
public class FreeformSensor_default_impl : FreeformSensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<object> rrvar_freeform_sensor_value;
    public virtual Task<bool> get_active(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_active(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<SensorInfo> get_sensor_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_sensor_info(SensorInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<object> freeform_sensor_value {
    get { return rrvar_freeform_sensor_value.Wire;  }
    set {
    if (rrvar_freeform_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_freeform_sensor_value= new WireBroadcaster<object>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.sensordata
{
[RobotRaconteurServiceStruct("com.robotraconteur.sensordata.SensorDataHeader")]
public class SensorDataHeader
{
    public com.robotraconteur.datetime.DateTimeUTC ts;
    public ulong seqno;
    public SensorDataSourceInfo source_info;
}

[RobotRaconteurServiceStruct("com.robotraconteur.sensordata.SensorDataSourceInfo")]
public class SensorDataSourceInfo
{
    public com.robotraconteur.identifier.Identifier source;
    public com.robotraconteur.geometry.Pose source_world_pose;
    public string source_config_nonce;
    public Dictionary<string,object> source_params;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.sensordata
{
public class com__robotraconteur__sensordataFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.sensordata\n\nstdver 0.9\n\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.Pose\n\nstruct SensorDataHeader\nfield DateTimeUTC ts\nfield uint64 seqno\nfield SensorDataSourceInfo source_info\nend\n\nstruct SensorDataSourceInfo\nfield Identifier source\nfield Pose source_world_pose\nfield string source_config_nonce\nfield varvalue{string} source_params\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.sensordata";}
    public SensorDataHeader_stub SensorDataHeader_stubentry;
    public SensorDataSourceInfo_stub SensorDataSourceInfo_stubentry;
    public com__robotraconteur__sensordataFactory() : this(null,null) {}
    public com__robotraconteur__sensordataFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SensorDataHeader_stubentry=new SensorDataHeader_stub(this,this.node,this.context);
    SensorDataSourceInfo_stubentry=new SensorDataSourceInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorDataHeader")
    return SensorDataHeader_stubentry;
    if (objecttype=="SensorDataSourceInfo")
    return SensorDataSourceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorDataHeader_stub : IStructureStub {
    public SensorDataHeader_stub(com__robotraconteur__sensordataFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensordataFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorDataHeader s = (SensorDataHeader)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "ts",ref s.ts));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "source_info",s.source_info));
    return new MessageElementStructure("com.robotraconteur.sensordata.SensorDataHeader",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorDataHeader s=new SensorDataHeader();
    s.ts =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.source_info =MessageElementUtil.UnpackStructure<SensorDataSourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_info"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class SensorDataSourceInfo_stub : IStructureStub {
    public SensorDataSourceInfo_stub(com__robotraconteur__sensordataFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensordataFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorDataSourceInfo s = (SensorDataSourceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "source",s.source));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "source_world_pose",ref s.source_world_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("source_config_nonce",s.source_config_nonce));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "source_params",s.source_params));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.sensordata.SensorDataSourceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorDataSourceInfo s=new SensorDataSourceInfo();
    s.source =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source"));
    s.source_world_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_world_pose"));
    s.source_config_nonce =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"source_config_nonce"));
    s.source_params =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_params"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.servo
{
[RobotRaconteurServiceStruct("com.robotraconteur.servo.ServoInfo")]
public class ServoInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public ServoTypeCode servo_type;
    public uint capabilities;
    public uint axis_count;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> position_units;
    public List<com.robotraconteur.robotics.joints.JointEffortUnits> effort_units;
    public double[] position_min;
    public double[] position_max;
    public double[] velocity_min;
    public double[] velocity_max;
    public double[] acceleration_min;
    public double[] acceleration_max;
    public double[] torque_min;
    public double[] torque_max;
    public double[] gear_ratio;
    public double[] sensor_resolution;
    public double[] effort_command_resolution;
    public Dictionary<string,com.robotraconteur.param.ParameterInfo> parameter_info;
    public Dictionary<string,com.robotraconteur.signal.SignalInfo> signal_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.servo.ServoState")]
public class ServoState
{
    public ulong seqno;
    public ServoMode mode;
    public double[] position;
    public double[] velocity;
    public double[] acceleration;
    public double[] effort;
    public double[] position_command;
    public double[] velocity_command;
    public double[] effort_command;
}

[RobotRaconteurServiceStruct("com.robotraconteur.servo.ServoStateSensorData")]
public class ServoStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public ServoState servo_state;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.servo.ServoCommand")]
public class ServoCommand
{
    public ulong seqno;
    public ulong status_seqno;
    public double[] command;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.servo.Servo")]
public interface Servo
{
    Task<ServoInfo> get_servo_info(CancellationToken cancel=default(CancellationToken));
    Task set_servo_info(ServoInfo value, CancellationToken cancel=default(CancellationToken));
    Task<ServoMode> get_mode(CancellationToken cancel=default(CancellationToken));
    Task set_mode(ServoMode value, CancellationToken cancel=default(CancellationToken));
    Task halt(CancellationToken rr_cancel=default(CancellationToken));
    Task trapezoid_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel,CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_signal(string signal_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    Pipe<ServoStateSensorData> servo_state_sensor_data{ get; set; }
    Wire<double[]> position { get; set; }
    Wire<double[]> velocity { get; set; }
    Wire<ServoState> servo_state { get; set; }
    Wire<ServoCommand> position_command { get; set; }
    Wire<ServoCommand> velocity_command { get; set; }
    Wire<ServoCommand> effort_command { get; set; }
}

public static class com__robotraconteur__servoConstants  {
}
    public enum ServoTypeCode
    {
    unknown = 0,
    generic_revolute = 1,
    generic_prismatic = 2,
    revolute_electric = 3,
    revolute_linear = 4,
    rc_servo = 5
    };
    public enum ServoCapabilities
    {
    unknown = 0,
    position_command = 0x1,
    velocity_command = 0x2,
    effort_command = 0x4,
    trapezoidal_command = 0x8,
    signals = 0x1000
    };
    public enum ServoMode
    {
    error = -2,
    disabled = -1,
    halt = 0,
    position_command = 1,
    velocity_command = 2,
    effort_command = 3,
    trapezoidal_command = 4
    };
}

namespace com.robotraconteur.servo
{
public class com__robotraconteur__servoFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.servo\n\nstdver 0.9\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.signal\nimport com.robotraconteur.param\nimport com.robotraconteur.robotics.joints\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.signal.SignalInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.robotics.joints.JointEffortUnits\n\nenum ServoTypeCode\nunknown = 0,\ngeneric_revolute,\ngeneric_prismatic,\nrevolute_electric,\nrevolute_linear,\nrc_servo\nend\n\nenum ServoCapabilities\nunknown = 0,\nposition_command = 0x1,\nvelocity_command = 0x2,\neffort_command = 0x4,\ntrapezoidal_command = 0x8,\nsignals = 0x1000\nend\n\nenum ServoMode\nerror = -2,\ndisabled = -1,\nhalt = 0,\nposition_command,\nvelocity_command,\neffort_command,\ntrapezoidal_command\nend\n\nstruct ServoInfo\nfield DeviceInfo device_info\nfield ServoTypeCode servo_type\nfield uint32 capabilities\nfield uint32 axis_count\nfield JointPositionUnits{list} position_units\nfield JointEffortUnits{list} effort_units\nfield double[] position_min\nfield double[] position_max\nfield double[] velocity_min\nfield double[] velocity_max\nfield double[] acceleration_min\nfield double[] acceleration_max\nfield double[] torque_min\nfield double[] torque_max\nfield double[] gear_ratio\nfield double[] sensor_resolution\nfield double[] effort_command_resolution\nfield ParameterInfo{string} parameter_info\nfield SignalInfo{string} signal_info\nfield varvalue{string} extended\nend\n\nstruct ServoState\nfield uint64 seqno\nfield ServoMode mode\nfield double[] position\nfield double[] velocity\nfield double[] acceleration\nfield double[] effort\nfield double[] position_command\nfield double[] velocity_command\nfield double[] effort_command\nend\n\nstruct ServoStateSensorData\nfield SensorDataHeader data_header\nfield ServoState servo_state\nfield varvalue{string} extended\nend\n\nstruct ServoCommand\nfield uint64 seqno\nfield uint64 status_seqno\nfield double[] command\nend\n\nobject Servo\nfunction void halt() [urgent,nolock]\nproperty ServoInfo servo_info [readonly,nolock]\nproperty ServoMode mode [nolockread]\nwire double[] position [readonly,nolock]\nwire double[] velocity [readonly, nolock]\nwire ServoState servo_state\npipe ServoStateSensorData servo_state_sensor_data\nwire ServoCommand position_command [writeonly]\nwire ServoCommand velocity_command [writeonly]\nwire ServoCommand effort_command [writeonly]\nfunction void trapezoid_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel)\nfunction varvalue getf_signal(string signal_name)\nfunction void setf_signal(string signal_name, varvalue value)\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.servo";}
    public ServoInfo_stub ServoInfo_stubentry;
    public ServoState_stub ServoState_stubentry;
    public ServoStateSensorData_stub ServoStateSensorData_stubentry;
    public ServoCommand_stub ServoCommand_stubentry;
    public com__robotraconteur__servoFactory() : this(null,null) {}
    public com__robotraconteur__servoFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ServoInfo_stubentry=new ServoInfo_stub(this,this.node,this.context);
    ServoState_stubentry=new ServoState_stub(this,this.node,this.context);
    ServoStateSensorData_stubentry=new ServoStateSensorData_stub(this,this.node,this.context);
    ServoCommand_stubentry=new ServoCommand_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ServoInfo")
    return ServoInfo_stubentry;
    if (objecttype=="ServoState")
    return ServoState_stubentry;
    if (objecttype=="ServoStateSensorData")
    return ServoStateSensorData_stubentry;
    if (objecttype=="ServoCommand")
    return ServoCommand_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Servo":
    return new Servo_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Servo":
    return new Servo_skel(path,(Servo)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ServoInfo_stub : IStructureStub {
    public ServoInfo_stub(com__robotraconteur__servoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__servoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ServoInfo s = (ServoInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ServoTypeCode>("servo_type",s.servo_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("capabilities",s.capabilities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("axis_count",s.axis_count));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, "position_units",s.position_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, "effort_units",s.effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position_min",s.position_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position_max",s.position_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity_min",s.velocity_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity_max",s.velocity_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("acceleration_min",s.acceleration_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("acceleration_max",s.acceleration_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("torque_min",s.torque_min));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("torque_max",s.torque_max));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("gear_ratio",s.gear_ratio));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("sensor_resolution",s.sensor_resolution));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("effort_command_resolution",s.effort_command_resolution));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, "signal_info",s.signal_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.servo.ServoInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ServoInfo s=new ServoInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.servo_type =MessageElementUtil.UnpackEnum<ServoTypeCode>(MessageElement.FindElement(m.Elements,"servo_type"));
    s.capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"capabilities")));
    s.axis_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"axis_count")));
    s.position_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"position_units"));
    s.effort_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"effort_units"));
    s.position_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position_min"));
    s.position_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position_max"));
    s.velocity_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity_min"));
    s.velocity_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity_max"));
    s.acceleration_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"acceleration_min"));
    s.acceleration_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"acceleration_max"));
    s.torque_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"torque_min"));
    s.torque_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"torque_max"));
    s.gear_ratio =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"gear_ratio"));
    s.sensor_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"sensor_resolution"));
    s.effort_command_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"effort_command_resolution"));
    s.parameter_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_info"));
    s.signal_info =MessageElementUtil.UnpackMap<string,com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ServoState_stub : IStructureStub {
    public ServoState_stub(com__robotraconteur__servoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__servoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ServoState s = (ServoState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ServoMode>("mode",s.mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position",s.position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity",s.velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("acceleration",s.acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("effort",s.effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position_command",s.position_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity_command",s.velocity_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("effort_command",s.effort_command));
    return new MessageElementStructure("com.robotraconteur.servo.ServoState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ServoState s=new ServoState();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.mode =MessageElementUtil.UnpackEnum<ServoMode>(MessageElement.FindElement(m.Elements,"mode"));
    s.position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position"));
    s.velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity"));
    s.acceleration =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"acceleration"));
    s.effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"effort"));
    s.position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position_command"));
    s.velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity_command"));
    s.effort_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"effort_command"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ServoStateSensorData_stub : IStructureStub {
    public ServoStateSensorData_stub(com__robotraconteur__servoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__servoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ServoStateSensorData s = (ServoStateSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "servo_state",s.servo_state));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.servo.ServoStateSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ServoStateSensorData s=new ServoStateSensorData();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.servo_state =MessageElementUtil.UnpackStructure<ServoState>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"servo_state"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ServoCommand_stub : IStructureStub {
    public ServoCommand_stub(com__robotraconteur__servoFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__servoFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ServoCommand s = (ServoCommand)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("status_seqno",s.status_seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("command",s.command));
    return new MessageElementStructure("com.robotraconteur.servo.ServoCommand",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ServoCommand s=new ServoCommand();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.status_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"status_seqno")));
    s.command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"command"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Servo_stub : ServiceStub , Servo {
    private Pipe<ServoStateSensorData> rr_servo_state_sensor_data;
    private Wire<double[]> rr_position;
    private Wire<double[]> rr_velocity;
    private Wire<ServoState> rr_servo_state;
    private Wire<ServoCommand> rr_position_command;
    private Wire<ServoCommand> rr_velocity_command;
    private Wire<ServoCommand> rr_effort_command;
    public Servo_stub(string path, ClientContext c) : base(path, c) {
    rr_servo_state_sensor_data=new PipeClient<ServoStateSensorData>("servo_state_sensor_data", this);
    rr_position=new WireClient<double[]>("position", this);
    rr_velocity=new WireClient<double[]>("velocity", this);
    rr_servo_state=new WireClient<ServoState>("servo_state", this);
    rr_position_command=new WireClient<ServoCommand>("position_command", this);
    rr_velocity_command=new WireClient<ServoCommand>("velocity_command", this);
    rr_effort_command=new WireClient<ServoCommand>("effort_command", this);
    }
    public async Task<ServoInfo> get_servo_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "servo_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<ServoInfo>(rr_node, rr_context, me);
        }
    public async Task set_servo_info(ServoInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"servo_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ServoMode> get_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<ServoMode>(me);
        }
    public async Task set_mode(ServoMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ServoMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task halt(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"halt");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task trapezoid_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"trapezoid_move");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("target_pos",target_pos));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("target_vel",target_vel));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("vel",vel));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("accel",accel));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_signal(string signal_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_signal(string signal_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<ServoStateSensorData> servo_state_sensor_data {
    get { return rr_servo_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> position {
    get { return rr_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> velocity {
    get { return rr_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoState> servo_state {
    get { return rr_servo_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> position_command {
    get { return rr_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> velocity_command {
    get { return rr_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> effort_command {
    get { return rr_effort_command;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "servo_state_sensor_data":
    this.rr_servo_state_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "position":
    this.rr_position.WirePacketReceived(m);
    break;
    case "velocity":
    this.rr_velocity.WirePacketReceived(m);
    break;
    case "servo_state":
    this.rr_servo_state.WirePacketReceived(m);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m);
    break;
    case "effort_command":
    this.rr_effort_command.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Servo_skel : ServiceSkel {
    protected Servo obj;
    public Servo_skel(string p,Servo o,ServerContext c) : base(p,o,c) { obj=(Servo)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "servo_info":
    {
    ServoInfo ret=await obj.get_servo_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "mode":
    {
    ServoMode ret=await obj.get_mode();
    mr.AddElement(MessageElementUtil.PackEnum<ServoMode>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "servo_info":
    {
    await obj.set_servo_info(MessageElementUtil.UnpackStructure<ServoInfo>(rr_node, rr_context, me));
    break;
    }
    case "mode":
    {
    await obj.set_mode(MessageElementUtil.UnpackEnum<ServoMode>(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "halt":
    {
    await this.obj.halt(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "trapezoid_move":
    {
    double[] target_pos=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"target_pos"));
    double[] target_vel=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"target_vel"));
    double[] vel=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"vel"));
    double[] accel=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"accel"));
    await this.obj.trapezoid_move(target_pos, target_vel, vel, accel, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    object rr_ret=await this.obj.getf_signal(signal_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_signal(signal_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<ServoStateSensorData> rr_servo_state_sensor_data;
    private WireServer<double[]> rr_position;
    private WireServer<double[]> rr_velocity;
    private WireServer<ServoState> rr_servo_state;
    private WireServer<ServoCommand> rr_position_command;
    private WireServer<ServoCommand> rr_velocity_command;
    private WireServer<ServoCommand> rr_effort_command;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Servo castobj=(Servo)o;
    this.rr_servo_state_sensor_data=new PipeServer<ServoStateSensorData>("servo_state_sensor_data",this);
    this.rr_position=new WireServer<double[]>("position",this);
    this.rr_velocity=new WireServer<double[]>("velocity",this);
    this.rr_servo_state=new WireServer<ServoState>("servo_state",this);
    this.rr_position_command=new WireServer<ServoCommand>("position_command",this);
    this.rr_velocity_command=new WireServer<ServoCommand>("velocity_command",this);
    this.rr_effort_command=new WireServer<ServoCommand>("effort_command",this);
    castobj.servo_state_sensor_data=this.rr_servo_state_sensor_data;
    castobj.position=this.rr_position;
    castobj.velocity=this.rr_velocity;
    castobj.servo_state=this.rr_servo_state;
    castobj.position_command=this.rr_position_command;
    castobj.velocity_command=this.rr_velocity_command;
    castobj.effort_command=this.rr_effort_command;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "servo_state_sensor_data":
    return await this.rr_servo_state_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "position":
    return await this.rr_position.WireCommand(m,e);
    case "velocity":
    return await this.rr_velocity.WireCommand(m,e);
    case "servo_state":
    return await this.rr_servo_state.WireCommand(m,e);
    case "position_command":
    return await this.rr_position_command.WireCommand(m,e);
    case "velocity_command":
    return await this.rr_velocity_command.WireCommand(m,e);
    case "effort_command":
    return await this.rr_effort_command.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "servo_state_sensor_data":
    this.rr_servo_state_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "position":
    this.rr_position.WirePacketReceived(m,e);
    break;
    case "velocity":
    this.rr_velocity.WirePacketReceived(m,e);
    break;
    case "servo_state":
    this.rr_servo_state.WirePacketReceived(m,e);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m,e);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m,e);
    break;
    case "effort_command":
    this.rr_effort_command.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "halt") return true;
    if (m.MemberName == "servo_info") return true;
    if (m.MemberName == "mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "position") return true;
    if (m.MemberName == "velocity") return true;
    return false;
    }
}
public class Servo_default_impl : Servo{
    protected WireBroadcaster<double[]> rrvar_position;
    protected WireBroadcaster<double[]> rrvar_velocity;
    protected WireUnicastReceiver<ServoCommand> rrvar_position_command;
    protected WireUnicastReceiver<ServoCommand> rrvar_velocity_command;
    protected WireUnicastReceiver<ServoCommand> rrvar_effort_command;
    public virtual Task<ServoInfo> get_servo_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_servo_info(ServoInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ServoMode> get_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_mode(ServoMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task halt(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task trapezoid_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_signal(string signal_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<ServoStateSensorData> servo_state_sensor_data {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Wire<double[]> position {
    get { return rrvar_position.Wire;  }
    set {
    if (rrvar_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> velocity {
    get { return rrvar_velocity.Wire;  }
    set {
    if (rrvar_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<ServoState> servo_state {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<ServoCommand> position_command {
    get { return rrvar_position_command.Wire;  }
    set {
    if (rrvar_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
    public virtual Wire<ServoCommand> velocity_command {
    get { return rrvar_velocity_command.Wire;  }
    set {
    if (rrvar_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
    public virtual Wire<ServoCommand> effort_command {
    get { return rrvar_effort_command.Wire;  }
    set {
    if (rrvar_effort_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_effort_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.signal
{
[RobotRaconteurServiceStruct("com.robotraconteur.signal.SignalInfo")]
public class SignalInfo
{
    public com.robotraconteur.identifier.Identifier signal_identifier;
    public com.robotraconteur.device.DeviceClass signal_class;
    public List<com.robotraconteur.units.SIUnit> units;
    public com.robotraconteur.datatype.DataType data_type;
    public SignalType signal_type;
    public SignalAccessLevel access_level;
    public uint[] address;
    public string user_description;
    public double max_update_rate;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.signal.Signal")]
public interface Signal
{
    Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken));
    Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken));
    Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Wire<object> signal_value { get; set; }
    Wire<object> signal_command { get; set; }
    Wire<double[]> signal_value_vec { get; set; }
    Wire<double[]> signal_command_vec { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.signal.SignalDevice")]
public interface SignalDevice
{
    Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken));
    Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken));
    Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<Signal> get_signals(int ind, CancellationToken rr_cancel=default(CancellationToken));
}

public static class com__robotraconteur__signalConstants  {
}
    public enum SignalType
    {
    unknown = 0,
    digital = 1,
    analog = 2,
    digital_port = 3,
    analog_port = 4,
    vector3 = 5,
    vector6 = 6,
    wrench = 7,
    pose = 8,
    transform = 9,
    other = 10
    };
    public enum SignalAccessLevel
    {
    undefined = 0,
    internal_ = 1,
    restricted = 2,
    readonly_ = 3,
    all = 4
    };
}

namespace com.robotraconteur.signal
{
public class com__robotraconteur__signalFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.signal\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\nimport com.robotraconteur.units\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.DeviceClass\nusing com.robotraconteur.units.SIUnit\n\nenum SignalType\nunknown = 0,\ndigital = 1,\nanalog,\ndigital_port,\nanalog_port,\nvector3,\nvector6,\nwrench,\npose,\ntransform,\nother\nend\n\nenum SignalAccessLevel\nundefined = 0,\ninternal,\nrestricted,\nreadonly,\nall\nend\n\nstruct SignalInfo\nfield Identifier signal_identifier\nfield DeviceClass signal_class\nfield SIUnit{list} units\nfield DataType data_type\nfield SignalType signal_type\nfield SignalAccessLevel access_level\nfield uint32[] address\nfield string user_description\nfield double max_update_rate\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} extended\nend\n\nobject Signal\nproperty SignalInfo signal_info [readonly,nolock]\nwire varvalue signal_value [readonly]\nwire varvalue signal_command [writeonly]\nwire double[] signal_value_vec [readonly]\nwire double[] signal_command_vec [writeonly]\nproperty uint32 update_downsample [perclient]\nproperty double update_rate [readonly]\nend\n\nobject SignalDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SignalInfo{list} signal_info [readonly,nolock]\nobjref Signal{int32} signals\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.signal";}
    public SignalInfo_stub SignalInfo_stubentry;
    public com__robotraconteur__signalFactory() : this(null,null) {}
    public com__robotraconteur__signalFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SignalInfo_stubentry=new SignalInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SignalInfo")
    return SignalInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Signal":
    return new Signal_stub(path, context);
    case "SignalDevice":
    return new SignalDevice_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Signal":
    return new Signal_skel(path,(Signal)obj,context);
    case "SignalDevice":
    return new SignalDevice_skel(path,(SignalDevice)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SignalInfo_stub : IStructureStub {
    public SignalInfo_stub(com__robotraconteur__signalFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__signalFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SignalInfo s = (SignalInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "signal_identifier",s.signal_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "signal_class",s.signal_class));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>(rr_node, rr_context, "units",s.units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<SignalType>("signal_type",s.signal_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<SignalAccessLevel>("access_level",s.access_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("address",s.address));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("max_update_rate",s.max_update_rate));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "min_value",s.min_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "max_value",s.max_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.signal.SignalInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SignalInfo s=new SignalInfo();
    s.signal_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_identifier"));
    s.signal_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_class"));
    s.units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"units"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.signal_type =MessageElementUtil.UnpackEnum<SignalType>(MessageElement.FindElement(m.Elements,"signal_type"));
    s.access_level =MessageElementUtil.UnpackEnum<SignalAccessLevel>(MessageElement.FindElement(m.Elements,"access_level"));
    s.address =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"address"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.max_update_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"max_update_rate")));
    s.min_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"max_value"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Signal_stub : ServiceStub , Signal {
    private Wire<object> rr_signal_value;
    private Wire<object> rr_signal_command;
    private Wire<double[]> rr_signal_value_vec;
    private Wire<double[]> rr_signal_command_vec;
    public Signal_stub(string path, ClientContext c) : base(path, c) {
    rr_signal_value=new WireClient<object>("signal_value", this);
    rr_signal_command=new WireClient<object>("signal_command", this);
    rr_signal_value_vec=new WireClient<double[]>("signal_value_vec", this);
    rr_signal_command_vec=new WireClient<double[]>("signal_command_vec", this);
    }
    public async Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "signal_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SignalInfo>(rr_node, rr_context, me);
        }
    public async Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"signal_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_downsample");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_downsample");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<object> signal_value {
    get { return rr_signal_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<object> signal_command {
    get { return rr_signal_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_value_vec {
    get { return rr_signal_value_vec;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_command_vec {
    get { return rr_signal_command_vec;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "signal_value":
    this.rr_signal_value.WirePacketReceived(m);
    break;
    case "signal_command":
    this.rr_signal_command.WirePacketReceived(m);
    break;
    case "signal_value_vec":
    this.rr_signal_value_vec.WirePacketReceived(m);
    break;
    case "signal_command_vec":
    this.rr_signal_command_vec.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class SignalDevice_stub : ServiceStub , SignalDevice {
    public SignalDevice_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "signal_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<SignalInfo>(rr_node, rr_context, me);
        }
    public async Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"signal_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<SignalInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<Signal> get_signals(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (Signal)await FindObjRefTyped("signals",ind.ToString(),"com.robotraconteur.signal.Signal",cancel);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Signal_skel : ServiceSkel {
    protected Signal obj;
    public Signal_skel(string p,Signal o,ServerContext c) : base(p,o,c) { obj=(Signal)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "signal_info":
    {
    SignalInfo ret=await obj.get_signal_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "update_downsample":
    {
    uint ret=await obj.get_update_downsample();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "signal_info":
    {
    await obj.set_signal_info(MessageElementUtil.UnpackStructure<SignalInfo>(rr_node, rr_context, me));
    break;
    }
    case "update_downsample":
    {
    await obj.set_update_downsample((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<object> rr_signal_value;
    private WireServer<object> rr_signal_command;
    private WireServer<double[]> rr_signal_value_vec;
    private WireServer<double[]> rr_signal_command_vec;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Signal castobj=(Signal)o;
    this.rr_signal_value=new WireServer<object>("signal_value",this);
    this.rr_signal_command=new WireServer<object>("signal_command",this);
    this.rr_signal_value_vec=new WireServer<double[]>("signal_value_vec",this);
    this.rr_signal_command_vec=new WireServer<double[]>("signal_command_vec",this);
    castobj.signal_value=this.rr_signal_value;
    castobj.signal_command=this.rr_signal_command;
    castobj.signal_value_vec=this.rr_signal_value_vec;
    castobj.signal_command_vec=this.rr_signal_command_vec;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "signal_value":
    return await this.rr_signal_value.WireCommand(m,e);
    case "signal_command":
    return await this.rr_signal_command.WireCommand(m,e);
    case "signal_value_vec":
    return await this.rr_signal_value_vec.WireCommand(m,e);
    case "signal_command_vec":
    return await this.rr_signal_command_vec.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "signal_value":
    this.rr_signal_value.WirePacketReceived(m,e);
    break;
    case "signal_command":
    this.rr_signal_command.WirePacketReceived(m,e);
    break;
    case "signal_value_vec":
    this.rr_signal_value_vec.WirePacketReceived(m,e);
    break;
    case "signal_command_vec":
    this.rr_signal_command_vec.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "signal_info") return true;
    return false;
    }
}
public class SignalDevice_skel : ServiceSkel {
    protected SignalDevice obj;
    public SignalDevice_skel(string p,SignalDevice o,ServerContext c) : base(p,o,c) { obj=(SignalDevice)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    com.robotraconteur.device.DeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "signal_info":
    {
    List<SignalInfo> ret=await obj.get_signal_info();
    mr.AddElement(MessageElementUtil.PackListType<SignalInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me));
    break;
    }
    case "signal_info":
    {
    await obj.set_signal_info(MessageElementUtil.UnpackList<SignalInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "signals": {
    return await obj.get_signals(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    SignalDevice castobj=(SignalDevice)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    if (m.MemberName == "signal_info") return true;
    return false;
    }
}
public class Signal_default_impl : Signal{
    protected WireBroadcaster<object> rrvar_signal_value;
    protected WireUnicastReceiver<object> rrvar_signal_command;
    protected WireBroadcaster<double[]> rrvar_signal_value_vec;
    protected WireUnicastReceiver<double[]> rrvar_signal_command_vec;
    public virtual Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<object> signal_value {
    get { return rrvar_signal_value.Wire;  }
    set {
    if (rrvar_signal_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value= new WireBroadcaster<object>(value);
    }
    }
    public virtual Wire<object> signal_command {
    get { return rrvar_signal_command.Wire;  }
    set {
    if (rrvar_signal_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command= new WireUnicastReceiver<object>(value);
    }
    }
    public virtual Wire<double[]> signal_value_vec {
    get { return rrvar_signal_value_vec.Wire;  }
    set {
    if (rrvar_signal_value_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value_vec= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> signal_command_vec {
    get { return rrvar_signal_command_vec.Wire;  }
    set {
    if (rrvar_signal_command_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command_vec= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public class SignalDevice_default_impl : SignalDevice{
    public virtual Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Signal> get_signals(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.units
{
[RobotRaconteurServicePod("com.robotraconteur.units.SIUnit")]
public struct SIUnit
{
    public double coeff;
    public sbyte m;
    public sbyte s;
    public sbyte kg;
    public sbyte A;
    public sbyte K;
    public sbyte mol;
    public sbyte cd;
    public sbyte rad;
    public sbyte sr;
    public sbyte prefix;
}

}

namespace com.robotraconteur.units
{
public class com__robotraconteur__unitsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.units\n\nstdver 0.9\n\npod SIUnit\nfield double coeff\nfield int8 m\nfield int8 s\nfield int8 kg\nfield int8 A\nfield int8 K\nfield int8 mol\nfield int8 cd\nfield int8 rad\nfield int8 sr\nfield int8 prefix\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.units";}
    public SIUnit_stub SIUnit_stubentry;
    public com__robotraconteur__unitsFactory() : this(null,null) {}
    public com__robotraconteur__unitsFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SIUnit_stubentry=new SIUnit_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="SIUnit")
    return SIUnit_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SIUnit_stub : PodStub<SIUnit> {
    public SIUnit_stub(com__robotraconteur__unitsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__unitsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref SIUnit s1) {
    List<MessageElement> m=new List<MessageElement>();
    SIUnit s = (SIUnit)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("coeff",s.coeff));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("m",s.m));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("s",s.s));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("kg",s.kg));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("A",s.A));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("K",s.K));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("mol",s.mol));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("cd",s.cd));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("rad",s.rad));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("sr",s.sr));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("prefix",s.prefix));
    return new MessageElementPod(m);
    }
    public override SIUnit UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    SIUnit s = new SIUnit();
    s.coeff =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"coeff")));
    s.m =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"m")));
    s.s =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"s")));
    s.kg =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"kg")));
    s.A =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"A")));
    s.K =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"K")));
    s.mol =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"mol")));
    s.cd =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"cd")));
    s.rad =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"rad")));
    s.sr =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"sr")));
    s.prefix =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"prefix")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.units.SIUnit"; } }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.uuid
{
[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.uuid.UUID",typeof(byte), 16)]
public struct UUID
{
    public byte[] uuid_bytes;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[16]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(this.uuid_bytes, 0, a.Array, a.Offset + 0, 16);
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(a.Array, a.Offset + 0, this.uuid_bytes, 0, 16);
    }
}

}

namespace com.robotraconteur.uuid
{
public class com__robotraconteur__uuidFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.uuid\n\nstdver 0.9\n\nnamedarray UUID\nfield uint8[16] uuid_bytes\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.uuid";}
    public UUID_stub UUID_stubentry;
    public com__robotraconteur__uuidFactory() : this(null,null) {}
    public com__robotraconteur__uuidFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    UUID_stubentry=new UUID_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="UUID")
    return UUID_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class UUID_stub : NamedArrayStub<UUID,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref UUID s) {
    return s.GetNumericArray();
    }
    public override UUID GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 16) throw new DataTypeException("Invalid namedarray array");
    var s = new UUID();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(UUID[] s) {
    return s.GetNumericArray();
    }
    public override UUID[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 16 != 0) throw new DataTypeException("Invalid namedarray array");
    UUID[] s = new UUID[m.Length / 16];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.uuid.UUID"; } }
}

public static class RRExtensions
{
    public static byte[] GetNumericArray(this UUID[] s)
    {
    var a=new ArraySegment<byte>(new byte[16 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
